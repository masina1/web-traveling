{
    "sourceFile": "components/trip/LocationSearch.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1752443242997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752444494369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,13 +31,31 @@\n \r\n   // Initialize Google Places services\r\n   useEffect(() => {\r\n     const initializeServices = async () => {\r\n+      // Check if Google Maps is already loaded\r\n       if (!window.google?.maps?.places) {\r\n         // Load Google Maps if not already loaded\r\n         const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\r\n-        if (!apiKey) return;\r\n+        if (!apiKey) {\r\n+          console.error('Google Maps API key not found');\r\n+          return;\r\n+        }\r\n \r\n+        // Check if script is already being loaded\r\n+        if (document.querySelector('script[src*=\"maps.googleapis.com\"]')) {\r\n+          // Script is already loading, wait for it\r\n+          const checkLoaded = () => {\r\n+            if (window.google?.maps?.places) {\r\n+              initializeServices();\r\n+            } else {\r\n+              setTimeout(checkLoaded, 100);\r\n+            }\r\n+          };\r\n+          checkLoaded();\r\n+          return;\r\n+        }\r\n+\r\n         const script = document.createElement('script');\r\n         script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;\r\n         script.async = true;\r\n         script.defer = true;\r\n@@ -45,25 +63,35 @@\n         script.onload = () => {\r\n           initializeServices();\r\n         };\r\n         \r\n+        script.onerror = () => {\r\n+          console.error('Failed to load Google Maps API');\r\n+        };\r\n+        \r\n         document.head.appendChild(script);\r\n         return;\r\n       }\r\n \r\n-      autocompleteService.current = new google.maps.places.AutocompleteService();\r\n-      \r\n-      // Create a hidden div for PlacesService\r\n-      const mapDiv = document.createElement('div');\r\n-      mapDiv.style.display = 'none';\r\n-      document.body.appendChild(mapDiv);\r\n-      \r\n-      const map = new google.maps.Map(mapDiv, {\r\n-        center: { lat: 0, lng: 0 },\r\n-        zoom: 1\r\n-      });\r\n-      \r\n-      placesService.current = new google.maps.places.PlacesService(map);\r\n+      // Initialize services\r\n+      try {\r\n+        autocompleteService.current = new google.maps.places.AutocompleteService();\r\n+        \r\n+        // Create a hidden div for PlacesService\r\n+        const mapDiv = document.createElement('div');\r\n+        mapDiv.style.display = 'none';\r\n+        document.body.appendChild(mapDiv);\r\n+        \r\n+        const map = new google.maps.Map(mapDiv, {\r\n+          center: { lat: 0, lng: 0 },\r\n+          zoom: 1\r\n+        });\r\n+        \r\n+        placesService.current = new google.maps.places.PlacesService(map);\r\n+        console.log('Google Places services initialized successfully');\r\n+      } catch (error) {\r\n+        console.error('Error initializing Google Places services:', error);\r\n+      }\r\n     };\r\n \r\n     initializeServices();\r\n   }, []);\r\n"
                },
                {
                    "date": 1752444512302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,45 +95,63 @@\n \r\n     initializeServices();\r\n   }, []);\r\n \r\n-  // Handle search input\r\n-  const handleSearch = async (value: string) => {\r\n+  // Debounced search function\r\n+  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n+\r\n+  // Handle search input with debouncing\r\n+  const handleSearch = (value: string) => {\r\n     setSearchValue(value);\r\n     setSelectedIndex(-1);\r\n     \r\n-    if (!value.trim() || !autocompleteService.current) {\r\n+    // Clear previous timeout\r\n+    if (searchTimeoutRef.current) {\r\n+      clearTimeout(searchTimeoutRef.current);\r\n+    }\r\n+    \r\n+    if (!value.trim()) {\r\n       setPredictions([]);\r\n       setShowSuggestions(false);\r\n+      setIsLoading(false);\r\n       return;\r\n     }\r\n \r\n+    // Check if services are ready\r\n+    if (!autocompleteService.current) {\r\n+      console.warn('AutocompleteService not initialized yet');\r\n+      return;\r\n+    }\r\n+\r\n     setIsLoading(true);\r\n \r\n-    try {\r\n-      const request: google.maps.places.AutocompletionRequest = {\r\n-        input: value,\r\n-        types: ['establishment', 'geocode'],\r\n-        componentRestrictions: { country: [] }, // Allow all countries\r\n-      };\r\n+    // Debounce the search by 300ms\r\n+    searchTimeoutRef.current = setTimeout(async () => {\r\n+      try {\r\n+        const request: google.maps.places.AutocompletionRequest = {\r\n+          input: value,\r\n+          types: ['establishment', 'geocode'],\r\n+          componentRestrictions: { country: [] }, // Allow all countries\r\n+        };\r\n \r\n-      autocompleteService.current.getPlacePredictions(request, (predictions, status) => {\r\n+        autocompleteService.current!.getPlacePredictions(request, (predictions, status) => {\r\n+          setIsLoading(false);\r\n+          \r\n+          if (status === google.maps.places.PlacesServiceStatus.OK && predictions) {\r\n+            setPredictions(predictions.slice(0, 5)); // Limit to 5 suggestions\r\n+            setShowSuggestions(true);\r\n+          } else {\r\n+            setPredictions([]);\r\n+            setShowSuggestions(false);\r\n+          }\r\n+        });\r\n+      } catch (error) {\r\n+        console.error('Error fetching predictions:', error);\r\n         setIsLoading(false);\r\n-        \r\n-        if (status === google.maps.places.PlacesServiceStatus.OK && predictions) {\r\n-          setPredictions(predictions.slice(0, 5)); // Limit to 5 suggestions\r\n-          setShowSuggestions(true);\r\n-        } else {\r\n-          setPredictions([]);\r\n-          setShowSuggestions(false);\r\n-        }\r\n-      });\r\n-    } catch (error) {\r\n-      console.error('Error fetching predictions:', error);\r\n-      setIsLoading(false);\r\n-      setPredictions([]);\r\n-      setShowSuggestions(false);\r\n-    }\r\n+        setPredictions([]);\r\n+        setShowSuggestions(false);\r\n+      }\r\n+    }, 300);\r\n   };\r\n \r\n   // Handle place selection\r\n   const handlePlaceSelect = async (placeId: string, description: string) => {\r\n"
                },
                {
                    "date": 1752444521711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,8 +254,17 @@\n     document.addEventListener('mousedown', handleClickOutside);\r\n     return () => document.removeEventListener('mousedown', handleClickOutside);\r\n   }, []);\r\n \r\n+  // Cleanup timeout on unmount\r\n+  useEffect(() => {\r\n+    return () => {\r\n+      if (searchTimeoutRef.current) {\r\n+        clearTimeout(searchTimeoutRef.current);\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n   return (\r\n     <div className={`relative ${className}`}>\r\n       <div className=\"relative\">\r\n         <input\r\n"
                },
                {
                    "date": 1752444530815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,18 +270,22 @@\n         <input\r\n           ref={inputRef}\r\n           type=\"text\"\r\n           value={searchValue}\r\n-          onChange={(e) => handleSearch(e.target.value)}\r\n+          onChange={(e) => {\r\n+            e.preventDefault();\r\n+            handleSearch(e.target.value);\r\n+          }}\r\n           onKeyDown={handleKeyDown}\r\n           onFocus={() => {\r\n             if (predictions.length > 0) {\r\n               setShowSuggestions(true);\r\n             }\r\n           }}\r\n           placeholder={placeholder}\r\n           className=\"input-field pr-10\"\r\n-          disabled={isLoading}\r\n+          disabled={false}\r\n+          autoComplete=\"off\"\r\n         />\r\n         \r\n         {/* Search Icon */}\r\n         <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\r\n"
                },
                {
                    "date": 1752444552202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -299,14 +299,27 @@\n         </div>\r\n       </div>\r\n \r\n       {/* Suggestions Dropdown */}\r\n-      {showSuggestions && predictions.length > 0 && (\r\n+      {showSuggestions && (\r\n         <div\r\n           ref={suggestionsRef}\r\n           className=\"absolute top-full left-0 right-0 bg-white rounded-lg shadow-lg border border-gray-200 mt-1 max-h-64 overflow-y-auto z-50\"\r\n         >\r\n-          {predictions.map((prediction, index) => (\r\n+          {isLoading && (\r\n+            <div className=\"px-4 py-3 text-center text-gray-500\">\r\n+              <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-primary-600 border-t-transparent mx-auto mb-2\"></div>\r\n+              <span className=\"text-sm\">Searching...</span>\r\n+            </div>\r\n+          )}\r\n+          \r\n+          {!isLoading && predictions.length === 0 && searchValue.trim() && (\r\n+            <div className=\"px-4 py-3 text-center text-gray-500\">\r\n+              <span className=\"text-sm\">No places found</span>\r\n+            </div>\r\n+          )}\r\n+          \r\n+          {!isLoading && predictions.length > 0 && predictions.map((prediction, index) => (\r\n             <button\r\n               key={prediction.place_id}\r\n               onClick={() => handlePlaceSelect(prediction.place_id, prediction.description)}\r\n               className={`w-full px-4 py-3 text-left hover:bg-gray-50 border-b border-gray-100 last:border-b-0 transition-colors ${\r\n@@ -321,12 +334,12 @@\n                   </svg>\r\n                 </div>\r\n                 <div className=\"flex-1 min-w-0\">\r\n                   <div className=\"font-medium text-gray-900 truncate\">\r\n-                    {prediction.structured_formatting.main_text}\r\n+                    {prediction.structured_formatting?.main_text || prediction.description}\r\n                   </div>\r\n                   <div className=\"text-sm text-gray-500 truncate\">\r\n-                    {prediction.structured_formatting.secondary_text}\r\n+                    {prediction.structured_formatting?.secondary_text || ''}\r\n                   </div>\r\n                 </div>\r\n               </div>\r\n             </button>\r\n"
                },
                {
                    "date": 1752444560780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,8 +278,11 @@\n           onKeyDown={handleKeyDown}\r\n           onFocus={() => {\r\n             if (predictions.length > 0) {\r\n               setShowSuggestions(true);\r\n+            } else if (searchValue.trim() && autocompleteService.current) {\r\n+              // Trigger search if there's a value but no predictions\r\n+              handleSearch(searchValue);\r\n             }\r\n           }}\r\n           placeholder={placeholder}\r\n           className=\"input-field pr-10\"\r\n"
                },
                {
                    "date": 1752472497991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,11 +34,11 @@\n     const initializeServices = async () => {\r\n       // Check if Google Maps is already loaded\r\n       if (!window.google?.maps?.places) {\r\n         // Load Google Maps if not already loaded\r\n-        const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\r\n+        const apiKey = process.env.NEXT_PUBLIC_GOOGLE_PLACES_API_KEY || process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\r\n         if (!apiKey) {\r\n-          console.error('Google Maps API key not found');\r\n+          console.error('Google Places API key not found. Please set NEXT_PUBLIC_GOOGLE_PLACES_API_KEY in your .env.local file');\r\n           return;\r\n         }\r\n \r\n         // Check if script is already being loaded\r\n@@ -64,9 +64,9 @@\n           initializeServices();\r\n         };\r\n         \r\n         script.onerror = () => {\r\n-          console.error('Failed to load Google Maps API');\r\n+          console.error('Failed to load Google Maps API. Please check your API key and ensure the Places API is enabled.');\r\n         };\r\n         \r\n         document.head.appendChild(script);\r\n         return;\r\n"
                },
                {
                    "date": 1752472511615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,8 +141,23 @@\n             setShowSuggestions(true);\r\n           } else {\r\n             setPredictions([]);\r\n             setShowSuggestions(false);\r\n+            \r\n+            // Log specific error for debugging\r\n+            console.error('Places API error:', {\r\n+              status: status,\r\n+              statusText: google.maps.places.PlacesServiceStatus[status],\r\n+              input: value\r\n+            });\r\n+            \r\n+            // Show user-friendly error message for common issues\r\n+            if (status === google.maps.places.PlacesServiceStatus.REQUEST_DENIED) {\r\n+              console.error('❌ Places API request denied. Please check:');\r\n+              console.error('1. API key is correct and has Places API enabled');\r\n+              console.error('2. Billing is enabled for your Google Cloud project');\r\n+              console.error('3. Places API is enabled in Google Cloud Console');\r\n+            }\r\n           }\r\n         });\r\n       } catch (error) {\r\n         console.error('Error fetching predictions:', error);\r\n"
                },
                {
                    "date": 1752472523902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,30 +194,37 @@\n       placesService.current.getDetails(request, (place, status) => {\r\n         setIsLoading(false);\r\n         \r\n         if (status === google.maps.places.PlacesServiceStatus.OK && place) {\r\n-          const destination: Destination = {\r\n-            id: '', // Will be set by server\r\n-            tripId,\r\n+          // Create destination object\r\n+          const newDestination: Destination = {\r\n+            id: crypto.randomUUID(),\r\n+            tripId: tripId,\r\n             locationName: place.name || description,\r\n-            address: place.formatted_address || description,\r\n+            address: place.formatted_address || '',\r\n             lat: place.geometry?.location?.lat() || 0,\r\n             lng: place.geometry?.location?.lng() || 0,\r\n             day: selectedDay,\r\n-            orderIndex: 1, // Will be adjusted by parent component\r\n-            placeId: place.place_id,\r\n-            rating: place.rating,\r\n-            priceLevel: place.price_level,\r\n-            category: place.types?.[0] || 'place',\r\n-            photos: place.photos?.slice(0, 3).map(photo => \r\n-              photo.getUrl({ maxWidth: 400, maxHeight: 300 })\r\n-            ) || [],\r\n-            createdAt: new Date(),\r\n-            updatedAt: new Date(),\r\n+            notes: '',\r\n           };\r\n-\r\n-          onLocationSelect(destination);\r\n-          setSearchValue(''); // Clear search after selection\r\n+          \r\n+          onLocationSelect(newDestination);\r\n+          setSearchValue('');\r\n+          setShowSuggestions(false);\r\n+        } else {\r\n+          console.error('Place details API error:', {\r\n+            status: status,\r\n+            statusText: google.maps.places.PlacesServiceStatus[status],\r\n+            placeId: placeId\r\n+          });\r\n+          \r\n+          if (status === google.maps.places.PlacesServiceStatus.REQUEST_DENIED) {\r\n+            console.error('❌ Place Details API request denied. Please check your API configuration.');\r\n+          }\r\n+          \r\n+          // Reset search\r\n+          setSearchValue('');\r\n+          setShowSuggestions(false);\r\n         }\r\n       });\r\n     } catch (error) {\r\n       console.error('Error fetching place details:', error);\r\n"
                },
                {
                    "date": 1752472541138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,8 +204,18 @@\n             lat: place.geometry?.location?.lat() || 0,\r\n             lng: place.geometry?.location?.lng() || 0,\r\n             day: selectedDay,\r\n             notes: '',\r\n+            orderIndex: 1, // Will be adjusted by parent component\r\n+            placeId: place.place_id,\r\n+            category: place.types?.[0] || 'place',\r\n+            rating: place.rating,\r\n+            priceLevel: place.price_level,\r\n+            photos: place.photos?.slice(0, 3).map(photo => \r\n+              photo.getUrl({ maxWidth: 400, maxHeight: 300 })\r\n+            ) || [],\r\n+            createdAt: new Date(),\r\n+            updatedAt: new Date(),\r\n           };\r\n           \r\n           onLocationSelect(newDestination);\r\n           setSearchValue('');\r\n"
                },
                {
                    "date": 1752472782781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,11 @@\n           console.error('Google Places API key not found. Please set NEXT_PUBLIC_GOOGLE_PLACES_API_KEY in your .env.local file');\r\n           return;\r\n         }\r\n \r\n+        console.log('🔑 Using API key:', apiKey.substring(0, 20) + '...');\r\n+        console.log('📍 Loading Google Maps with Places API...');\r\n+\r\n         // Check if script is already being loaded\r\n         if (document.querySelector('script[src*=\"maps.googleapis.com\"]')) {\r\n           // Script is already loading, wait for it\r\n           const checkLoaded = () => {\r\n@@ -60,13 +63,15 @@\n         script.async = true;\r\n         script.defer = true;\r\n         \r\n         script.onload = () => {\r\n+          console.log('✅ Google Maps API loaded successfully');\r\n           initializeServices();\r\n         };\r\n         \r\n         script.onerror = () => {\r\n-          console.error('Failed to load Google Maps API. Please check your API key and ensure the Places API is enabled.');\r\n+          console.error('❌ Failed to load Google Maps API. Please check your API key and ensure the Places API (New) is enabled.');\r\n+          console.error('🔗 Enable it here: https://console.cloud.google.com/apis/library/places-backend.googleapis.com');\r\n         };\r\n         \r\n         document.head.appendChild(script);\r\n         return;\r\n@@ -86,14 +91,44 @@\n           zoom: 1\r\n         });\r\n         \r\n         placesService.current = new google.maps.places.PlacesService(map);\r\n-        console.log('Google Places services initialized successfully');\r\n+        console.log('✅ Google Places services initialized successfully');\r\n+        \r\n+        // Test the API with a simple request\r\n+        testPlacesAPI();\r\n       } catch (error) {\r\n-        console.error('Error initializing Google Places services:', error);\r\n+        console.error('❌ Error initializing Google Places services:', error);\r\n       }\r\n     };\r\n \r\n+    // Test function to verify Places API is working\r\n+    const testPlacesAPI = () => {\r\n+      if (!autocompleteService.current) return;\r\n+      \r\n+      console.log('🧪 Testing Places API with simple query...');\r\n+      \r\n+      const testRequest: google.maps.places.AutocompletionRequest = {\r\n+        input: 'restaurant',\r\n+        types: ['establishment']\r\n+      };\r\n+      \r\n+      autocompleteService.current.getPlacePredictions(testRequest, (results, status) => {\r\n+        if (status === google.maps.places.PlacesServiceStatus.OK && results) {\r\n+          console.log('✅ Places API test successful! Found', results.length, 'results');\r\n+        } else {\r\n+          console.error('❌ Places API test failed:', status);\r\n+          if (status === google.maps.places.PlacesServiceStatus.REQUEST_DENIED) {\r\n+            console.error('🔧 To fix this:');\r\n+            console.error('1. Go to https://console.cloud.google.com/apis/library');\r\n+            console.error('2. Search for \"Places API (New)\"');\r\n+            console.error('3. Enable it for your project');\r\n+            console.error('4. Restart your dev server');\r\n+          }\r\n+        }\r\n+      });\r\n+    };\r\n+\r\n     initializeServices();\r\n   }, []);\r\n \r\n   // Debounced search function\r\n"
                },
                {
                    "date": 1752473014494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,53 +150,53 @@\n       setIsLoading(false);\r\n       return;\r\n     }\r\n \r\n-    // Check if services are ready\r\n-    if (!autocompleteService.current) {\r\n-      console.warn('AutocompleteService not initialized yet');\r\n-      return;\r\n-    }\r\n-\r\n     setIsLoading(true);\r\n \r\n     // Debounce the search by 300ms\r\n     searchTimeoutRef.current = setTimeout(async () => {\r\n       try {\r\n-        const request: google.maps.places.AutocompletionRequest = {\r\n-          input: value,\r\n-          types: ['establishment', 'geocode'],\r\n-          componentRestrictions: { country: [] }, // Allow all countries\r\n-        };\r\n+        // Use the new Places API with Text Search\r\n+        const apiKey = process.env.NEXT_PUBLIC_GOOGLE_PLACES_API_KEY || process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\r\n+        if (!apiKey) {\r\n+          console.error('❌ Google Places API key not found');\r\n+          setIsLoading(false);\r\n+          return;\r\n+        }\r\n \r\n-        autocompleteService.current!.getPlacePredictions(request, (predictions, status) => {\r\n-          setIsLoading(false);\r\n-          \r\n-          if (status === google.maps.places.PlacesServiceStatus.OK && predictions) {\r\n-            setPredictions(predictions.slice(0, 5)); // Limit to 5 suggestions\r\n-            setShowSuggestions(true);\r\n-          } else {\r\n-            setPredictions([]);\r\n-            setShowSuggestions(false);\r\n-            \r\n-            // Log specific error for debugging\r\n-            console.error('Places API error:', {\r\n-              status: status,\r\n-              statusText: google.maps.places.PlacesServiceStatus[status],\r\n-              input: value\r\n-            });\r\n-            \r\n-            // Show user-friendly error message for common issues\r\n-            if (status === google.maps.places.PlacesServiceStatus.REQUEST_DENIED) {\r\n-              console.error('❌ Places API request denied. Please check:');\r\n-              console.error('1. API key is correct and has Places API enabled');\r\n-              console.error('2. Billing is enabled for your Google Cloud project');\r\n-              console.error('3. Places API is enabled in Google Cloud Console');\r\n-            }\r\n-          }\r\n+        console.log('🔍 Searching with New Places API:', value);\r\n+\r\n+        const response = await fetch('/api/places/autocomplete', {\r\n+          method: 'POST',\r\n+          headers: {\r\n+            'Content-Type': 'application/json',\r\n+          },\r\n+          body: JSON.stringify({\r\n+            input: value,\r\n+            types: ['establishment', 'geocode'],\r\n+          }),\r\n         });\r\n+\r\n+        if (!response.ok) {\r\n+          throw new Error(`HTTP error! status: ${response.status}`);\r\n+        }\r\n+\r\n+        const data = await response.json();\r\n+        \r\n+        setIsLoading(false);\r\n+        \r\n+        if (data.predictions && data.predictions.length > 0) {\r\n+          setPredictions(data.predictions.slice(0, 5));\r\n+          setShowSuggestions(true);\r\n+          console.log('✅ Found', data.predictions.length, 'predictions');\r\n+        } else {\r\n+          setPredictions([]);\r\n+          setShowSuggestions(false);\r\n+          console.log('⚠️ No predictions found');\r\n+        }\r\n       } catch (error) {\r\n-        console.error('Error fetching predictions:', error);\r\n+        console.error('❌ Error fetching predictions:', error);\r\n         setIsLoading(false);\r\n         setPredictions([]);\r\n         setShowSuggestions(false);\r\n       }\r\n"
                },
                {
                    "date": 1752473054215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,76 +204,53 @@\n   };\r\n \r\n   // Handle place selection\r\n   const handlePlaceSelect = async (placeId: string, description: string) => {\r\n-    if (!placesService.current) return;\r\n-\r\n     setIsLoading(true);\r\n     setShowSuggestions(false);\r\n     setSearchValue(description);\r\n \r\n     try {\r\n-      const request: google.maps.places.PlaceDetailsRequest = {\r\n-        placeId: placeId,\r\n-        fields: [\r\n-          'place_id',\r\n-          'name',\r\n-          'formatted_address',\r\n-          'geometry',\r\n-          'types',\r\n-          'rating',\r\n-          'price_level',\r\n-          'photos'\r\n-        ]\r\n-      };\r\n-\r\n-      placesService.current.getDetails(request, (place, status) => {\r\n-        setIsLoading(false);\r\n+      // Find the selected place from predictions\r\n+      const selectedPlace = predictions.find(p => p.place_id === placeId);\r\n+      \r\n+      if (selectedPlace) {\r\n+        // Create destination object using the data we already have\r\n+        const newDestination: Destination = {\r\n+          id: crypto.randomUUID(),\r\n+          tripId: tripId,\r\n+          locationName: selectedPlace.structured_formatting?.main_text || description,\r\n+          address: selectedPlace.structured_formatting?.secondary_text || selectedPlace.description || '',\r\n+          lat: typeof selectedPlace.geometry?.location?.lat === 'function' ? selectedPlace.geometry.location.lat() : selectedPlace.geometry?.location?.lat || 0,\r\n+          lng: typeof selectedPlace.geometry?.location?.lng === 'function' ? selectedPlace.geometry.location.lng() : selectedPlace.geometry?.location?.lng || 0,\r\n+          day: selectedDay,\r\n+          notes: '',\r\n+          orderIndex: 1, // Will be adjusted by parent component\r\n+          placeId: selectedPlace.place_id,\r\n+          category: selectedPlace.types?.[0] || 'place',\r\n+          rating: selectedPlace.rating,\r\n+          priceLevel: selectedPlace.price_level,\r\n+          photos: selectedPlace.photos?.slice(0, 3).map(photo => \r\n+            photo.getUrl({ maxWidth: 400, maxHeight: 300 })\r\n+          ) || [],\r\n+          createdAt: new Date(),\r\n+          updatedAt: new Date(),\r\n+        };\r\n         \r\n-        if (status === google.maps.places.PlacesServiceStatus.OK && place) {\r\n-          // Create destination object\r\n-          const newDestination: Destination = {\r\n-            id: crypto.randomUUID(),\r\n-            tripId: tripId,\r\n-            locationName: place.name || description,\r\n-            address: place.formatted_address || '',\r\n-            lat: place.geometry?.location?.lat() || 0,\r\n-            lng: place.geometry?.location?.lng() || 0,\r\n-            day: selectedDay,\r\n-            notes: '',\r\n-            orderIndex: 1, // Will be adjusted by parent component\r\n-            placeId: place.place_id,\r\n-            category: place.types?.[0] || 'place',\r\n-            rating: place.rating,\r\n-            priceLevel: place.price_level,\r\n-            photos: place.photos?.slice(0, 3).map(photo => \r\n-              photo.getUrl({ maxWidth: 400, maxHeight: 300 })\r\n-            ) || [],\r\n-            createdAt: new Date(),\r\n-            updatedAt: new Date(),\r\n-          };\r\n-          \r\n-          onLocationSelect(newDestination);\r\n-          setSearchValue('');\r\n-          setShowSuggestions(false);\r\n-        } else {\r\n-          console.error('Place details API error:', {\r\n-            status: status,\r\n-            statusText: google.maps.places.PlacesServiceStatus[status],\r\n-            placeId: placeId\r\n-          });\r\n-          \r\n-          if (status === google.maps.places.PlacesServiceStatus.REQUEST_DENIED) {\r\n-            console.error('❌ Place Details API request denied. Please check your API configuration.');\r\n-          }\r\n-          \r\n-          // Reset search\r\n-          setSearchValue('');\r\n-          setShowSuggestions(false);\r\n-        }\r\n-      });\r\n+        console.log('✅ Selected place:', newDestination);\r\n+        onLocationSelect(newDestination);\r\n+        setSearchValue('');\r\n+        setShowSuggestions(false);\r\n+      } else {\r\n+        console.error('❌ Selected place not found in predictions');\r\n+        setSearchValue('');\r\n+        setShowSuggestions(false);\r\n+      }\r\n     } catch (error) {\r\n-      console.error('Error fetching place details:', error);\r\n+      console.error('❌ Error selecting place:', error);\r\n+      setSearchValue('');\r\n+      setShowSuggestions(false);\r\n+    } finally {\r\n       setIsLoading(false);\r\n     }\r\n   };\r\n \r\n"
                },
                {
                    "date": 1752473068007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,17 +10,32 @@\n   placeholder?: string;\r\n   className?: string;\r\n }\r\n \r\n+// Enhanced prediction type that includes additional data from the new Places API\r\n+interface EnhancedPrediction extends google.maps.places.AutocompletePrediction {\r\n+  geometry?: {\r\n+    location?: {\r\n+      lat: () => number | number;\r\n+      lng: () => number | number;\r\n+    };\r\n+  };\r\n+  rating?: number;\r\n+  price_level?: number;\r\n+  photos?: {\r\n+    getUrl: (opts: { maxWidth: number; maxHeight: number }) => string;\r\n+  }[];\r\n+}\r\n+\r\n export default function LocationSearch({\r\n   onLocationSelect,\r\n   selectedDay,\r\n   tripId,\r\n   placeholder = \"Search for places...\",\r\n   className = \"\"\r\n }: LocationSearchProps) {\r\n   const [searchValue, setSearchValue] = useState('');\r\n-  const [predictions, setPredictions] = useState<google.maps.places.AutocompletePrediction[]>([]);\r\n+  const [predictions, setPredictions] = useState<EnhancedPrediction[]>([]);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n   const [showSuggestions, setShowSuggestions] = useState(false);\r\n   const [selectedIndex, setSelectedIndex] = useState(-1);\r\n   \r\n"
                },
                {
                    "date": 1752473077372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,9 +200,9 @@\n         \r\n         setIsLoading(false);\r\n         \r\n         if (data.predictions && data.predictions.length > 0) {\r\n-          setPredictions(data.predictions.slice(0, 5));\r\n+          setPredictions(data.predictions.slice(0, 5) as EnhancedPrediction[]);\r\n           setShowSuggestions(true);\r\n           console.log('✅ Found', data.predictions.length, 'predictions');\r\n         } else {\r\n           setPredictions([]);\r\n"
                },
                {
                    "date": 1752473087854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,115 +38,11 @@\n   const [isLoading, setIsLoading] = useState(false);\r\n   const [showSuggestions, setShowSuggestions] = useState(false);\r\n   const [selectedIndex, setSelectedIndex] = useState(-1);\r\n   \r\n-  const autocompleteService = useRef<google.maps.places.AutocompleteService | null>(null);\r\n-  const placesService = useRef<google.maps.places.PlacesService | null>(null);\r\n   const inputRef = useRef<HTMLInputElement>(null);\r\n   const suggestionsRef = useRef<HTMLDivElement>(null);\r\n \r\n-  // Initialize Google Places services\r\n-  useEffect(() => {\r\n-    const initializeServices = async () => {\r\n-      // Check if Google Maps is already loaded\r\n-      if (!window.google?.maps?.places) {\r\n-        // Load Google Maps if not already loaded\r\n-        const apiKey = process.env.NEXT_PUBLIC_GOOGLE_PLACES_API_KEY || process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\r\n-        if (!apiKey) {\r\n-          console.error('Google Places API key not found. Please set NEXT_PUBLIC_GOOGLE_PLACES_API_KEY in your .env.local file');\r\n-          return;\r\n-        }\r\n-\r\n-        console.log('🔑 Using API key:', apiKey.substring(0, 20) + '...');\r\n-        console.log('📍 Loading Google Maps with Places API...');\r\n-\r\n-        // Check if script is already being loaded\r\n-        if (document.querySelector('script[src*=\"maps.googleapis.com\"]')) {\r\n-          // Script is already loading, wait for it\r\n-          const checkLoaded = () => {\r\n-            if (window.google?.maps?.places) {\r\n-              initializeServices();\r\n-            } else {\r\n-              setTimeout(checkLoaded, 100);\r\n-            }\r\n-          };\r\n-          checkLoaded();\r\n-          return;\r\n-        }\r\n-\r\n-        const script = document.createElement('script');\r\n-        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;\r\n-        script.async = true;\r\n-        script.defer = true;\r\n-        \r\n-        script.onload = () => {\r\n-          console.log('✅ Google Maps API loaded successfully');\r\n-          initializeServices();\r\n-        };\r\n-        \r\n-        script.onerror = () => {\r\n-          console.error('❌ Failed to load Google Maps API. Please check your API key and ensure the Places API (New) is enabled.');\r\n-          console.error('🔗 Enable it here: https://console.cloud.google.com/apis/library/places-backend.googleapis.com');\r\n-        };\r\n-        \r\n-        document.head.appendChild(script);\r\n-        return;\r\n-      }\r\n-\r\n-      // Initialize services\r\n-      try {\r\n-        autocompleteService.current = new google.maps.places.AutocompleteService();\r\n-        \r\n-        // Create a hidden div for PlacesService\r\n-        const mapDiv = document.createElement('div');\r\n-        mapDiv.style.display = 'none';\r\n-        document.body.appendChild(mapDiv);\r\n-        \r\n-        const map = new google.maps.Map(mapDiv, {\r\n-          center: { lat: 0, lng: 0 },\r\n-          zoom: 1\r\n-        });\r\n-        \r\n-        placesService.current = new google.maps.places.PlacesService(map);\r\n-        console.log('✅ Google Places services initialized successfully');\r\n-        \r\n-        // Test the API with a simple request\r\n-        testPlacesAPI();\r\n-      } catch (error) {\r\n-        console.error('❌ Error initializing Google Places services:', error);\r\n-      }\r\n-    };\r\n-\r\n-    // Test function to verify Places API is working\r\n-    const testPlacesAPI = () => {\r\n-      if (!autocompleteService.current) return;\r\n-      \r\n-      console.log('🧪 Testing Places API with simple query...');\r\n-      \r\n-      const testRequest: google.maps.places.AutocompletionRequest = {\r\n-        input: 'restaurant',\r\n-        types: ['establishment']\r\n-      };\r\n-      \r\n-      autocompleteService.current.getPlacePredictions(testRequest, (results, status) => {\r\n-        if (status === google.maps.places.PlacesServiceStatus.OK && results) {\r\n-          console.log('✅ Places API test successful! Found', results.length, 'results');\r\n-        } else {\r\n-          console.error('❌ Places API test failed:', status);\r\n-          if (status === google.maps.places.PlacesServiceStatus.REQUEST_DENIED) {\r\n-            console.error('🔧 To fix this:');\r\n-            console.error('1. Go to https://console.cloud.google.com/apis/library');\r\n-            console.error('2. Search for \"Places API (New)\"');\r\n-            console.error('3. Enable it for your project');\r\n-            console.error('4. Restart your dev server');\r\n-          }\r\n-        }\r\n-      });\r\n-    };\r\n-\r\n-    initializeServices();\r\n-  }, []);\r\n-\r\n   // Debounced search function\r\n   const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n \r\n   // Handle search input with debouncing\r\n"
                },
                {
                    "date": 1752473142462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,39 +10,87 @@\n   placeholder?: string;\r\n   className?: string;\r\n }\r\n \r\n-// Enhanced prediction type that includes additional data from the new Places API\r\n-interface EnhancedPrediction extends google.maps.places.AutocompletePrediction {\r\n-  geometry?: {\r\n-    location?: {\r\n-      lat: () => number | number;\r\n-      lng: () => number | number;\r\n-    };\r\n-  };\r\n-  rating?: number;\r\n-  price_level?: number;\r\n-  photos?: {\r\n-    getUrl: (opts: { maxWidth: number; maxHeight: number }) => string;\r\n-  }[];\r\n-}\r\n-\r\n export default function LocationSearch({\r\n   onLocationSelect,\r\n   selectedDay,\r\n   tripId,\r\n   placeholder = \"Search for places...\",\r\n   className = \"\"\r\n }: LocationSearchProps) {\r\n   const [searchValue, setSearchValue] = useState('');\r\n-  const [predictions, setPredictions] = useState<EnhancedPrediction[]>([]);\r\n+  const [predictions, setPredictions] = useState<google.maps.places.AutocompletePrediction[]>([]);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n   const [showSuggestions, setShowSuggestions] = useState(false);\r\n   const [selectedIndex, setSelectedIndex] = useState(-1);\r\n   \r\n+  const autocompleteService = useRef<google.maps.places.AutocompleteService | null>(null);\r\n+  const placesService = useRef<google.maps.places.PlacesService | null>(null);\r\n   const inputRef = useRef<HTMLInputElement>(null);\r\n   const suggestionsRef = useRef<HTMLDivElement>(null);\r\n \r\n+  // Initialize Google Places services\r\n+  useEffect(() => {\r\n+    const initializeServices = async () => {\r\n+      // Check if Google Maps is already loaded\r\n+      if (!window.google?.maps?.places) {\r\n+        // Load Google Maps if not already loaded\r\n+        const apiKey = process.env.NEXT_PUBLIC_GOOGLE_PLACES_API_KEY || process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\r\n+        if (!apiKey) {\r\n+          console.error('❌ Google Places API key not found. Please set NEXT_PUBLIC_GOOGLE_PLACES_API_KEY in your .env.local file');\r\n+          return;\r\n+        }\r\n+\r\n+        console.log('🔑 Using API key:', apiKey.substring(0, 20) + '...');\r\n+        console.log('📍 Loading Google Maps with Places API...');\r\n+\r\n+        const script = document.createElement('script');\r\n+        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;\r\n+        script.async = true;\r\n+        script.defer = true;\r\n+        \r\n+        script.onload = () => {\r\n+          console.log('✅ Google Maps API loaded successfully');\r\n+          initializeServices();\r\n+        };\r\n+        \r\n+        script.onerror = () => {\r\n+          console.error('❌ Failed to load Google Maps API.');\r\n+          console.error('🔧 Make sure you have enabled both:');\r\n+          console.error('1. Places API (legacy) - for JavaScript library');\r\n+          console.error('2. Places API (New) - for new features');\r\n+          console.error('3. Maps JavaScript API - for maps');\r\n+        };\r\n+        \r\n+        document.head.appendChild(script);\r\n+        return;\r\n+      }\r\n+\r\n+      // Initialize services\r\n+      try {\r\n+        autocompleteService.current = new google.maps.places.AutocompleteService();\r\n+        \r\n+        // Create a hidden div for PlacesService\r\n+        const mapDiv = document.createElement('div');\r\n+        mapDiv.style.display = 'none';\r\n+        document.body.appendChild(mapDiv);\r\n+        \r\n+        const map = new google.maps.Map(mapDiv, {\r\n+          center: { lat: 0, lng: 0 },\r\n+          zoom: 1\r\n+        });\r\n+        \r\n+        placesService.current = new google.maps.places.PlacesService(map);\r\n+        console.log('✅ Google Places services initialized successfully');\r\n+      } catch (error) {\r\n+        console.error('❌ Error initializing Google Places services:', error);\r\n+      }\r\n+    };\r\n+\r\n+    initializeServices();\r\n+  }, []);\r\n+\r\n   // Debounced search function\r\n   const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n \r\n   // Handle search input with debouncing\r\n@@ -61,51 +109,52 @@\n       setIsLoading(false);\r\n       return;\r\n     }\r\n \r\n+    // Check if services are ready\r\n+    if (!autocompleteService.current) {\r\n+      console.warn('AutocompleteService not initialized yet');\r\n+      return;\r\n+    }\r\n+\r\n     setIsLoading(true);\r\n \r\n     // Debounce the search by 300ms\r\n     searchTimeoutRef.current = setTimeout(async () => {\r\n       try {\r\n-        // Use the new Places API with Text Search\r\n-        const apiKey = process.env.NEXT_PUBLIC_GOOGLE_PLACES_API_KEY || process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\r\n-        if (!apiKey) {\r\n-          console.error('❌ Google Places API key not found');\r\n+        const request: google.maps.places.AutocompletionRequest = {\r\n+          input: value,\r\n+          types: ['establishment', 'geocode'],\r\n+          componentRestrictions: { country: [] }, // Allow all countries\r\n+        };\r\n+\r\n+        autocompleteService.current!.getPlacePredictions(request, (predictions, status) => {\r\n           setIsLoading(false);\r\n-          return;\r\n-        }\r\n-\r\n-        console.log('🔍 Searching with New Places API:', value);\r\n-\r\n-        const response = await fetch('/api/places/autocomplete', {\r\n-          method: 'POST',\r\n-          headers: {\r\n-            'Content-Type': 'application/json',\r\n-          },\r\n-          body: JSON.stringify({\r\n-            input: value,\r\n-            types: ['establishment', 'geocode'],\r\n-          }),\r\n+          \r\n+          if (status === google.maps.places.PlacesServiceStatus.OK && predictions) {\r\n+            setPredictions(predictions.slice(0, 5)); // Limit to 5 suggestions\r\n+            setShowSuggestions(true);\r\n+            console.log('✅ Found', predictions.length, 'predictions');\r\n+          } else {\r\n+            setPredictions([]);\r\n+            setShowSuggestions(false);\r\n+            \r\n+            // Enhanced error logging\r\n+            console.error('❌ Places API error:', {\r\n+              status: status,\r\n+              statusText: google.maps.places.PlacesServiceStatus[status],\r\n+              input: value\r\n+            });\r\n+            \r\n+            if (status === google.maps.places.PlacesServiceStatus.REQUEST_DENIED) {\r\n+              console.error('🔧 To fix REQUEST_DENIED:');\r\n+              console.error('1. Enable \"Places API\" (legacy) in Google Cloud Console');\r\n+              console.error('2. Enable billing for your project');\r\n+              console.error('3. Check API key restrictions');\r\n+              console.error('4. Restart your dev server');\r\n+            }\r\n+          }\r\n         });\r\n-\r\n-        if (!response.ok) {\r\n-          throw new Error(`HTTP error! status: ${response.status}`);\r\n-        }\r\n-\r\n-        const data = await response.json();\r\n-        \r\n-        setIsLoading(false);\r\n-        \r\n-        if (data.predictions && data.predictions.length > 0) {\r\n-          setPredictions(data.predictions.slice(0, 5) as EnhancedPrediction[]);\r\n-          setShowSuggestions(true);\r\n-          console.log('✅ Found', data.predictions.length, 'predictions');\r\n-        } else {\r\n-          setPredictions([]);\r\n-          setShowSuggestions(false);\r\n-          console.log('⚠️ No predictions found');\r\n-        }\r\n       } catch (error) {\r\n         console.error('❌ Error fetching predictions:', error);\r\n         setIsLoading(false);\r\n         setPredictions([]);\r\n@@ -115,53 +164,69 @@\n   };\r\n \r\n   // Handle place selection\r\n   const handlePlaceSelect = async (placeId: string, description: string) => {\r\n+    if (!placesService.current) return;\r\n+\r\n     setIsLoading(true);\r\n     setShowSuggestions(false);\r\n     setSearchValue(description);\r\n \r\n     try {\r\n-      // Find the selected place from predictions\r\n-      const selectedPlace = predictions.find(p => p.place_id === placeId);\r\n-      \r\n-      if (selectedPlace) {\r\n-        // Create destination object using the data we already have\r\n-        const newDestination: Destination = {\r\n-          id: crypto.randomUUID(),\r\n-          tripId: tripId,\r\n-          locationName: selectedPlace.structured_formatting?.main_text || description,\r\n-          address: selectedPlace.structured_formatting?.secondary_text || selectedPlace.description || '',\r\n-          lat: typeof selectedPlace.geometry?.location?.lat === 'function' ? selectedPlace.geometry.location.lat() : selectedPlace.geometry?.location?.lat || 0,\r\n-          lng: typeof selectedPlace.geometry?.location?.lng === 'function' ? selectedPlace.geometry.location.lng() : selectedPlace.geometry?.location?.lng || 0,\r\n-          day: selectedDay,\r\n-          notes: '',\r\n-          orderIndex: 1, // Will be adjusted by parent component\r\n-          placeId: selectedPlace.place_id,\r\n-          category: selectedPlace.types?.[0] || 'place',\r\n-          rating: selectedPlace.rating,\r\n-          priceLevel: selectedPlace.price_level,\r\n-          photos: selectedPlace.photos?.slice(0, 3).map(photo => \r\n-            photo.getUrl({ maxWidth: 400, maxHeight: 300 })\r\n-          ) || [],\r\n-          createdAt: new Date(),\r\n-          updatedAt: new Date(),\r\n-        };\r\n+      const request: google.maps.places.PlaceDetailsRequest = {\r\n+        placeId: placeId,\r\n+        fields: [\r\n+          'place_id',\r\n+          'name',\r\n+          'formatted_address',\r\n+          'geometry',\r\n+          'types',\r\n+          'rating',\r\n+          'price_level',\r\n+          'photos'\r\n+        ]\r\n+      };\r\n+\r\n+      placesService.current.getDetails(request, (place, status) => {\r\n+        setIsLoading(false);\r\n         \r\n-        console.log('✅ Selected place:', newDestination);\r\n-        onLocationSelect(newDestination);\r\n-        setSearchValue('');\r\n-        setShowSuggestions(false);\r\n-      } else {\r\n-        console.error('❌ Selected place not found in predictions');\r\n-        setSearchValue('');\r\n-        setShowSuggestions(false);\r\n-      }\r\n+        if (status === google.maps.places.PlacesServiceStatus.OK && place) {\r\n+          // Create destination object\r\n+          const newDestination: Destination = {\r\n+            id: crypto.randomUUID(),\r\n+            tripId: tripId,\r\n+            locationName: place.name || description,\r\n+            address: place.formatted_address || '',\r\n+            lat: place.geometry?.location?.lat() || 0,\r\n+            lng: place.geometry?.location?.lng() || 0,\r\n+            day: selectedDay,\r\n+            notes: '',\r\n+            orderIndex: 1, // Will be adjusted by parent component\r\n+            placeId: place.place_id,\r\n+            category: place.types?.[0] || 'place',\r\n+            rating: place.rating,\r\n+            priceLevel: place.price_level,\r\n+            photos: place.photos?.slice(0, 3).map(photo => \r\n+              photo.getUrl({ maxWidth: 400, maxHeight: 300 })\r\n+            ) || [],\r\n+            createdAt: new Date(),\r\n+            updatedAt: new Date(),\r\n+          };\r\n+          \r\n+          console.log('✅ Selected place:', newDestination);\r\n+          onLocationSelect(newDestination);\r\n+          setSearchValue('');\r\n+          setShowSuggestions(false);\r\n+        } else {\r\n+          console.error('❌ Place details error:', status);\r\n+          setSearchValue('');\r\n+          setShowSuggestions(false);\r\n+        }\r\n+      });\r\n     } catch (error) {\r\n       console.error('❌ Error selecting place:', error);\r\n       setSearchValue('');\r\n       setShowSuggestions(false);\r\n-    } finally {\r\n       setIsLoading(false);\r\n     }\r\n   };\r\n \r\n"
                }
            ],
            "date": 1752443242997,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { Destination } from '@/types';\r\n\r\ninterface LocationSearchProps {\r\n  onLocationSelect: (destination: Destination) => void;\r\n  selectedDay: number;\r\n  tripId: string;\r\n  placeholder?: string;\r\n  className?: string;\r\n}\r\n\r\nexport default function LocationSearch({\r\n  onLocationSelect,\r\n  selectedDay,\r\n  tripId,\r\n  placeholder = \"Search for places...\",\r\n  className = \"\"\r\n}: LocationSearchProps) {\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const [predictions, setPredictions] = useState<google.maps.places.AutocompletePrediction[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showSuggestions, setShowSuggestions] = useState(false);\r\n  const [selectedIndex, setSelectedIndex] = useState(-1);\r\n  \r\n  const autocompleteService = useRef<google.maps.places.AutocompleteService | null>(null);\r\n  const placesService = useRef<google.maps.places.PlacesService | null>(null);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const suggestionsRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Initialize Google Places services\r\n  useEffect(() => {\r\n    const initializeServices = async () => {\r\n      if (!window.google?.maps?.places) {\r\n        // Load Google Maps if not already loaded\r\n        const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\r\n        if (!apiKey) return;\r\n\r\n        const script = document.createElement('script');\r\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;\r\n        script.async = true;\r\n        script.defer = true;\r\n        \r\n        script.onload = () => {\r\n          initializeServices();\r\n        };\r\n        \r\n        document.head.appendChild(script);\r\n        return;\r\n      }\r\n\r\n      autocompleteService.current = new google.maps.places.AutocompleteService();\r\n      \r\n      // Create a hidden div for PlacesService\r\n      const mapDiv = document.createElement('div');\r\n      mapDiv.style.display = 'none';\r\n      document.body.appendChild(mapDiv);\r\n      \r\n      const map = new google.maps.Map(mapDiv, {\r\n        center: { lat: 0, lng: 0 },\r\n        zoom: 1\r\n      });\r\n      \r\n      placesService.current = new google.maps.places.PlacesService(map);\r\n    };\r\n\r\n    initializeServices();\r\n  }, []);\r\n\r\n  // Handle search input\r\n  const handleSearch = async (value: string) => {\r\n    setSearchValue(value);\r\n    setSelectedIndex(-1);\r\n    \r\n    if (!value.trim() || !autocompleteService.current) {\r\n      setPredictions([]);\r\n      setShowSuggestions(false);\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const request: google.maps.places.AutocompletionRequest = {\r\n        input: value,\r\n        types: ['establishment', 'geocode'],\r\n        componentRestrictions: { country: [] }, // Allow all countries\r\n      };\r\n\r\n      autocompleteService.current.getPlacePredictions(request, (predictions, status) => {\r\n        setIsLoading(false);\r\n        \r\n        if (status === google.maps.places.PlacesServiceStatus.OK && predictions) {\r\n          setPredictions(predictions.slice(0, 5)); // Limit to 5 suggestions\r\n          setShowSuggestions(true);\r\n        } else {\r\n          setPredictions([]);\r\n          setShowSuggestions(false);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching predictions:', error);\r\n      setIsLoading(false);\r\n      setPredictions([]);\r\n      setShowSuggestions(false);\r\n    }\r\n  };\r\n\r\n  // Handle place selection\r\n  const handlePlaceSelect = async (placeId: string, description: string) => {\r\n    if (!placesService.current) return;\r\n\r\n    setIsLoading(true);\r\n    setShowSuggestions(false);\r\n    setSearchValue(description);\r\n\r\n    try {\r\n      const request: google.maps.places.PlaceDetailsRequest = {\r\n        placeId: placeId,\r\n        fields: [\r\n          'place_id',\r\n          'name',\r\n          'formatted_address',\r\n          'geometry',\r\n          'types',\r\n          'rating',\r\n          'price_level',\r\n          'photos'\r\n        ]\r\n      };\r\n\r\n      placesService.current.getDetails(request, (place, status) => {\r\n        setIsLoading(false);\r\n        \r\n        if (status === google.maps.places.PlacesServiceStatus.OK && place) {\r\n          const destination: Destination = {\r\n            id: '', // Will be set by server\r\n            tripId,\r\n            locationName: place.name || description,\r\n            address: place.formatted_address || description,\r\n            lat: place.geometry?.location?.lat() || 0,\r\n            lng: place.geometry?.location?.lng() || 0,\r\n            day: selectedDay,\r\n            orderIndex: 1, // Will be adjusted by parent component\r\n            placeId: place.place_id,\r\n            rating: place.rating,\r\n            priceLevel: place.price_level,\r\n            category: place.types?.[0] || 'place',\r\n            photos: place.photos?.slice(0, 3).map(photo => \r\n              photo.getUrl({ maxWidth: 400, maxHeight: 300 })\r\n            ) || [],\r\n            createdAt: new Date(),\r\n            updatedAt: new Date(),\r\n          };\r\n\r\n          onLocationSelect(destination);\r\n          setSearchValue(''); // Clear search after selection\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching place details:', error);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle keyboard navigation\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (!showSuggestions || predictions.length === 0) return;\r\n\r\n    switch (e.key) {\r\n      case 'ArrowDown':\r\n        e.preventDefault();\r\n        setSelectedIndex(prev => \r\n          prev < predictions.length - 1 ? prev + 1 : prev\r\n        );\r\n        break;\r\n      case 'ArrowUp':\r\n        e.preventDefault();\r\n        setSelectedIndex(prev => prev > 0 ? prev - 1 : prev);\r\n        break;\r\n      case 'Enter':\r\n        e.preventDefault();\r\n        if (selectedIndex >= 0 && selectedIndex < predictions.length) {\r\n          const prediction = predictions[selectedIndex];\r\n          handlePlaceSelect(prediction.place_id, prediction.description);\r\n        }\r\n        break;\r\n      case 'Escape':\r\n        setShowSuggestions(false);\r\n        setSelectedIndex(-1);\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Close suggestions when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        suggestionsRef.current &&\r\n        !suggestionsRef.current.contains(event.target as Node) &&\r\n        !inputRef.current?.contains(event.target as Node)\r\n      ) {\r\n        setShowSuggestions(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`relative ${className}`}>\r\n      <div className=\"relative\">\r\n        <input\r\n          ref={inputRef}\r\n          type=\"text\"\r\n          value={searchValue}\r\n          onChange={(e) => handleSearch(e.target.value)}\r\n          onKeyDown={handleKeyDown}\r\n          onFocus={() => {\r\n            if (predictions.length > 0) {\r\n              setShowSuggestions(true);\r\n            }\r\n          }}\r\n          placeholder={placeholder}\r\n          className=\"input-field pr-10\"\r\n          disabled={isLoading}\r\n        />\r\n        \r\n        {/* Search Icon */}\r\n        <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\r\n          {isLoading ? (\r\n            <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-primary-600 border-t-transparent\"></div>\r\n          ) : (\r\n            <svg className=\"h-4 w-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\r\n            </svg>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Suggestions Dropdown */}\r\n      {showSuggestions && predictions.length > 0 && (\r\n        <div\r\n          ref={suggestionsRef}\r\n          className=\"absolute top-full left-0 right-0 bg-white rounded-lg shadow-lg border border-gray-200 mt-1 max-h-64 overflow-y-auto z-50\"\r\n        >\r\n          {predictions.map((prediction, index) => (\r\n            <button\r\n              key={prediction.place_id}\r\n              onClick={() => handlePlaceSelect(prediction.place_id, prediction.description)}\r\n              className={`w-full px-4 py-3 text-left hover:bg-gray-50 border-b border-gray-100 last:border-b-0 transition-colors ${\r\n                index === selectedIndex ? 'bg-primary-50' : ''\r\n              }`}\r\n            >\r\n              <div className=\"flex items-start space-x-3\">\r\n                <div className=\"flex-shrink-0 mt-1\">\r\n                  <svg className=\"h-4 w-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n                  </svg>\r\n                </div>\r\n                <div className=\"flex-1 min-w-0\">\r\n                  <div className=\"font-medium text-gray-900 truncate\">\r\n                    {prediction.structured_formatting.main_text}\r\n                  </div>\r\n                  <div className=\"text-sm text-gray-500 truncate\">\r\n                    {prediction.structured_formatting.secondary_text}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} "
        }
    ]
}