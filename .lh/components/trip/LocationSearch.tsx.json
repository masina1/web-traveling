{
    "sourceFile": "components/trip/LocationSearch.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752443242997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752443242997,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { Destination } from '@/types';\r\n\r\ninterface LocationSearchProps {\r\n  onLocationSelect: (destination: Destination) => void;\r\n  selectedDay: number;\r\n  tripId: string;\r\n  placeholder?: string;\r\n  className?: string;\r\n}\r\n\r\nexport default function LocationSearch({\r\n  onLocationSelect,\r\n  selectedDay,\r\n  tripId,\r\n  placeholder = \"Search for places...\",\r\n  className = \"\"\r\n}: LocationSearchProps) {\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const [predictions, setPredictions] = useState<google.maps.places.AutocompletePrediction[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showSuggestions, setShowSuggestions] = useState(false);\r\n  const [selectedIndex, setSelectedIndex] = useState(-1);\r\n  \r\n  const autocompleteService = useRef<google.maps.places.AutocompleteService | null>(null);\r\n  const placesService = useRef<google.maps.places.PlacesService | null>(null);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const suggestionsRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Initialize Google Places services\r\n  useEffect(() => {\r\n    const initializeServices = async () => {\r\n      if (!window.google?.maps?.places) {\r\n        // Load Google Maps if not already loaded\r\n        const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\r\n        if (!apiKey) return;\r\n\r\n        const script = document.createElement('script');\r\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;\r\n        script.async = true;\r\n        script.defer = true;\r\n        \r\n        script.onload = () => {\r\n          initializeServices();\r\n        };\r\n        \r\n        document.head.appendChild(script);\r\n        return;\r\n      }\r\n\r\n      autocompleteService.current = new google.maps.places.AutocompleteService();\r\n      \r\n      // Create a hidden div for PlacesService\r\n      const mapDiv = document.createElement('div');\r\n      mapDiv.style.display = 'none';\r\n      document.body.appendChild(mapDiv);\r\n      \r\n      const map = new google.maps.Map(mapDiv, {\r\n        center: { lat: 0, lng: 0 },\r\n        zoom: 1\r\n      });\r\n      \r\n      placesService.current = new google.maps.places.PlacesService(map);\r\n    };\r\n\r\n    initializeServices();\r\n  }, []);\r\n\r\n  // Handle search input\r\n  const handleSearch = async (value: string) => {\r\n    setSearchValue(value);\r\n    setSelectedIndex(-1);\r\n    \r\n    if (!value.trim() || !autocompleteService.current) {\r\n      setPredictions([]);\r\n      setShowSuggestions(false);\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const request: google.maps.places.AutocompletionRequest = {\r\n        input: value,\r\n        types: ['establishment', 'geocode'],\r\n        componentRestrictions: { country: [] }, // Allow all countries\r\n      };\r\n\r\n      autocompleteService.current.getPlacePredictions(request, (predictions, status) => {\r\n        setIsLoading(false);\r\n        \r\n        if (status === google.maps.places.PlacesServiceStatus.OK && predictions) {\r\n          setPredictions(predictions.slice(0, 5)); // Limit to 5 suggestions\r\n          setShowSuggestions(true);\r\n        } else {\r\n          setPredictions([]);\r\n          setShowSuggestions(false);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching predictions:', error);\r\n      setIsLoading(false);\r\n      setPredictions([]);\r\n      setShowSuggestions(false);\r\n    }\r\n  };\r\n\r\n  // Handle place selection\r\n  const handlePlaceSelect = async (placeId: string, description: string) => {\r\n    if (!placesService.current) return;\r\n\r\n    setIsLoading(true);\r\n    setShowSuggestions(false);\r\n    setSearchValue(description);\r\n\r\n    try {\r\n      const request: google.maps.places.PlaceDetailsRequest = {\r\n        placeId: placeId,\r\n        fields: [\r\n          'place_id',\r\n          'name',\r\n          'formatted_address',\r\n          'geometry',\r\n          'types',\r\n          'rating',\r\n          'price_level',\r\n          'photos'\r\n        ]\r\n      };\r\n\r\n      placesService.current.getDetails(request, (place, status) => {\r\n        setIsLoading(false);\r\n        \r\n        if (status === google.maps.places.PlacesServiceStatus.OK && place) {\r\n          const destination: Destination = {\r\n            id: '', // Will be set by server\r\n            tripId,\r\n            locationName: place.name || description,\r\n            address: place.formatted_address || description,\r\n            lat: place.geometry?.location?.lat() || 0,\r\n            lng: place.geometry?.location?.lng() || 0,\r\n            day: selectedDay,\r\n            orderIndex: 1, // Will be adjusted by parent component\r\n            placeId: place.place_id,\r\n            rating: place.rating,\r\n            priceLevel: place.price_level,\r\n            category: place.types?.[0] || 'place',\r\n            photos: place.photos?.slice(0, 3).map(photo => \r\n              photo.getUrl({ maxWidth: 400, maxHeight: 300 })\r\n            ) || [],\r\n            createdAt: new Date(),\r\n            updatedAt: new Date(),\r\n          };\r\n\r\n          onLocationSelect(destination);\r\n          setSearchValue(''); // Clear search after selection\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching place details:', error);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle keyboard navigation\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (!showSuggestions || predictions.length === 0) return;\r\n\r\n    switch (e.key) {\r\n      case 'ArrowDown':\r\n        e.preventDefault();\r\n        setSelectedIndex(prev => \r\n          prev < predictions.length - 1 ? prev + 1 : prev\r\n        );\r\n        break;\r\n      case 'ArrowUp':\r\n        e.preventDefault();\r\n        setSelectedIndex(prev => prev > 0 ? prev - 1 : prev);\r\n        break;\r\n      case 'Enter':\r\n        e.preventDefault();\r\n        if (selectedIndex >= 0 && selectedIndex < predictions.length) {\r\n          const prediction = predictions[selectedIndex];\r\n          handlePlaceSelect(prediction.place_id, prediction.description);\r\n        }\r\n        break;\r\n      case 'Escape':\r\n        setShowSuggestions(false);\r\n        setSelectedIndex(-1);\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Close suggestions when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        suggestionsRef.current &&\r\n        !suggestionsRef.current.contains(event.target as Node) &&\r\n        !inputRef.current?.contains(event.target as Node)\r\n      ) {\r\n        setShowSuggestions(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`relative ${className}`}>\r\n      <div className=\"relative\">\r\n        <input\r\n          ref={inputRef}\r\n          type=\"text\"\r\n          value={searchValue}\r\n          onChange={(e) => handleSearch(e.target.value)}\r\n          onKeyDown={handleKeyDown}\r\n          onFocus={() => {\r\n            if (predictions.length > 0) {\r\n              setShowSuggestions(true);\r\n            }\r\n          }}\r\n          placeholder={placeholder}\r\n          className=\"input-field pr-10\"\r\n          disabled={isLoading}\r\n        />\r\n        \r\n        {/* Search Icon */}\r\n        <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\r\n          {isLoading ? (\r\n            <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-primary-600 border-t-transparent\"></div>\r\n          ) : (\r\n            <svg className=\"h-4 w-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\r\n            </svg>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Suggestions Dropdown */}\r\n      {showSuggestions && predictions.length > 0 && (\r\n        <div\r\n          ref={suggestionsRef}\r\n          className=\"absolute top-full left-0 right-0 bg-white rounded-lg shadow-lg border border-gray-200 mt-1 max-h-64 overflow-y-auto z-50\"\r\n        >\r\n          {predictions.map((prediction, index) => (\r\n            <button\r\n              key={prediction.place_id}\r\n              onClick={() => handlePlaceSelect(prediction.place_id, prediction.description)}\r\n              className={`w-full px-4 py-3 text-left hover:bg-gray-50 border-b border-gray-100 last:border-b-0 transition-colors ${\r\n                index === selectedIndex ? 'bg-primary-50' : ''\r\n              }`}\r\n            >\r\n              <div className=\"flex items-start space-x-3\">\r\n                <div className=\"flex-shrink-0 mt-1\">\r\n                  <svg className=\"h-4 w-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n                  </svg>\r\n                </div>\r\n                <div className=\"flex-1 min-w-0\">\r\n                  <div className=\"font-medium text-gray-900 truncate\">\r\n                    {prediction.structured_formatting.main_text}\r\n                  </div>\r\n                  <div className=\"text-sm text-gray-500 truncate\">\r\n                    {prediction.structured_formatting.secondary_text}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} "
        }
    ]
}