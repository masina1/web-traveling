{
    "sourceFile": "components/trip/ItineraryPanel.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752433683232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752433683232,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { Trip, Destination, TripDay } from '@/types';\r\nimport { format, parseISO } from 'date-fns';\r\n\r\ninterface ItineraryPanelProps {\r\n  trip: Trip;\r\n  tripDays: TripDay[];\r\n  selectedDay: number;\r\n  selectedDestination: Destination | null;\r\n  onDaySelect: (day: number) => void;\r\n  onDestinationSelect: (destination: Destination) => void;\r\n  onDestinationsChange: (destinations: Destination[]) => void;\r\n}\r\n\r\nexport default function ItineraryPanel({\r\n  trip,\r\n  tripDays,\r\n  selectedDay,\r\n  selectedDestination,\r\n  onDaySelect,\r\n  onDestinationSelect,\r\n  onDestinationsChange,\r\n}: ItineraryPanelProps) {\r\n  const [expandedDays, setExpandedDays] = useState<Set<number>>(new Set([1]));\r\n\r\n  const toggleDay = (day: number) => {\r\n    const newExpanded = new Set(expandedDays);\r\n    if (newExpanded.has(day)) {\r\n      newExpanded.delete(day);\r\n    } else {\r\n      newExpanded.add(day);\r\n    }\r\n    setExpandedDays(newExpanded);\r\n    onDaySelect(day);\r\n  };\r\n\r\n  const formatTime = (time: string) => {\r\n    if (!time) return '';\r\n    try {\r\n      const [hours, minutes] = time.split(':');\r\n      const date = new Date();\r\n      date.setHours(parseInt(hours), parseInt(minutes));\r\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n    } catch {\r\n      return time;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-full flex flex-col\">\r\n      {/* Header */}\r\n      <div className=\"p-4 border-b border-gray-200\">\r\n        <h2 className=\"text-lg font-semibold text-gray-900\">Itinerary</h2>\r\n        <p className=\"text-sm text-gray-600\">\r\n          {tripDays.length} days â€¢ {tripDays.reduce((acc, day) => acc + day.destinations.length, 0)} destinations\r\n        </p>\r\n      </div>\r\n\r\n      {/* Days List */}\r\n      <div className=\"flex-1 overflow-y-auto\">\r\n        {tripDays.map((day) => (\r\n          <div key={day.day} className=\"border-b border-gray-100 last:border-b-0\">\r\n            {/* Day Header */}\r\n            <button\r\n              onClick={() => toggleDay(day.day)}\r\n              className={`w-full p-4 text-left hover:bg-gray-50 transition-colors ${\r\n                selectedDay === day.day ? 'bg-blue-50' : ''\r\n              }`}\r\n            >\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <div \r\n                    className={`w-6 h-6 rounded-full flex items-center justify-center text-white text-sm font-medium`}\r\n                    style={{ backgroundColor: day.color.pin }}\r\n                  >\r\n                    {day.day}\r\n                  </div>\r\n                  <div>\r\n                    <h3 className=\"font-medium text-gray-900\">\r\n                      Day {day.day}\r\n                    </h3>\r\n                    <p className=\"text-sm text-gray-600\">\r\n                      {format(parseISO(day.date), 'MMM d, yyyy')}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <span className=\"text-sm text-gray-500\">\r\n                    {day.destinations.length} stops\r\n                  </span>\r\n                  <svg \r\n                    className={`w-4 h-4 text-gray-400 transition-transform ${\r\n                      expandedDays.has(day.day) ? 'rotate-180' : ''\r\n                    }`}\r\n                    fill=\"none\" \r\n                    stroke=\"currentColor\" \r\n                    viewBox=\"0 0 24 24\"\r\n                  >\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n                  </svg>\r\n                </div>\r\n              </div>\r\n            </button>\r\n\r\n            {/* Destinations List */}\r\n            {expandedDays.has(day.day) && (\r\n              <div className=\"bg-gray-50\">\r\n                {day.destinations.length === 0 ? (\r\n                  <div className=\"p-4 text-center text-gray-500\">\r\n                    <svg className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n                    </svg>\r\n                    <p className=\"text-sm\">No destinations added yet</p>\r\n                    <p className=\"text-xs text-gray-400 mt-1\">Click on the map to add destinations</p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-0\">\r\n                    {day.destinations.map((destination, index) => (\r\n                      <div key={destination.id || index}>\r\n                        <button\r\n                          onClick={() => onDestinationSelect(destination)}\r\n                          className={`w-full p-4 text-left hover:bg-gray-100 transition-colors ${\r\n                            selectedDestination?.id === destination.id ? 'bg-blue-100' : ''\r\n                          }`}\r\n                        >\r\n                          <div className=\"flex items-start space-x-3\">\r\n                            <div \r\n                              className=\"w-6 h-6 rounded-full flex items-center justify-center text-white text-xs font-medium flex-shrink-0 mt-0.5\"\r\n                              style={{ backgroundColor: day.color.pin }}\r\n                            >\r\n                              {destination.orderIndex}\r\n                            </div>\r\n                            <div className=\"flex-1 min-w-0\">\r\n                              <div className=\"flex items-center justify-between\">\r\n                                <h4 className=\"font-medium text-gray-900 truncate\">\r\n                                  {destination.locationName}\r\n                                </h4>\r\n                                {destination.startTime && (\r\n                                  <span className=\"text-sm text-gray-500 flex-shrink-0 ml-2\">\r\n                                    {formatTime(destination.startTime)}\r\n                                  </span>\r\n                                )}\r\n                              </div>\r\n                              <p className=\"text-sm text-gray-600 truncate\">\r\n                                {destination.address}\r\n                              </p>\r\n                              {destination.notes && (\r\n                                <p className=\"text-sm text-gray-500 mt-1 line-clamp-2\">\r\n                                  {destination.notes}\r\n                                </p>\r\n                              )}\r\n                              <div className=\"flex items-center space-x-4 mt-2\">\r\n                                {destination.category && (\r\n                                  <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-700\">\r\n                                    {destination.category}\r\n                                  </span>\r\n                                )}\r\n                                {destination.rating && (\r\n                                  <div className=\"flex items-center space-x-1\">\r\n                                    <svg className=\"w-4 h-4 text-yellow-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                                      <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\r\n                                    </svg>\r\n                                    <span className=\"text-sm text-gray-600\">{destination.rating}</span>\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </button>\r\n                        \r\n                        {/* Connector line */}\r\n                        {index < day.destinations.length - 1 && (\r\n                          <div className=\"flex justify-start ml-7\">\r\n                            <div className=\"w-0.5 h-4 bg-gray-300\"></div>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n                \r\n                {/* Add Destination Button */}\r\n                <div className=\"p-4 border-t border-gray-200\">\r\n                  <button\r\n                    onClick={() => onDaySelect(day.day)}\r\n                    className=\"w-full flex items-center justify-center space-x-2 p-3 border-2 border-dashed border-gray-300 rounded-lg hover:border-gray-400 hover:bg-gray-50 transition-colors\"\r\n                  >\r\n                    <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n                    </svg>\r\n                    <span className=\"text-sm text-gray-600\">Add destination</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Footer */}\r\n      <div className=\"p-4 border-t border-gray-200\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n            </svg>\r\n            <span className=\"text-xs text-gray-500\">Click on the map to add destinations</span>\r\n          </div>\r\n          <button className=\"text-xs text-primary-600 hover:text-primary-700\">\r\n            Export\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} "
        }
    ]
}