{
    "sourceFile": "components/trip/ItineraryPanel.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1752433683232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752440388566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,27 @@\n \r\n import { useState } from 'react';\r\n import { Trip, Destination, TripDay } from '@/types';\r\n import { format, parseISO } from 'date-fns';\r\n+import {\r\n+  DndContext,\r\n+  closestCenter,\r\n+  KeyboardSensor,\r\n+  PointerSensor,\r\n+  useSensor,\r\n+  useSensors,\r\n+  DragEndEvent,\r\n+} from '@dnd-kit/core';\r\n+import {\r\n+  SortableContext,\r\n+  sortableKeyboardCoordinates,\r\n+  verticalListSortingStrategy,\r\n+  useSortable,\r\n+} from '@dnd-kit/sortable';\r\n+import {\r\n+  CSS,\r\n+} from '@dnd-kit/utilities';\r\n+import { reorderDestinations } from '@/lib/destination-service';\r\n \r\n interface ItineraryPanelProps {\r\n   trip: Trip;\r\n   tripDays: TripDay[];\r\n@@ -13,8 +32,124 @@\n   onDestinationSelect: (destination: Destination) => void;\r\n   onDestinationsChange: (destinations: Destination[]) => void;\r\n }\r\n \r\n+// Sortable destination item component\r\n+function SortableDestination({ \r\n+  destination, \r\n+  dayColor, \r\n+  selectedDestination,\r\n+  onDestinationSelect,\r\n+  isLastItem \r\n+}: {\r\n+  destination: Destination;\r\n+  dayColor: any;\r\n+  selectedDestination: Destination | null;\r\n+  onDestinationSelect: (destination: Destination) => void;\r\n+  isLastItem: boolean;\r\n+}) {\r\n+  const {\r\n+    attributes,\r\n+    listeners,\r\n+    setNodeRef,\r\n+    transform,\r\n+    transition,\r\n+    isDragging,\r\n+  } = useSortable({ id: destination.id });\r\n+\r\n+  const style = {\r\n+    transform: CSS.Transform.toString(transform),\r\n+    transition,\r\n+  };\r\n+\r\n+  const formatTime = (time: string) => {\r\n+    if (!time) return '';\r\n+    try {\r\n+      const [hours, minutes] = time.split(':');\r\n+      const date = new Date();\r\n+      date.setHours(parseInt(hours), parseInt(minutes));\r\n+      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n+    } catch {\r\n+      return time;\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div ref={setNodeRef} style={style} className={isDragging ? 'opacity-50' : ''}>\r\n+      <button\r\n+        onClick={() => onDestinationSelect(destination)}\r\n+        className={`w-full p-4 text-left hover:bg-gray-100 transition-colors ${\r\n+          selectedDestination?.id === destination.id ? 'bg-blue-100' : ''\r\n+        }`}\r\n+      >\r\n+        <div className=\"flex items-start space-x-3\">\r\n+          {/* Drag Handle */}\r\n+          <div \r\n+            {...attributes}\r\n+            {...listeners}\r\n+            className=\"flex-shrink-0 mt-1 cursor-grab active:cursor-grabbing\"\r\n+          >\r\n+            <svg className=\"w-4 h-4 text-gray-400 hover:text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 8h16M4 16h16\" />\r\n+            </svg>\r\n+          </div>\r\n+\r\n+          {/* Pin Number */}\r\n+          <div \r\n+            className=\"w-6 h-6 rounded-full flex items-center justify-center text-white text-xs font-medium flex-shrink-0 mt-0.5\"\r\n+            style={{ backgroundColor: dayColor.pin }}\r\n+          >\r\n+            {destination.orderIndex}\r\n+          </div>\r\n+          \r\n+          <div className=\"flex-1 min-w-0\">\r\n+            <div className=\"flex items-center justify-between\">\r\n+              <h4 className=\"font-medium text-gray-900 truncate\">\r\n+                {destination.locationName}\r\n+              </h4>\r\n+              {destination.startTime && (\r\n+                <span className=\"text-sm text-gray-500 flex-shrink-0 ml-2\">\r\n+                  {formatTime(destination.startTime)}\r\n+                </span>\r\n+              )}\r\n+            </div>\r\n+            <p className=\"text-sm text-gray-600 truncate\">\r\n+              {destination.address}\r\n+            </p>\r\n+            {destination.notes && (\r\n+              <p className=\"text-sm text-gray-500 mt-1 line-clamp-2\">\r\n+                {destination.notes}\r\n+              </p>\r\n+            )}\r\n+            <div className=\"flex items-center space-x-4 mt-2\">\r\n+              {destination.category && (\r\n+                <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-700\">\r\n+                  {destination.category}\r\n+                </span>\r\n+              )}\r\n+              {destination.rating && (\r\n+                <div className=\"flex items-center space-x-1\">\r\n+                  <svg className=\"w-4 h-4 text-yellow-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n+                    <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\r\n+                  </svg>\r\n+                  <span className=\"text-sm text-gray-600\">{destination.rating}</span>\r\n+                </div>\r\n+              )}\r\n+            </div>\r\n+          </div>\r\n+        </div>\r\n+      </button>\r\n+      \r\n+      {/* Connector line */}\r\n+      {!isLastItem && (\r\n+        <div className=\"flex justify-start ml-11\">\r\n+          <div className=\"w-0.5 h-4 bg-gray-300\"></div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n export default function ItineraryPanel({\r\n   trip,\r\n   tripDays,\r\n   selectedDay,\r\n@@ -23,9 +158,21 @@\n   onDestinationSelect,\r\n   onDestinationsChange,\r\n }: ItineraryPanelProps) {\r\n   const [expandedDays, setExpandedDays] = useState<Set<number>>(new Set([1]));\r\n+  const [isReordering, setIsReordering] = useState(false);\r\n \r\n+  const sensors = useSensors(\r\n+    useSensor(PointerSensor, {\r\n+      activationConstraint: {\r\n+        distance: 8,\r\n+      },\r\n+    }),\r\n+    useSensor(KeyboardSensor, {\r\n+      coordinateGetter: sortableKeyboardCoordinates,\r\n+    })\r\n+  );\r\n+\r\n   const toggleDay = (day: number) => {\r\n     const newExpanded = new Set(expandedDays);\r\n     if (newExpanded.has(day)) {\r\n       newExpanded.delete(day);\r\n@@ -35,28 +182,92 @@\n     setExpandedDays(newExpanded);\r\n     onDaySelect(day);\r\n   };\r\n \r\n-  const formatTime = (time: string) => {\r\n-    if (!time) return '';\r\n+  const handleDragEnd = async (event: DragEndEvent) => {\r\n+    const { active, over } = event;\r\n+    \r\n+    if (!over || active.id === over.id) {\r\n+      return;\r\n+    }\r\n+\r\n+    // Find the day that contains the dragged item\r\n+    const draggedDestination = tripDays\r\n+      .flatMap(day => day.destinations)\r\n+      .find(dest => dest.id === active.id);\r\n+    \r\n+    if (!draggedDestination) return;\r\n+\r\n+    const day = tripDays.find(d => d.day === draggedDestination.day);\r\n+    if (!day) return;\r\n+\r\n+    const oldIndex = day.destinations.findIndex(dest => dest.id === active.id);\r\n+    const newIndex = day.destinations.findIndex(dest => dest.id === over.id);\r\n+\r\n+    if (oldIndex === newIndex) return;\r\n+\r\n+    setIsReordering(true);\r\n+\r\n     try {\r\n-      const [hours, minutes] = time.split(':');\r\n-      const date = new Date();\r\n-      date.setHours(parseInt(hours), parseInt(minutes));\r\n-      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n-    } catch {\r\n-      return time;\r\n+      // Create new order array\r\n+      const newDestinations = [...day.destinations];\r\n+      const [movedItem] = newDestinations.splice(oldIndex, 1);\r\n+      newDestinations.splice(newIndex, 0, movedItem);\r\n+\r\n+      // Update order indices\r\n+      const reorderedDestinations = newDestinations.map((dest, index) => ({\r\n+        ...dest,\r\n+        orderIndex: index + 1\r\n+      }));\r\n+\r\n+      // Update local state immediately for better UX\r\n+      const updatedTripDays = tripDays.map(tripDay => {\r\n+        if (tripDay.day === day.day) {\r\n+          return {\r\n+            ...tripDay,\r\n+            destinations: reorderedDestinations\r\n+          };\r\n+        }\r\n+        return tripDay;\r\n+      });\r\n+\r\n+      // Update destinations in parent component\r\n+      const allDestinations = updatedTripDays.flatMap(d => d.destinations);\r\n+      onDestinationsChange(allDestinations);\r\n+\r\n+      // Save to database\r\n+      const destinationIds = reorderedDestinations.map(dest => dest.id);\r\n+      await reorderDestinations(trip.id, day.day, destinationIds);\r\n+\r\n+    } catch (error) {\r\n+      console.error('Error reordering destinations:', error);\r\n+      // Optionally show error message to user\r\n+    } finally {\r\n+      setIsReordering(false);\r\n     }\r\n   };\r\n \r\n   return (\r\n     <div className=\"h-full flex flex-col\">\r\n       {/* Header */}\r\n       <div className=\"p-4 border-b border-gray-200\">\r\n-        <h2 className=\"text-lg font-semibold text-gray-900\">Itinerary</h2>\r\n-        <p className=\"text-sm text-gray-600\">\r\n-          {tripDays.length} days â€¢ {tripDays.reduce((acc, day) => acc + day.destinations.length, 0)} destinations\r\n-        </p>\r\n+        <div className=\"flex items-center justify-between\">\r\n+          <div>\r\n+            <h2 className=\"text-lg font-semibold text-gray-900\">Itinerary</h2>\r\n+            <p className=\"text-sm text-gray-600\">\r\n+              {tripDays.length} days â€¢ {tripDays.reduce((acc, day) => acc + day.destinations.length, 0)} destinations\r\n+            </p>\r\n+          </div>\r\n+          {isReordering && (\r\n+            <div className=\"flex items-center text-sm text-gray-500\">\r\n+              <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n+                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n+                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n+              </svg>\r\n+              Updating...\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n       </div>\r\n \r\n       {/* Days List */}\r\n       <div className=\"flex-1 overflow-y-auto\">\r\n@@ -116,71 +327,31 @@\n                     <p className=\"text-sm\">No destinations added yet</p>\r\n                     <p className=\"text-xs text-gray-400 mt-1\">Click on the map to add destinations</p>\r\n                   </div>\r\n                 ) : (\r\n-                  <div className=\"space-y-0\">\r\n-                    {day.destinations.map((destination, index) => (\r\n-                      <div key={destination.id || index}>\r\n-                        <button\r\n-                          onClick={() => onDestinationSelect(destination)}\r\n-                          className={`w-full p-4 text-left hover:bg-gray-100 transition-colors ${\r\n-                            selectedDestination?.id === destination.id ? 'bg-blue-100' : ''\r\n-                          }`}\r\n-                        >\r\n-                          <div className=\"flex items-start space-x-3\">\r\n-                            <div \r\n-                              className=\"w-6 h-6 rounded-full flex items-center justify-center text-white text-xs font-medium flex-shrink-0 mt-0.5\"\r\n-                              style={{ backgroundColor: day.color.pin }}\r\n-                            >\r\n-                              {destination.orderIndex}\r\n-                            </div>\r\n-                            <div className=\"flex-1 min-w-0\">\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                <h4 className=\"font-medium text-gray-900 truncate\">\r\n-                                  {destination.locationName}\r\n-                                </h4>\r\n-                                {destination.startTime && (\r\n-                                  <span className=\"text-sm text-gray-500 flex-shrink-0 ml-2\">\r\n-                                    {formatTime(destination.startTime)}\r\n-                                  </span>\r\n-                                )}\r\n-                              </div>\r\n-                              <p className=\"text-sm text-gray-600 truncate\">\r\n-                                {destination.address}\r\n-                              </p>\r\n-                              {destination.notes && (\r\n-                                <p className=\"text-sm text-gray-500 mt-1 line-clamp-2\">\r\n-                                  {destination.notes}\r\n-                                </p>\r\n-                              )}\r\n-                              <div className=\"flex items-center space-x-4 mt-2\">\r\n-                                {destination.category && (\r\n-                                  <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-700\">\r\n-                                    {destination.category}\r\n-                                  </span>\r\n-                                )}\r\n-                                {destination.rating && (\r\n-                                  <div className=\"flex items-center space-x-1\">\r\n-                                    <svg className=\"w-4 h-4 text-yellow-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n-                                      <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\r\n-                                    </svg>\r\n-                                    <span className=\"text-sm text-gray-600\">{destination.rating}</span>\r\n-                                  </div>\r\n-                                )}\r\n-                              </div>\r\n-                            </div>\r\n-                          </div>\r\n-                        </button>\r\n-                        \r\n-                        {/* Connector line */}\r\n-                        {index < day.destinations.length - 1 && (\r\n-                          <div className=\"flex justify-start ml-7\">\r\n-                            <div className=\"w-0.5 h-4 bg-gray-300\"></div>\r\n-                          </div>\r\n-                        )}\r\n+                  <DndContext\r\n+                    sensors={sensors}\r\n+                    collisionDetection={closestCenter}\r\n+                    onDragEnd={handleDragEnd}\r\n+                  >\r\n+                    <SortableContext \r\n+                      items={day.destinations.map(dest => dest.id)}\r\n+                      strategy={verticalListSortingStrategy}\r\n+                    >\r\n+                      <div className=\"space-y-0\">\r\n+                        {day.destinations.map((destination, index) => (\r\n+                          <SortableDestination\r\n+                            key={destination.id}\r\n+                            destination={destination}\r\n+                            dayColor={day.color}\r\n+                            selectedDestination={selectedDestination}\r\n+                            onDestinationSelect={onDestinationSelect}\r\n+                            isLastItem={index === day.destinations.length - 1}\r\n+                          />\r\n+                        ))}\r\n                       </div>\r\n-                    ))}\r\n-                  </div>\r\n+                    </SortableContext>\r\n+                  </DndContext>\r\n                 )}\r\n                 \r\n                 {/* Add Destination Button */}\r\n                 <div className=\"p-4 border-t border-gray-200\">\r\n@@ -206,9 +377,12 @@\n           <div className=\"flex items-center space-x-2\">\r\n             <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n               <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n             </svg>\r\n-            <span className=\"text-xs text-gray-500\">Click on the map to add destinations</span>\r\n+            <span className=\"text-xs text-gray-500\">\r\n+              {day.destinations.length > 0 ? 'Drag destinations to reorder â€¢ ' : ''}\r\n+              Click on the map to add destinations\r\n+            </span>\r\n           </div>\r\n           <button className=\"text-xs text-primary-600 hover:text-primary-700\">\r\n             Export\r\n           </button>\r\n"
                },
                {
                    "date": 1752440399077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -378,9 +378,9 @@\n             <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n               <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n             </svg>\r\n             <span className=\"text-xs text-gray-500\">\r\n-              {day.destinations.length > 0 ? 'Drag destinations to reorder â€¢ ' : ''}\r\n+              {tripDays.some(day => day.destinations.length > 0) ? 'Drag destinations to reorder â€¢ ' : ''}\r\n               Click on the map to add destinations\r\n             </span>\r\n           </div>\r\n           <button className=\"text-xs text-primary-600 hover:text-primary-700\">\r\n"
                },
                {
                    "date": 1752442691067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,12 @@\n   PointerSensor,\r\n   useSensor,\r\n   useSensors,\r\n   DragEndEvent,\r\n+  DragOverEvent,\r\n+  DragOverlay,\r\n+  useDraggable,\r\n+  useDroppable,\r\n } from '@dnd-kit/core';\r\n import {\r\n   SortableContext,\r\n   sortableKeyboardCoordinates,\r\n@@ -20,9 +24,9 @@\n } from '@dnd-kit/sortable';\r\n import {\r\n   CSS,\r\n } from '@dnd-kit/utilities';\r\n-import { reorderDestinations } from '@/lib/destination-service';\r\n+import { reorderDestinations, moveDestinationToDay } from '@/lib/destination-service';\r\n \r\n interface ItineraryPanelProps {\r\n   trip: Trip;\r\n   tripDays: TripDay[];\r\n"
                },
                {
                    "date": 1752442724446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,32 @@\n   onDestinationSelect: (destination: Destination) => void;\r\n   onDestinationsChange: (destinations: Destination[]) => void;\r\n }\r\n \r\n+// Droppable day container component\r\n+function DroppableDay({ \r\n+  day, \r\n+  children, \r\n+  isOver \r\n+}: { \r\n+  day: TripDay; \r\n+  children: React.ReactNode;\r\n+  isOver: boolean;\r\n+}) {\r\n+  const { setNodeRef } = useDroppable({\r\n+    id: `day-${day.day}`,\r\n+  });\r\n+\r\n+  return (\r\n+    <div \r\n+      ref={setNodeRef}\r\n+      className={`transition-colors ${isOver ? 'bg-blue-50' : ''}`}\r\n+    >\r\n+      {children}\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n // Sortable destination item component\r\n function SortableDestination({ \r\n   destination, \r\n   dayColor, \r\n"
                },
                {
                    "date": 1752442761182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,8 +187,10 @@\n   onDestinationsChange,\r\n }: ItineraryPanelProps) {\r\n   const [expandedDays, setExpandedDays] = useState<Set<number>>(new Set([1]));\r\n   const [isReordering, setIsReordering] = useState(false);\r\n+  const [activeId, setActiveId] = useState<string | null>(null);\r\n+  const [overId, setOverId] = useState<string | null>(null);\r\n \r\n   const sensors = useSensors(\r\n     useSensor(PointerSensor, {\r\n       activationConstraint: {\r\n@@ -210,66 +212,153 @@\n     setExpandedDays(newExpanded);\r\n     onDaySelect(day);\r\n   };\r\n \r\n+  // Get all destinations for sortable context\r\n+  const allDestinations = tripDays.flatMap(day => day.destinations);\r\n+\r\n+  const handleDragStart = (event: any) => {\r\n+    setActiveId(event.active.id);\r\n+  };\r\n+\r\n+  const handleDragOver = (event: DragOverEvent) => {\r\n+    setOverId(event.over?.id || null);\r\n+  };\r\n+\r\n   const handleDragEnd = async (event: DragEndEvent) => {\r\n     const { active, over } = event;\r\n     \r\n+    setActiveId(null);\r\n+    setOverId(null);\r\n+    \r\n     if (!over || active.id === over.id) {\r\n       return;\r\n     }\r\n \r\n-    // Find the day that contains the dragged item\r\n-    const draggedDestination = tripDays\r\n-      .flatMap(day => day.destinations)\r\n-      .find(dest => dest.id === active.id);\r\n-    \r\n+    const draggedDestination = allDestinations.find(dest => dest.id === active.id);\r\n     if (!draggedDestination) return;\r\n \r\n-    const day = tripDays.find(d => d.day === draggedDestination.day);\r\n-    if (!day) return;\r\n+    setIsReordering(true);\r\n \r\n-    const oldIndex = day.destinations.findIndex(dest => dest.id === active.id);\r\n-    const newIndex = day.destinations.findIndex(dest => dest.id === over.id);\r\n+    try {\r\n+      // Check if we're dropping on a day container or another destination\r\n+      const isDroppedOnDay = over.id.toString().startsWith('day-');\r\n+      \r\n+      if (isDroppedOnDay) {\r\n+        // Cross-day drop - move to end of target day\r\n+        const targetDay = parseInt(over.id.toString().replace('day-', ''));\r\n+        const targetDayData = tripDays.find(d => d.day === targetDay);\r\n+        \r\n+        if (targetDayData && targetDay !== draggedDestination.day) {\r\n+          const newOrderIndex = targetDayData.destinations.length + 1;\r\n+          \r\n+          // Update in database\r\n+          await moveDestinationToDay(draggedDestination.id, targetDay, newOrderIndex);\r\n+          \r\n+          // Update local state\r\n+          const updatedDestination = {\r\n+            ...draggedDestination,\r\n+            day: targetDay,\r\n+            orderIndex: newOrderIndex\r\n+          };\r\n+          \r\n+          const updatedDestinations = allDestinations.map(dest =>\r\n+            dest.id === draggedDestination.id ? updatedDestination : dest\r\n+          );\r\n+          \r\n+          onDestinationsChange(updatedDestinations);\r\n+        }\r\n+      } else {\r\n+        // Same day or destination-to-destination drop\r\n+        const targetDestination = allDestinations.find(dest => dest.id === over.id);\r\n+        if (!targetDestination) return;\r\n \r\n-    if (oldIndex === newIndex) return;\r\n+        const sourceDay = draggedDestination.day;\r\n+        const targetDay = targetDestination.day;\r\n \r\n-    setIsReordering(true);\r\n+        if (sourceDay === targetDay) {\r\n+          // Same day reordering\r\n+          const dayData = tripDays.find(d => d.day === sourceDay);\r\n+          if (!dayData) return;\r\n \r\n-    try {\r\n-      // Create new order array\r\n-      const newDestinations = [...day.destinations];\r\n-      const [movedItem] = newDestinations.splice(oldIndex, 1);\r\n-      newDestinations.splice(newIndex, 0, movedItem);\r\n+          const oldIndex = dayData.destinations.findIndex(dest => dest.id === active.id);\r\n+          const newIndex = dayData.destinations.findIndex(dest => dest.id === over.id);\r\n \r\n-      // Update order indices\r\n-      const reorderedDestinations = newDestinations.map((dest, index) => ({\r\n-        ...dest,\r\n-        orderIndex: index + 1\r\n-      }));\r\n+          if (oldIndex === newIndex) return;\r\n \r\n-      // Update local state immediately for better UX\r\n-      const updatedTripDays = tripDays.map(tripDay => {\r\n-        if (tripDay.day === day.day) {\r\n-          return {\r\n-            ...tripDay,\r\n-            destinations: reorderedDestinations\r\n-          };\r\n-        }\r\n-        return tripDay;\r\n-      });\r\n+          // Create new order array\r\n+          const newDestinations = [...dayData.destinations];\r\n+          const [movedItem] = newDestinations.splice(oldIndex, 1);\r\n+          newDestinations.splice(newIndex, 0, movedItem);\r\n \r\n-      // Update destinations in parent component\r\n-      const allDestinations = updatedTripDays.flatMap(d => d.destinations);\r\n-      onDestinationsChange(allDestinations);\r\n+          // Update order indices\r\n+          const reorderedDestinations = newDestinations.map((dest, index) => ({\r\n+            ...dest,\r\n+            orderIndex: index + 1\r\n+          }));\r\n \r\n-      // Save to database\r\n-      const destinationIds = reorderedDestinations.map(dest => dest.id);\r\n-      await reorderDestinations(trip.id, day.day, destinationIds);\r\n+          // Update destinations in parent component\r\n+          const updatedAllDestinations = allDestinations.map(dest => {\r\n+            const updated = reorderedDestinations.find(rd => rd.id === dest.id);\r\n+            return updated || dest;\r\n+          });\r\n+          \r\n+          onDestinationsChange(updatedAllDestinations);\r\n \r\n+          // Save to database\r\n+          const destinationIds = reorderedDestinations.map(dest => dest.id);\r\n+          await reorderDestinations(trip.id, sourceDay, destinationIds);\r\n+        } else {\r\n+          // Cross-day drop next to specific destination\r\n+          const targetDayData = tripDays.find(d => d.day === targetDay);\r\n+          if (!targetDayData) return;\r\n+\r\n+          const targetIndex = targetDayData.destinations.findIndex(dest => dest.id === over.id);\r\n+          const newOrderIndex = targetIndex + 1;\r\n+\r\n+          // Update in database\r\n+          await moveDestinationToDay(draggedDestination.id, targetDay, newOrderIndex);\r\n+\r\n+          // Reorder existing destinations in target day\r\n+          const updatedTargetDestinations = [...targetDayData.destinations];\r\n+          updatedTargetDestinations.splice(targetIndex + 1, 0, {\r\n+            ...draggedDestination,\r\n+            day: targetDay,\r\n+            orderIndex: newOrderIndex\r\n+          });\r\n+\r\n+          // Update order indices for all destinations in target day\r\n+          const reorderedTargetDestinations = updatedTargetDestinations.map((dest, index) => ({\r\n+            ...dest,\r\n+            orderIndex: index + 1\r\n+          }));\r\n+\r\n+          // Update local state\r\n+          const updatedDestinations = allDestinations\r\n+            .filter(dest => dest.id !== draggedDestination.id) // Remove from source\r\n+            .map(dest => {\r\n+              // Update target day destinations\r\n+              if (dest.day === targetDay) {\r\n+                const updated = reorderedTargetDestinations.find(rd => rd.id === dest.id);\r\n+                return updated || dest;\r\n+              }\r\n+              return dest;\r\n+            })\r\n+            .concat([{\r\n+              ...draggedDestination,\r\n+              day: targetDay,\r\n+              orderIndex: newOrderIndex\r\n+            }]);\r\n+\r\n+          onDestinationsChange(updatedDestinations);\r\n+\r\n+          // Reorder target day in database\r\n+          const targetDayIds = reorderedTargetDestinations.map(dest => dest.id);\r\n+          await reorderDestinations(trip.id, targetDay, targetDayIds);\r\n+        }\r\n+      }\r\n     } catch (error) {\r\n-      console.error('Error reordering destinations:', error);\r\n-      // Optionally show error message to user\r\n+      console.error('Error handling drag:', error);\r\n     } finally {\r\n       setIsReordering(false);\r\n     }\r\n   };\r\n@@ -359,8 +448,10 @@\n                   <DndContext\r\n                     sensors={sensors}\r\n                     collisionDetection={closestCenter}\r\n                     onDragEnd={handleDragEnd}\r\n+                    onDragStart={handleDragStart}\r\n+                    onDragOver={handleDragOver}\r\n                   >\r\n                     <SortableContext \r\n                       items={day.destinations.map(dest => dest.id)}\r\n                       strategy={verticalListSortingStrategy}\r\n"
                },
                {
                    "date": 1752442774796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n   DragOverEvent,\r\n   DragOverlay,\r\n   useDraggable,\r\n   useDroppable,\r\n+  UniqueIdentifier,\r\n } from '@dnd-kit/core';\r\n import {\r\n   SortableContext,\r\n   sortableKeyboardCoordinates,\r\n@@ -188,9 +189,9 @@\n }: ItineraryPanelProps) {\r\n   const [expandedDays, setExpandedDays] = useState<Set<number>>(new Set([1]));\r\n   const [isReordering, setIsReordering] = useState(false);\r\n   const [activeId, setActiveId] = useState<string | null>(null);\r\n-  const [overId, setOverId] = useState<string | null>(null);\r\n+  const [overId, setOverId] = useState<UniqueIdentifier | null>(null);\r\n \r\n   const sensors = useSensors(\r\n     useSensor(PointerSensor, {\r\n       activationConstraint: {\r\n"
                },
                {
                    "date": 1752442812633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,110 +386,116 @@\n           )}\r\n         </div>\r\n       </div>\r\n \r\n-      {/* Days List */}\r\n+      {/* Days List with Cross-Day Dragging */}\r\n       <div className=\"flex-1 overflow-y-auto\">\r\n-        {tripDays.map((day) => (\r\n-          <div key={day.day} className=\"border-b border-gray-100 last:border-b-0\">\r\n-            {/* Day Header */}\r\n-            <button\r\n-              onClick={() => toggleDay(day.day)}\r\n-              className={`w-full p-4 text-left hover:bg-gray-50 transition-colors ${\r\n-                selectedDay === day.day ? 'bg-blue-50' : ''\r\n-              }`}\r\n-            >\r\n-              <div className=\"flex items-center justify-between\">\r\n-                <div className=\"flex items-center space-x-3\">\r\n-                  <div \r\n-                    className={`w-6 h-6 rounded-full flex items-center justify-center text-white text-sm font-medium`}\r\n-                    style={{ backgroundColor: day.color.pin }}\r\n-                  >\r\n-                    {day.day}\r\n+        <DndContext\r\n+          sensors={sensors}\r\n+          collisionDetection={closestCenter}\r\n+          onDragStart={handleDragStart}\r\n+          onDragOver={handleDragOver}\r\n+          onDragEnd={handleDragEnd}\r\n+        >\r\n+          <SortableContext \r\n+            items={allDestinations.map(dest => dest.id)}\r\n+            strategy={verticalListSortingStrategy}\r\n+          >\r\n+            {tripDays.map((day) => (\r\n+              <div key={day.day} className=\"border-b border-gray-100 last:border-b-0\">\r\n+                {/* Day Header */}\r\n+                <button\r\n+                  onClick={() => toggleDay(day.day)}\r\n+                  className={`w-full p-4 text-left hover:bg-gray-50 transition-colors ${\r\n+                    selectedDay === day.day ? 'bg-blue-50' : ''\r\n+                  }`}\r\n+                >\r\n+                  <div className=\"flex items-center justify-between\">\r\n+                    <div className=\"flex items-center space-x-3\">\r\n+                      <div \r\n+                        className={`w-6 h-6 rounded-full flex items-center justify-center text-white text-sm font-medium`}\r\n+                        style={{ backgroundColor: day.color.pin }}\r\n+                      >\r\n+                        {day.day}\r\n+                      </div>\r\n+                      <div>\r\n+                        <h3 className=\"font-medium text-gray-900\">\r\n+                          Day {day.day}\r\n+                        </h3>\r\n+                        <p className=\"text-sm text-gray-600\">\r\n+                          {format(parseISO(day.date), 'MMM d, yyyy')}\r\n+                        </p>\r\n+                      </div>\r\n+                    </div>\r\n+                    <div className=\"flex items-center space-x-2\">\r\n+                      <span className=\"text-sm text-gray-500\">\r\n+                        {day.destinations.length} stops\r\n+                      </span>\r\n+                      <svg \r\n+                        className={`w-4 h-4 text-gray-400 transition-transform ${\r\n+                          expandedDays.has(day.day) ? 'rotate-180' : ''\r\n+                        }`}\r\n+                        fill=\"none\" \r\n+                        stroke=\"currentColor\" \r\n+                        viewBox=\"0 0 24 24\"\r\n+                      >\r\n+                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n+                      </svg>\r\n+                    </div>\r\n                   </div>\r\n-                  <div>\r\n-                    <h3 className=\"font-medium text-gray-900\">\r\n-                      Day {day.day}\r\n-                    </h3>\r\n-                    <p className=\"text-sm text-gray-600\">\r\n-                      {format(parseISO(day.date), 'MMM d, yyyy')}\r\n-                    </p>\r\n-                  </div>\r\n-                </div>\r\n-                <div className=\"flex items-center space-x-2\">\r\n-                  <span className=\"text-sm text-gray-500\">\r\n-                    {day.destinations.length} stops\r\n-                  </span>\r\n-                  <svg \r\n-                    className={`w-4 h-4 text-gray-400 transition-transform ${\r\n-                      expandedDays.has(day.day) ? 'rotate-180' : ''\r\n-                    }`}\r\n-                    fill=\"none\" \r\n-                    stroke=\"currentColor\" \r\n-                    viewBox=\"0 0 24 24\"\r\n-                  >\r\n-                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n-                  </svg>\r\n-                </div>\r\n-              </div>\r\n-            </button>\r\n+                </button>\r\n \r\n-            {/* Destinations List */}\r\n-            {expandedDays.has(day.day) && (\r\n-              <div className=\"bg-gray-50\">\r\n-                {day.destinations.length === 0 ? (\r\n-                  <div className=\"p-4 text-center text-gray-500\">\r\n-                    <svg className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\r\n-                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n-                    </svg>\r\n-                    <p className=\"text-sm\">No destinations added yet</p>\r\n-                    <p className=\"text-xs text-gray-400 mt-1\">Click on the map to add destinations</p>\r\n-                  </div>\r\n-                ) : (\r\n-                  <DndContext\r\n-                    sensors={sensors}\r\n-                    collisionDetection={closestCenter}\r\n-                    onDragEnd={handleDragEnd}\r\n-                    onDragStart={handleDragStart}\r\n-                    onDragOver={handleDragOver}\r\n+                {/* Day Content */}\r\n+                {expandedDays.has(day.day) && (\r\n+                  <DroppableDay \r\n+                    day={day} \r\n+                    isOver={overId === `day-${day.day}`}\r\n                   >\r\n-                    <SortableContext \r\n-                      items={day.destinations.map(dest => dest.id)}\r\n-                      strategy={verticalListSortingStrategy}\r\n-                    >\r\n-                      <div className=\"space-y-0\">\r\n-                        {day.destinations.map((destination, index) => (\r\n-                          <SortableDestination\r\n-                            key={destination.id}\r\n-                            destination={destination}\r\n-                            dayColor={day.color}\r\n-                            selectedDestination={selectedDestination}\r\n-                            onDestinationSelect={onDestinationSelect}\r\n-                            isLastItem={index === day.destinations.length - 1}\r\n-                          />\r\n-                        ))}\r\n+                    <div className=\"bg-gray-50\">\r\n+                      {day.destinations.length === 0 ? (\r\n+                        <div className=\"p-4 text-center text-gray-500\">\r\n+                          <svg className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\r\n+                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n+                          </svg>\r\n+                          <p className=\"text-sm\">No destinations added yet</p>\r\n+                          <p className=\"text-xs text-gray-400 mt-1\">Click on the map to add destinations</p>\r\n+                          <p className=\"text-xs text-blue-500 mt-1\">Drag destinations from other days here</p>\r\n+                        </div>\r\n+                      ) : (\r\n+                        <div className=\"space-y-0\">\r\n+                          {day.destinations.map((destination, index) => (\r\n+                            <SortableDestination\r\n+                              key={destination.id}\r\n+                              destination={destination}\r\n+                              dayColor={day.color}\r\n+                              selectedDestination={selectedDestination}\r\n+                              onDestinationSelect={onDestinationSelect}\r\n+                              isLastItem={index === day.destinations.length - 1}\r\n+                            />\r\n+                          ))}\r\n+                        </div>\r\n+                      )}\r\n+                      \r\n+                      {/* Add Destination Button */}\r\n+                      <div className=\"p-4 border-t border-gray-200\">\r\n+                        <button\r\n+                          onClick={() => onDaySelect(day.day)}\r\n+                          className=\"w-full flex items-center justify-center space-x-2 p-3 border-2 border-dashed border-gray-300 rounded-lg hover:border-gray-400 hover:bg-gray-50 transition-colors\"\r\n+                        >\r\n+                          <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n+                          </svg>\r\n+                          <span className=\"text-sm text-gray-600\">Add destination</span>\r\n+                        </button>\r\n                       </div>\r\n-                    </SortableContext>\r\n-                  </DndContext>\r\n+                    </div>\r\n+                  </DroppableDay>\r\n                 )}\r\n-                \r\n-                {/* Add Destination Button */}\r\n-                <div className=\"p-4 border-t border-gray-200\">\r\n-                  <button\r\n-                    onClick={() => onDaySelect(day.day)}\r\n-                    className=\"w-full flex items-center justify-center space-x-2 p-3 border-2 border-dashed border-gray-300 rounded-lg hover:border-gray-400 hover:bg-gray-50 transition-colors\"\r\n-                  >\r\n-                    <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n-                    </svg>\r\n-                    <span className=\"text-sm text-gray-600\">Add destination</span>\r\n-                  </button>\r\n-                </div>\r\n               </div>\r\n-            )}\r\n-          </div>\r\n-        ))}\r\n+            ))}\r\n+          </SortableContext>\r\n+        </DndContext>\r\n       </div>\r\n \r\n       {/* Footer */}\r\n       <div className=\"p-4 border-t border-gray-200\">\r\n@@ -498,9 +504,9 @@\n             <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n               <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n             </svg>\r\n             <span className=\"text-xs text-gray-500\">\r\n-              {tripDays.some(day => day.destinations.length > 0) ? 'Drag destinations to reorder â€¢ ' : ''}\r\n+              {tripDays.some(day => day.destinations.length > 0) ? 'Drag destinations to reorder or move between days â€¢ ' : ''}\r\n               Click on the map to add destinations\r\n             </span>\r\n           </div>\r\n           <button className=\"text-xs text-primary-600 hover:text-primary-700\">\r\n"
                },
                {
                    "date": 1752443267959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \r\n import { useState } from 'react';\r\n import { Trip, Destination, TripDay } from '@/types';\r\n import { format, parseISO } from 'date-fns';\r\n+import LocationSearch from './LocationSearch';\r\n import {\r\n   DndContext,\r\n   closestCenter,\r\n   KeyboardSensor,\r\n"
                },
                {
                    "date": 1752443278885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n   selectedDestination: Destination | null;\r\n   onDaySelect: (day: number) => void;\r\n   onDestinationSelect: (destination: Destination) => void;\r\n   onDestinationsChange: (destinations: Destination[]) => void;\r\n+  onLocationSelect: (destination: Destination) => void;\r\n }\r\n \r\n // Droppable day container component\r\n function DroppableDay({ \r\n"
                },
                {
                    "date": 1752443286959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,8 +187,9 @@\n   selectedDestination,\r\n   onDaySelect,\r\n   onDestinationSelect,\r\n   onDestinationsChange,\r\n+  onLocationSelect,\r\n }: ItineraryPanelProps) {\r\n   const [expandedDays, setExpandedDays] = useState<Set<number>>(new Set([1]));\r\n   const [isReordering, setIsReordering] = useState(false);\r\n   const [activeId, setActiveId] = useState<string | null>(null);\r\n"
                },
                {
                    "date": 1752443300604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -478,19 +478,33 @@\n                           ))}\r\n                         </div>\r\n                       )}\r\n                       \r\n-                      {/* Add Destination Button */}\r\n+                      {/* Add Destination - Location Search */}\r\n                       <div className=\"p-4 border-t border-gray-200\">\r\n-                        <button\r\n-                          onClick={() => onDaySelect(day.day)}\r\n-                          className=\"w-full flex items-center justify-center space-x-2 p-3 border-2 border-dashed border-gray-300 rounded-lg hover:border-gray-400 hover:bg-gray-50 transition-colors\"\r\n-                        >\r\n-                          <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n-                          </svg>\r\n-                          <span className=\"text-sm text-gray-600\">Add destination</span>\r\n-                        </button>\r\n+                        <LocationSearch\r\n+                          onLocationSelect={(destination) => {\r\n+                            // Set the destination's day and order index\r\n+                            const updatedDestination = {\r\n+                              ...destination,\r\n+                              day: day.day,\r\n+                              orderIndex: day.destinations.length + 1,\r\n+                            };\r\n+                            onLocationSelect(updatedDestination);\r\n+                            onDaySelect(day.day);\r\n+                          }}\r\n+                          selectedDay={day.day}\r\n+                          tripId={trip.id}\r\n+                          placeholder={`Search places for Day ${day.day}...`}\r\n+                          className=\"w-full\"\r\n+                        />\r\n+                        \r\n+                        {/* Alternative: Click on map hint */}\r\n+                        <div className=\"mt-2 text-center\">\r\n+                          <span className=\"text-xs text-gray-500\">\r\n+                            or click on the map to add a destination\r\n+                          </span>\r\n+                        </div>\r\n                       </div>\r\n                     </div>\r\n                   </DroppableDay>\r\n                 )}\r\n"
                }
            ],
            "date": 1752433683232,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { Trip, Destination, TripDay } from '@/types';\r\nimport { format, parseISO } from 'date-fns';\r\n\r\ninterface ItineraryPanelProps {\r\n  trip: Trip;\r\n  tripDays: TripDay[];\r\n  selectedDay: number;\r\n  selectedDestination: Destination | null;\r\n  onDaySelect: (day: number) => void;\r\n  onDestinationSelect: (destination: Destination) => void;\r\n  onDestinationsChange: (destinations: Destination[]) => void;\r\n}\r\n\r\nexport default function ItineraryPanel({\r\n  trip,\r\n  tripDays,\r\n  selectedDay,\r\n  selectedDestination,\r\n  onDaySelect,\r\n  onDestinationSelect,\r\n  onDestinationsChange,\r\n}: ItineraryPanelProps) {\r\n  const [expandedDays, setExpandedDays] = useState<Set<number>>(new Set([1]));\r\n\r\n  const toggleDay = (day: number) => {\r\n    const newExpanded = new Set(expandedDays);\r\n    if (newExpanded.has(day)) {\r\n      newExpanded.delete(day);\r\n    } else {\r\n      newExpanded.add(day);\r\n    }\r\n    setExpandedDays(newExpanded);\r\n    onDaySelect(day);\r\n  };\r\n\r\n  const formatTime = (time: string) => {\r\n    if (!time) return '';\r\n    try {\r\n      const [hours, minutes] = time.split(':');\r\n      const date = new Date();\r\n      date.setHours(parseInt(hours), parseInt(minutes));\r\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n    } catch {\r\n      return time;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-full flex flex-col\">\r\n      {/* Header */}\r\n      <div className=\"p-4 border-b border-gray-200\">\r\n        <h2 className=\"text-lg font-semibold text-gray-900\">Itinerary</h2>\r\n        <p className=\"text-sm text-gray-600\">\r\n          {tripDays.length} days â€¢ {tripDays.reduce((acc, day) => acc + day.destinations.length, 0)} destinations\r\n        </p>\r\n      </div>\r\n\r\n      {/* Days List */}\r\n      <div className=\"flex-1 overflow-y-auto\">\r\n        {tripDays.map((day) => (\r\n          <div key={day.day} className=\"border-b border-gray-100 last:border-b-0\">\r\n            {/* Day Header */}\r\n            <button\r\n              onClick={() => toggleDay(day.day)}\r\n              className={`w-full p-4 text-left hover:bg-gray-50 transition-colors ${\r\n                selectedDay === day.day ? 'bg-blue-50' : ''\r\n              }`}\r\n            >\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <div \r\n                    className={`w-6 h-6 rounded-full flex items-center justify-center text-white text-sm font-medium`}\r\n                    style={{ backgroundColor: day.color.pin }}\r\n                  >\r\n                    {day.day}\r\n                  </div>\r\n                  <div>\r\n                    <h3 className=\"font-medium text-gray-900\">\r\n                      Day {day.day}\r\n                    </h3>\r\n                    <p className=\"text-sm text-gray-600\">\r\n                      {format(parseISO(day.date), 'MMM d, yyyy')}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <span className=\"text-sm text-gray-500\">\r\n                    {day.destinations.length} stops\r\n                  </span>\r\n                  <svg \r\n                    className={`w-4 h-4 text-gray-400 transition-transform ${\r\n                      expandedDays.has(day.day) ? 'rotate-180' : ''\r\n                    }`}\r\n                    fill=\"none\" \r\n                    stroke=\"currentColor\" \r\n                    viewBox=\"0 0 24 24\"\r\n                  >\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n                  </svg>\r\n                </div>\r\n              </div>\r\n            </button>\r\n\r\n            {/* Destinations List */}\r\n            {expandedDays.has(day.day) && (\r\n              <div className=\"bg-gray-50\">\r\n                {day.destinations.length === 0 ? (\r\n                  <div className=\"p-4 text-center text-gray-500\">\r\n                    <svg className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n                    </svg>\r\n                    <p className=\"text-sm\">No destinations added yet</p>\r\n                    <p className=\"text-xs text-gray-400 mt-1\">Click on the map to add destinations</p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-0\">\r\n                    {day.destinations.map((destination, index) => (\r\n                      <div key={destination.id || index}>\r\n                        <button\r\n                          onClick={() => onDestinationSelect(destination)}\r\n                          className={`w-full p-4 text-left hover:bg-gray-100 transition-colors ${\r\n                            selectedDestination?.id === destination.id ? 'bg-blue-100' : ''\r\n                          }`}\r\n                        >\r\n                          <div className=\"flex items-start space-x-3\">\r\n                            <div \r\n                              className=\"w-6 h-6 rounded-full flex items-center justify-center text-white text-xs font-medium flex-shrink-0 mt-0.5\"\r\n                              style={{ backgroundColor: day.color.pin }}\r\n                            >\r\n                              {destination.orderIndex}\r\n                            </div>\r\n                            <div className=\"flex-1 min-w-0\">\r\n                              <div className=\"flex items-center justify-between\">\r\n                                <h4 className=\"font-medium text-gray-900 truncate\">\r\n                                  {destination.locationName}\r\n                                </h4>\r\n                                {destination.startTime && (\r\n                                  <span className=\"text-sm text-gray-500 flex-shrink-0 ml-2\">\r\n                                    {formatTime(destination.startTime)}\r\n                                  </span>\r\n                                )}\r\n                              </div>\r\n                              <p className=\"text-sm text-gray-600 truncate\">\r\n                                {destination.address}\r\n                              </p>\r\n                              {destination.notes && (\r\n                                <p className=\"text-sm text-gray-500 mt-1 line-clamp-2\">\r\n                                  {destination.notes}\r\n                                </p>\r\n                              )}\r\n                              <div className=\"flex items-center space-x-4 mt-2\">\r\n                                {destination.category && (\r\n                                  <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-700\">\r\n                                    {destination.category}\r\n                                  </span>\r\n                                )}\r\n                                {destination.rating && (\r\n                                  <div className=\"flex items-center space-x-1\">\r\n                                    <svg className=\"w-4 h-4 text-yellow-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                                      <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\r\n                                    </svg>\r\n                                    <span className=\"text-sm text-gray-600\">{destination.rating}</span>\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </button>\r\n                        \r\n                        {/* Connector line */}\r\n                        {index < day.destinations.length - 1 && (\r\n                          <div className=\"flex justify-start ml-7\">\r\n                            <div className=\"w-0.5 h-4 bg-gray-300\"></div>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n                \r\n                {/* Add Destination Button */}\r\n                <div className=\"p-4 border-t border-gray-200\">\r\n                  <button\r\n                    onClick={() => onDaySelect(day.day)}\r\n                    className=\"w-full flex items-center justify-center space-x-2 p-3 border-2 border-dashed border-gray-300 rounded-lg hover:border-gray-400 hover:bg-gray-50 transition-colors\"\r\n                  >\r\n                    <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n                    </svg>\r\n                    <span className=\"text-sm text-gray-600\">Add destination</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Footer */}\r\n      <div className=\"p-4 border-t border-gray-200\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n            </svg>\r\n            <span className=\"text-xs text-gray-500\">Click on the map to add destinations</span>\r\n          </div>\r\n          <button className=\"text-xs text-primary-600 hover:text-primary-700\">\r\n            Export\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} "
        }
    ]
}