{
    "sourceFile": "components/trip/ItineraryPanel.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 41,
            "patches": [
                {
                    "date": 1752433683232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752440388566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,27 @@\n \r\n import { useState } from 'react';\r\n import { Trip, Destination, TripDay } from '@/types';\r\n import { format, parseISO } from 'date-fns';\r\n+import {\r\n+  DndContext,\r\n+  closestCenter,\r\n+  KeyboardSensor,\r\n+  PointerSensor,\r\n+  useSensor,\r\n+  useSensors,\r\n+  DragEndEvent,\r\n+} from '@dnd-kit/core';\r\n+import {\r\n+  SortableContext,\r\n+  sortableKeyboardCoordinates,\r\n+  verticalListSortingStrategy,\r\n+  useSortable,\r\n+} from '@dnd-kit/sortable';\r\n+import {\r\n+  CSS,\r\n+} from '@dnd-kit/utilities';\r\n+import { reorderDestinations } from '@/lib/destination-service';\r\n \r\n interface ItineraryPanelProps {\r\n   trip: Trip;\r\n   tripDays: TripDay[];\r\n@@ -13,8 +32,124 @@\n   onDestinationSelect: (destination: Destination) => void;\r\n   onDestinationsChange: (destinations: Destination[]) => void;\r\n }\r\n \r\n+// Sortable destination item component\r\n+function SortableDestination({ \r\n+  destination, \r\n+  dayColor, \r\n+  selectedDestination,\r\n+  onDestinationSelect,\r\n+  isLastItem \r\n+}: {\r\n+  destination: Destination;\r\n+  dayColor: any;\r\n+  selectedDestination: Destination | null;\r\n+  onDestinationSelect: (destination: Destination) => void;\r\n+  isLastItem: boolean;\r\n+}) {\r\n+  const {\r\n+    attributes,\r\n+    listeners,\r\n+    setNodeRef,\r\n+    transform,\r\n+    transition,\r\n+    isDragging,\r\n+  } = useSortable({ id: destination.id });\r\n+\r\n+  const style = {\r\n+    transform: CSS.Transform.toString(transform),\r\n+    transition,\r\n+  };\r\n+\r\n+  const formatTime = (time: string) => {\r\n+    if (!time) return '';\r\n+    try {\r\n+      const [hours, minutes] = time.split(':');\r\n+      const date = new Date();\r\n+      date.setHours(parseInt(hours), parseInt(minutes));\r\n+      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n+    } catch {\r\n+      return time;\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div ref={setNodeRef} style={style} className={isDragging ? 'opacity-50' : ''}>\r\n+      <button\r\n+        onClick={() => onDestinationSelect(destination)}\r\n+        className={`w-full p-4 text-left hover:bg-gray-100 transition-colors ${\r\n+          selectedDestination?.id === destination.id ? 'bg-blue-100' : ''\r\n+        }`}\r\n+      >\r\n+        <div className=\"flex items-start space-x-3\">\r\n+          {/* Drag Handle */}\r\n+          <div \r\n+            {...attributes}\r\n+            {...listeners}\r\n+            className=\"flex-shrink-0 mt-1 cursor-grab active:cursor-grabbing\"\r\n+          >\r\n+            <svg className=\"w-4 h-4 text-gray-400 hover:text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 8h16M4 16h16\" />\r\n+            </svg>\r\n+          </div>\r\n+\r\n+          {/* Pin Number */}\r\n+          <div \r\n+            className=\"w-6 h-6 rounded-full flex items-center justify-center text-white text-xs font-medium flex-shrink-0 mt-0.5\"\r\n+            style={{ backgroundColor: dayColor.pin }}\r\n+          >\r\n+            {destination.orderIndex}\r\n+          </div>\r\n+          \r\n+          <div className=\"flex-1 min-w-0\">\r\n+            <div className=\"flex items-center justify-between\">\r\n+              <h4 className=\"font-medium text-gray-900 truncate\">\r\n+                {destination.locationName}\r\n+              </h4>\r\n+              {destination.startTime && (\r\n+                <span className=\"text-sm text-gray-500 flex-shrink-0 ml-2\">\r\n+                  {formatTime(destination.startTime)}\r\n+                </span>\r\n+              )}\r\n+            </div>\r\n+            <p className=\"text-sm text-gray-600 truncate\">\r\n+              {destination.address}\r\n+            </p>\r\n+            {destination.notes && (\r\n+              <p className=\"text-sm text-gray-500 mt-1 line-clamp-2\">\r\n+                {destination.notes}\r\n+              </p>\r\n+            )}\r\n+            <div className=\"flex items-center space-x-4 mt-2\">\r\n+              {destination.category && (\r\n+                <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-700\">\r\n+                  {destination.category}\r\n+                </span>\r\n+              )}\r\n+              {destination.rating && (\r\n+                <div className=\"flex items-center space-x-1\">\r\n+                  <svg className=\"w-4 h-4 text-yellow-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n+                    <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\r\n+                  </svg>\r\n+                  <span className=\"text-sm text-gray-600\">{destination.rating}</span>\r\n+                </div>\r\n+              )}\r\n+            </div>\r\n+          </div>\r\n+        </div>\r\n+      </button>\r\n+      \r\n+      {/* Connector line */}\r\n+      {!isLastItem && (\r\n+        <div className=\"flex justify-start ml-11\">\r\n+          <div className=\"w-0.5 h-4 bg-gray-300\"></div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n export default function ItineraryPanel({\r\n   trip,\r\n   tripDays,\r\n   selectedDay,\r\n@@ -23,9 +158,21 @@\n   onDestinationSelect,\r\n   onDestinationsChange,\r\n }: ItineraryPanelProps) {\r\n   const [expandedDays, setExpandedDays] = useState<Set<number>>(new Set([1]));\r\n+  const [isReordering, setIsReordering] = useState(false);\r\n \r\n+  const sensors = useSensors(\r\n+    useSensor(PointerSensor, {\r\n+      activationConstraint: {\r\n+        distance: 8,\r\n+      },\r\n+    }),\r\n+    useSensor(KeyboardSensor, {\r\n+      coordinateGetter: sortableKeyboardCoordinates,\r\n+    })\r\n+  );\r\n+\r\n   const toggleDay = (day: number) => {\r\n     const newExpanded = new Set(expandedDays);\r\n     if (newExpanded.has(day)) {\r\n       newExpanded.delete(day);\r\n@@ -35,28 +182,92 @@\n     setExpandedDays(newExpanded);\r\n     onDaySelect(day);\r\n   };\r\n \r\n-  const formatTime = (time: string) => {\r\n-    if (!time) return '';\r\n+  const handleDragEnd = async (event: DragEndEvent) => {\r\n+    const { active, over } = event;\r\n+    \r\n+    if (!over || active.id === over.id) {\r\n+      return;\r\n+    }\r\n+\r\n+    // Find the day that contains the dragged item\r\n+    const draggedDestination = tripDays\r\n+      .flatMap(day => day.destinations)\r\n+      .find(dest => dest.id === active.id);\r\n+    \r\n+    if (!draggedDestination) return;\r\n+\r\n+    const day = tripDays.find(d => d.day === draggedDestination.day);\r\n+    if (!day) return;\r\n+\r\n+    const oldIndex = day.destinations.findIndex(dest => dest.id === active.id);\r\n+    const newIndex = day.destinations.findIndex(dest => dest.id === over.id);\r\n+\r\n+    if (oldIndex === newIndex) return;\r\n+\r\n+    setIsReordering(true);\r\n+\r\n     try {\r\n-      const [hours, minutes] = time.split(':');\r\n-      const date = new Date();\r\n-      date.setHours(parseInt(hours), parseInt(minutes));\r\n-      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n-    } catch {\r\n-      return time;\r\n+      // Create new order array\r\n+      const newDestinations = [...day.destinations];\r\n+      const [movedItem] = newDestinations.splice(oldIndex, 1);\r\n+      newDestinations.splice(newIndex, 0, movedItem);\r\n+\r\n+      // Update order indices\r\n+      const reorderedDestinations = newDestinations.map((dest, index) => ({\r\n+        ...dest,\r\n+        orderIndex: index + 1\r\n+      }));\r\n+\r\n+      // Update local state immediately for better UX\r\n+      const updatedTripDays = tripDays.map(tripDay => {\r\n+        if (tripDay.day === day.day) {\r\n+          return {\r\n+            ...tripDay,\r\n+            destinations: reorderedDestinations\r\n+          };\r\n+        }\r\n+        return tripDay;\r\n+      });\r\n+\r\n+      // Update destinations in parent component\r\n+      const allDestinations = updatedTripDays.flatMap(d => d.destinations);\r\n+      onDestinationsChange(allDestinations);\r\n+\r\n+      // Save to database\r\n+      const destinationIds = reorderedDestinations.map(dest => dest.id);\r\n+      await reorderDestinations(trip.id, day.day, destinationIds);\r\n+\r\n+    } catch (error) {\r\n+      console.error('Error reordering destinations:', error);\r\n+      // Optionally show error message to user\r\n+    } finally {\r\n+      setIsReordering(false);\r\n     }\r\n   };\r\n \r\n   return (\r\n     <div className=\"h-full flex flex-col\">\r\n       {/* Header */}\r\n       <div className=\"p-4 border-b border-gray-200\">\r\n-        <h2 className=\"text-lg font-semibold text-gray-900\">Itinerary</h2>\r\n-        <p className=\"text-sm text-gray-600\">\r\n-          {tripDays.length} days â€¢ {tripDays.reduce((acc, day) => acc + day.destinations.length, 0)} destinations\r\n-        </p>\r\n+        <div className=\"flex items-center justify-between\">\r\n+          <div>\r\n+            <h2 className=\"text-lg font-semibold text-gray-900\">Itinerary</h2>\r\n+            <p className=\"text-sm text-gray-600\">\r\n+              {tripDays.length} days â€¢ {tripDays.reduce((acc, day) => acc + day.destinations.length, 0)} destinations\r\n+            </p>\r\n+          </div>\r\n+          {isReordering && (\r\n+            <div className=\"flex items-center text-sm text-gray-500\">\r\n+              <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n+                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n+                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n+              </svg>\r\n+              Updating...\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n       </div>\r\n \r\n       {/* Days List */}\r\n       <div className=\"flex-1 overflow-y-auto\">\r\n@@ -116,71 +327,31 @@\n                     <p className=\"text-sm\">No destinations added yet</p>\r\n                     <p className=\"text-xs text-gray-400 mt-1\">Click on the map to add destinations</p>\r\n                   </div>\r\n                 ) : (\r\n-                  <div className=\"space-y-0\">\r\n-                    {day.destinations.map((destination, index) => (\r\n-                      <div key={destination.id || index}>\r\n-                        <button\r\n-                          onClick={() => onDestinationSelect(destination)}\r\n-                          className={`w-full p-4 text-left hover:bg-gray-100 transition-colors ${\r\n-                            selectedDestination?.id === destination.id ? 'bg-blue-100' : ''\r\n-                          }`}\r\n-                        >\r\n-                          <div className=\"flex items-start space-x-3\">\r\n-                            <div \r\n-                              className=\"w-6 h-6 rounded-full flex items-center justify-center text-white text-xs font-medium flex-shrink-0 mt-0.5\"\r\n-                              style={{ backgroundColor: day.color.pin }}\r\n-                            >\r\n-                              {destination.orderIndex}\r\n-                            </div>\r\n-                            <div className=\"flex-1 min-w-0\">\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                <h4 className=\"font-medium text-gray-900 truncate\">\r\n-                                  {destination.locationName}\r\n-                                </h4>\r\n-                                {destination.startTime && (\r\n-                                  <span className=\"text-sm text-gray-500 flex-shrink-0 ml-2\">\r\n-                                    {formatTime(destination.startTime)}\r\n-                                  </span>\r\n-                                )}\r\n-                              </div>\r\n-                              <p className=\"text-sm text-gray-600 truncate\">\r\n-                                {destination.address}\r\n-                              </p>\r\n-                              {destination.notes && (\r\n-                                <p className=\"text-sm text-gray-500 mt-1 line-clamp-2\">\r\n-                                  {destination.notes}\r\n-                                </p>\r\n-                              )}\r\n-                              <div className=\"flex items-center space-x-4 mt-2\">\r\n-                                {destination.category && (\r\n-                                  <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-700\">\r\n-                                    {destination.category}\r\n-                                  </span>\r\n-                                )}\r\n-                                {destination.rating && (\r\n-                                  <div className=\"flex items-center space-x-1\">\r\n-                                    <svg className=\"w-4 h-4 text-yellow-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n-                                      <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\r\n-                                    </svg>\r\n-                                    <span className=\"text-sm text-gray-600\">{destination.rating}</span>\r\n-                                  </div>\r\n-                                )}\r\n-                              </div>\r\n-                            </div>\r\n-                          </div>\r\n-                        </button>\r\n-                        \r\n-                        {/* Connector line */}\r\n-                        {index < day.destinations.length - 1 && (\r\n-                          <div className=\"flex justify-start ml-7\">\r\n-                            <div className=\"w-0.5 h-4 bg-gray-300\"></div>\r\n-                          </div>\r\n-                        )}\r\n+                  <DndContext\r\n+                    sensors={sensors}\r\n+                    collisionDetection={closestCenter}\r\n+                    onDragEnd={handleDragEnd}\r\n+                  >\r\n+                    <SortableContext \r\n+                      items={day.destinations.map(dest => dest.id)}\r\n+                      strategy={verticalListSortingStrategy}\r\n+                    >\r\n+                      <div className=\"space-y-0\">\r\n+                        {day.destinations.map((destination, index) => (\r\n+                          <SortableDestination\r\n+                            key={destination.id}\r\n+                            destination={destination}\r\n+                            dayColor={day.color}\r\n+                            selectedDestination={selectedDestination}\r\n+                            onDestinationSelect={onDestinationSelect}\r\n+                            isLastItem={index === day.destinations.length - 1}\r\n+                          />\r\n+                        ))}\r\n                       </div>\r\n-                    ))}\r\n-                  </div>\r\n+                    </SortableContext>\r\n+                  </DndContext>\r\n                 )}\r\n                 \r\n                 {/* Add Destination Button */}\r\n                 <div className=\"p-4 border-t border-gray-200\">\r\n@@ -206,9 +377,12 @@\n           <div className=\"flex items-center space-x-2\">\r\n             <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n               <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n             </svg>\r\n-            <span className=\"text-xs text-gray-500\">Click on the map to add destinations</span>\r\n+            <span className=\"text-xs text-gray-500\">\r\n+              {day.destinations.length > 0 ? 'Drag destinations to reorder â€¢ ' : ''}\r\n+              Click on the map to add destinations\r\n+            </span>\r\n           </div>\r\n           <button className=\"text-xs text-primary-600 hover:text-primary-700\">\r\n             Export\r\n           </button>\r\n"
                },
                {
                    "date": 1752440399077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -378,9 +378,9 @@\n             <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n               <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n             </svg>\r\n             <span className=\"text-xs text-gray-500\">\r\n-              {day.destinations.length > 0 ? 'Drag destinations to reorder â€¢ ' : ''}\r\n+              {tripDays.some(day => day.destinations.length > 0) ? 'Drag destinations to reorder â€¢ ' : ''}\r\n               Click on the map to add destinations\r\n             </span>\r\n           </div>\r\n           <button className=\"text-xs text-primary-600 hover:text-primary-700\">\r\n"
                },
                {
                    "date": 1752442691067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,12 @@\n   PointerSensor,\r\n   useSensor,\r\n   useSensors,\r\n   DragEndEvent,\r\n+  DragOverEvent,\r\n+  DragOverlay,\r\n+  useDraggable,\r\n+  useDroppable,\r\n } from '@dnd-kit/core';\r\n import {\r\n   SortableContext,\r\n   sortableKeyboardCoordinates,\r\n@@ -20,9 +24,9 @@\n } from '@dnd-kit/sortable';\r\n import {\r\n   CSS,\r\n } from '@dnd-kit/utilities';\r\n-import { reorderDestinations } from '@/lib/destination-service';\r\n+import { reorderDestinations, moveDestinationToDay } from '@/lib/destination-service';\r\n \r\n interface ItineraryPanelProps {\r\n   trip: Trip;\r\n   tripDays: TripDay[];\r\n"
                },
                {
                    "date": 1752442724446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,32 @@\n   onDestinationSelect: (destination: Destination) => void;\r\n   onDestinationsChange: (destinations: Destination[]) => void;\r\n }\r\n \r\n+// Droppable day container component\r\n+function DroppableDay({ \r\n+  day, \r\n+  children, \r\n+  isOver \r\n+}: { \r\n+  day: TripDay; \r\n+  children: React.ReactNode;\r\n+  isOver: boolean;\r\n+}) {\r\n+  const { setNodeRef } = useDroppable({\r\n+    id: `day-${day.day}`,\r\n+  });\r\n+\r\n+  return (\r\n+    <div \r\n+      ref={setNodeRef}\r\n+      className={`transition-colors ${isOver ? 'bg-blue-50' : ''}`}\r\n+    >\r\n+      {children}\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n // Sortable destination item component\r\n function SortableDestination({ \r\n   destination, \r\n   dayColor, \r\n"
                },
                {
                    "date": 1752442761182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,8 +187,10 @@\n   onDestinationsChange,\r\n }: ItineraryPanelProps) {\r\n   const [expandedDays, setExpandedDays] = useState<Set<number>>(new Set([1]));\r\n   const [isReordering, setIsReordering] = useState(false);\r\n+  const [activeId, setActiveId] = useState<string | null>(null);\r\n+  const [overId, setOverId] = useState<string | null>(null);\r\n \r\n   const sensors = useSensors(\r\n     useSensor(PointerSensor, {\r\n       activationConstraint: {\r\n@@ -210,66 +212,153 @@\n     setExpandedDays(newExpanded);\r\n     onDaySelect(day);\r\n   };\r\n \r\n+  // Get all destinations for sortable context\r\n+  const allDestinations = tripDays.flatMap(day => day.destinations);\r\n+\r\n+  const handleDragStart = (event: any) => {\r\n+    setActiveId(event.active.id);\r\n+  };\r\n+\r\n+  const handleDragOver = (event: DragOverEvent) => {\r\n+    setOverId(event.over?.id || null);\r\n+  };\r\n+\r\n   const handleDragEnd = async (event: DragEndEvent) => {\r\n     const { active, over } = event;\r\n     \r\n+    setActiveId(null);\r\n+    setOverId(null);\r\n+    \r\n     if (!over || active.id === over.id) {\r\n       return;\r\n     }\r\n \r\n-    // Find the day that contains the dragged item\r\n-    const draggedDestination = tripDays\r\n-      .flatMap(day => day.destinations)\r\n-      .find(dest => dest.id === active.id);\r\n-    \r\n+    const draggedDestination = allDestinations.find(dest => dest.id === active.id);\r\n     if (!draggedDestination) return;\r\n \r\n-    const day = tripDays.find(d => d.day === draggedDestination.day);\r\n-    if (!day) return;\r\n+    setIsReordering(true);\r\n \r\n-    const oldIndex = day.destinations.findIndex(dest => dest.id === active.id);\r\n-    const newIndex = day.destinations.findIndex(dest => dest.id === over.id);\r\n+    try {\r\n+      // Check if we're dropping on a day container or another destination\r\n+      const isDroppedOnDay = over.id.toString().startsWith('day-');\r\n+      \r\n+      if (isDroppedOnDay) {\r\n+        // Cross-day drop - move to end of target day\r\n+        const targetDay = parseInt(over.id.toString().replace('day-', ''));\r\n+        const targetDayData = tripDays.find(d => d.day === targetDay);\r\n+        \r\n+        if (targetDayData && targetDay !== draggedDestination.day) {\r\n+          const newOrderIndex = targetDayData.destinations.length + 1;\r\n+          \r\n+          // Update in database\r\n+          await moveDestinationToDay(draggedDestination.id, targetDay, newOrderIndex);\r\n+          \r\n+          // Update local state\r\n+          const updatedDestination = {\r\n+            ...draggedDestination,\r\n+            day: targetDay,\r\n+            orderIndex: newOrderIndex\r\n+          };\r\n+          \r\n+          const updatedDestinations = allDestinations.map(dest =>\r\n+            dest.id === draggedDestination.id ? updatedDestination : dest\r\n+          );\r\n+          \r\n+          onDestinationsChange(updatedDestinations);\r\n+        }\r\n+      } else {\r\n+        // Same day or destination-to-destination drop\r\n+        const targetDestination = allDestinations.find(dest => dest.id === over.id);\r\n+        if (!targetDestination) return;\r\n \r\n-    if (oldIndex === newIndex) return;\r\n+        const sourceDay = draggedDestination.day;\r\n+        const targetDay = targetDestination.day;\r\n \r\n-    setIsReordering(true);\r\n+        if (sourceDay === targetDay) {\r\n+          // Same day reordering\r\n+          const dayData = tripDays.find(d => d.day === sourceDay);\r\n+          if (!dayData) return;\r\n \r\n-    try {\r\n-      // Create new order array\r\n-      const newDestinations = [...day.destinations];\r\n-      const [movedItem] = newDestinations.splice(oldIndex, 1);\r\n-      newDestinations.splice(newIndex, 0, movedItem);\r\n+          const oldIndex = dayData.destinations.findIndex(dest => dest.id === active.id);\r\n+          const newIndex = dayData.destinations.findIndex(dest => dest.id === over.id);\r\n \r\n-      // Update order indices\r\n-      const reorderedDestinations = newDestinations.map((dest, index) => ({\r\n-        ...dest,\r\n-        orderIndex: index + 1\r\n-      }));\r\n+          if (oldIndex === newIndex) return;\r\n \r\n-      // Update local state immediately for better UX\r\n-      const updatedTripDays = tripDays.map(tripDay => {\r\n-        if (tripDay.day === day.day) {\r\n-          return {\r\n-            ...tripDay,\r\n-            destinations: reorderedDestinations\r\n-          };\r\n-        }\r\n-        return tripDay;\r\n-      });\r\n+          // Create new order array\r\n+          const newDestinations = [...dayData.destinations];\r\n+          const [movedItem] = newDestinations.splice(oldIndex, 1);\r\n+          newDestinations.splice(newIndex, 0, movedItem);\r\n \r\n-      // Update destinations in parent component\r\n-      const allDestinations = updatedTripDays.flatMap(d => d.destinations);\r\n-      onDestinationsChange(allDestinations);\r\n+          // Update order indices\r\n+          const reorderedDestinations = newDestinations.map((dest, index) => ({\r\n+            ...dest,\r\n+            orderIndex: index + 1\r\n+          }));\r\n \r\n-      // Save to database\r\n-      const destinationIds = reorderedDestinations.map(dest => dest.id);\r\n-      await reorderDestinations(trip.id, day.day, destinationIds);\r\n+          // Update destinations in parent component\r\n+          const updatedAllDestinations = allDestinations.map(dest => {\r\n+            const updated = reorderedDestinations.find(rd => rd.id === dest.id);\r\n+            return updated || dest;\r\n+          });\r\n+          \r\n+          onDestinationsChange(updatedAllDestinations);\r\n \r\n+          // Save to database\r\n+          const destinationIds = reorderedDestinations.map(dest => dest.id);\r\n+          await reorderDestinations(trip.id, sourceDay, destinationIds);\r\n+        } else {\r\n+          // Cross-day drop next to specific destination\r\n+          const targetDayData = tripDays.find(d => d.day === targetDay);\r\n+          if (!targetDayData) return;\r\n+\r\n+          const targetIndex = targetDayData.destinations.findIndex(dest => dest.id === over.id);\r\n+          const newOrderIndex = targetIndex + 1;\r\n+\r\n+          // Update in database\r\n+          await moveDestinationToDay(draggedDestination.id, targetDay, newOrderIndex);\r\n+\r\n+          // Reorder existing destinations in target day\r\n+          const updatedTargetDestinations = [...targetDayData.destinations];\r\n+          updatedTargetDestinations.splice(targetIndex + 1, 0, {\r\n+            ...draggedDestination,\r\n+            day: targetDay,\r\n+            orderIndex: newOrderIndex\r\n+          });\r\n+\r\n+          // Update order indices for all destinations in target day\r\n+          const reorderedTargetDestinations = updatedTargetDestinations.map((dest, index) => ({\r\n+            ...dest,\r\n+            orderIndex: index + 1\r\n+          }));\r\n+\r\n+          // Update local state\r\n+          const updatedDestinations = allDestinations\r\n+            .filter(dest => dest.id !== draggedDestination.id) // Remove from source\r\n+            .map(dest => {\r\n+              // Update target day destinations\r\n+              if (dest.day === targetDay) {\r\n+                const updated = reorderedTargetDestinations.find(rd => rd.id === dest.id);\r\n+                return updated || dest;\r\n+              }\r\n+              return dest;\r\n+            })\r\n+            .concat([{\r\n+              ...draggedDestination,\r\n+              day: targetDay,\r\n+              orderIndex: newOrderIndex\r\n+            }]);\r\n+\r\n+          onDestinationsChange(updatedDestinations);\r\n+\r\n+          // Reorder target day in database\r\n+          const targetDayIds = reorderedTargetDestinations.map(dest => dest.id);\r\n+          await reorderDestinations(trip.id, targetDay, targetDayIds);\r\n+        }\r\n+      }\r\n     } catch (error) {\r\n-      console.error('Error reordering destinations:', error);\r\n-      // Optionally show error message to user\r\n+      console.error('Error handling drag:', error);\r\n     } finally {\r\n       setIsReordering(false);\r\n     }\r\n   };\r\n@@ -359,8 +448,10 @@\n                   <DndContext\r\n                     sensors={sensors}\r\n                     collisionDetection={closestCenter}\r\n                     onDragEnd={handleDragEnd}\r\n+                    onDragStart={handleDragStart}\r\n+                    onDragOver={handleDragOver}\r\n                   >\r\n                     <SortableContext \r\n                       items={day.destinations.map(dest => dest.id)}\r\n                       strategy={verticalListSortingStrategy}\r\n"
                },
                {
                    "date": 1752442774796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n   DragOverEvent,\r\n   DragOverlay,\r\n   useDraggable,\r\n   useDroppable,\r\n+  UniqueIdentifier,\r\n } from '@dnd-kit/core';\r\n import {\r\n   SortableContext,\r\n   sortableKeyboardCoordinates,\r\n@@ -188,9 +189,9 @@\n }: ItineraryPanelProps) {\r\n   const [expandedDays, setExpandedDays] = useState<Set<number>>(new Set([1]));\r\n   const [isReordering, setIsReordering] = useState(false);\r\n   const [activeId, setActiveId] = useState<string | null>(null);\r\n-  const [overId, setOverId] = useState<string | null>(null);\r\n+  const [overId, setOverId] = useState<UniqueIdentifier | null>(null);\r\n \r\n   const sensors = useSensors(\r\n     useSensor(PointerSensor, {\r\n       activationConstraint: {\r\n"
                },
                {
                    "date": 1752442812633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,110 +386,116 @@\n           )}\r\n         </div>\r\n       </div>\r\n \r\n-      {/* Days List */}\r\n+      {/* Days List with Cross-Day Dragging */}\r\n       <div className=\"flex-1 overflow-y-auto\">\r\n-        {tripDays.map((day) => (\r\n-          <div key={day.day} className=\"border-b border-gray-100 last:border-b-0\">\r\n-            {/* Day Header */}\r\n-            <button\r\n-              onClick={() => toggleDay(day.day)}\r\n-              className={`w-full p-4 text-left hover:bg-gray-50 transition-colors ${\r\n-                selectedDay === day.day ? 'bg-blue-50' : ''\r\n-              }`}\r\n-            >\r\n-              <div className=\"flex items-center justify-between\">\r\n-                <div className=\"flex items-center space-x-3\">\r\n-                  <div \r\n-                    className={`w-6 h-6 rounded-full flex items-center justify-center text-white text-sm font-medium`}\r\n-                    style={{ backgroundColor: day.color.pin }}\r\n-                  >\r\n-                    {day.day}\r\n+        <DndContext\r\n+          sensors={sensors}\r\n+          collisionDetection={closestCenter}\r\n+          onDragStart={handleDragStart}\r\n+          onDragOver={handleDragOver}\r\n+          onDragEnd={handleDragEnd}\r\n+        >\r\n+          <SortableContext \r\n+            items={allDestinations.map(dest => dest.id)}\r\n+            strategy={verticalListSortingStrategy}\r\n+          >\r\n+            {tripDays.map((day) => (\r\n+              <div key={day.day} className=\"border-b border-gray-100 last:border-b-0\">\r\n+                {/* Day Header */}\r\n+                <button\r\n+                  onClick={() => toggleDay(day.day)}\r\n+                  className={`w-full p-4 text-left hover:bg-gray-50 transition-colors ${\r\n+                    selectedDay === day.day ? 'bg-blue-50' : ''\r\n+                  }`}\r\n+                >\r\n+                  <div className=\"flex items-center justify-between\">\r\n+                    <div className=\"flex items-center space-x-3\">\r\n+                      <div \r\n+                        className={`w-6 h-6 rounded-full flex items-center justify-center text-white text-sm font-medium`}\r\n+                        style={{ backgroundColor: day.color.pin }}\r\n+                      >\r\n+                        {day.day}\r\n+                      </div>\r\n+                      <div>\r\n+                        <h3 className=\"font-medium text-gray-900\">\r\n+                          Day {day.day}\r\n+                        </h3>\r\n+                        <p className=\"text-sm text-gray-600\">\r\n+                          {format(parseISO(day.date), 'MMM d, yyyy')}\r\n+                        </p>\r\n+                      </div>\r\n+                    </div>\r\n+                    <div className=\"flex items-center space-x-2\">\r\n+                      <span className=\"text-sm text-gray-500\">\r\n+                        {day.destinations.length} stops\r\n+                      </span>\r\n+                      <svg \r\n+                        className={`w-4 h-4 text-gray-400 transition-transform ${\r\n+                          expandedDays.has(day.day) ? 'rotate-180' : ''\r\n+                        }`}\r\n+                        fill=\"none\" \r\n+                        stroke=\"currentColor\" \r\n+                        viewBox=\"0 0 24 24\"\r\n+                      >\r\n+                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n+                      </svg>\r\n+                    </div>\r\n                   </div>\r\n-                  <div>\r\n-                    <h3 className=\"font-medium text-gray-900\">\r\n-                      Day {day.day}\r\n-                    </h3>\r\n-                    <p className=\"text-sm text-gray-600\">\r\n-                      {format(parseISO(day.date), 'MMM d, yyyy')}\r\n-                    </p>\r\n-                  </div>\r\n-                </div>\r\n-                <div className=\"flex items-center space-x-2\">\r\n-                  <span className=\"text-sm text-gray-500\">\r\n-                    {day.destinations.length} stops\r\n-                  </span>\r\n-                  <svg \r\n-                    className={`w-4 h-4 text-gray-400 transition-transform ${\r\n-                      expandedDays.has(day.day) ? 'rotate-180' : ''\r\n-                    }`}\r\n-                    fill=\"none\" \r\n-                    stroke=\"currentColor\" \r\n-                    viewBox=\"0 0 24 24\"\r\n-                  >\r\n-                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n-                  </svg>\r\n-                </div>\r\n-              </div>\r\n-            </button>\r\n+                </button>\r\n \r\n-            {/* Destinations List */}\r\n-            {expandedDays.has(day.day) && (\r\n-              <div className=\"bg-gray-50\">\r\n-                {day.destinations.length === 0 ? (\r\n-                  <div className=\"p-4 text-center text-gray-500\">\r\n-                    <svg className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\r\n-                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n-                    </svg>\r\n-                    <p className=\"text-sm\">No destinations added yet</p>\r\n-                    <p className=\"text-xs text-gray-400 mt-1\">Click on the map to add destinations</p>\r\n-                  </div>\r\n-                ) : (\r\n-                  <DndContext\r\n-                    sensors={sensors}\r\n-                    collisionDetection={closestCenter}\r\n-                    onDragEnd={handleDragEnd}\r\n-                    onDragStart={handleDragStart}\r\n-                    onDragOver={handleDragOver}\r\n+                {/* Day Content */}\r\n+                {expandedDays.has(day.day) && (\r\n+                  <DroppableDay \r\n+                    day={day} \r\n+                    isOver={overId === `day-${day.day}`}\r\n                   >\r\n-                    <SortableContext \r\n-                      items={day.destinations.map(dest => dest.id)}\r\n-                      strategy={verticalListSortingStrategy}\r\n-                    >\r\n-                      <div className=\"space-y-0\">\r\n-                        {day.destinations.map((destination, index) => (\r\n-                          <SortableDestination\r\n-                            key={destination.id}\r\n-                            destination={destination}\r\n-                            dayColor={day.color}\r\n-                            selectedDestination={selectedDestination}\r\n-                            onDestinationSelect={onDestinationSelect}\r\n-                            isLastItem={index === day.destinations.length - 1}\r\n-                          />\r\n-                        ))}\r\n+                    <div className=\"bg-gray-50\">\r\n+                      {day.destinations.length === 0 ? (\r\n+                        <div className=\"p-4 text-center text-gray-500\">\r\n+                          <svg className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\r\n+                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n+                          </svg>\r\n+                          <p className=\"text-sm\">No destinations added yet</p>\r\n+                          <p className=\"text-xs text-gray-400 mt-1\">Click on the map to add destinations</p>\r\n+                          <p className=\"text-xs text-blue-500 mt-1\">Drag destinations from other days here</p>\r\n+                        </div>\r\n+                      ) : (\r\n+                        <div className=\"space-y-0\">\r\n+                          {day.destinations.map((destination, index) => (\r\n+                            <SortableDestination\r\n+                              key={destination.id}\r\n+                              destination={destination}\r\n+                              dayColor={day.color}\r\n+                              selectedDestination={selectedDestination}\r\n+                              onDestinationSelect={onDestinationSelect}\r\n+                              isLastItem={index === day.destinations.length - 1}\r\n+                            />\r\n+                          ))}\r\n+                        </div>\r\n+                      )}\r\n+                      \r\n+                      {/* Add Destination Button */}\r\n+                      <div className=\"p-4 border-t border-gray-200\">\r\n+                        <button\r\n+                          onClick={() => onDaySelect(day.day)}\r\n+                          className=\"w-full flex items-center justify-center space-x-2 p-3 border-2 border-dashed border-gray-300 rounded-lg hover:border-gray-400 hover:bg-gray-50 transition-colors\"\r\n+                        >\r\n+                          <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n+                          </svg>\r\n+                          <span className=\"text-sm text-gray-600\">Add destination</span>\r\n+                        </button>\r\n                       </div>\r\n-                    </SortableContext>\r\n-                  </DndContext>\r\n+                    </div>\r\n+                  </DroppableDay>\r\n                 )}\r\n-                \r\n-                {/* Add Destination Button */}\r\n-                <div className=\"p-4 border-t border-gray-200\">\r\n-                  <button\r\n-                    onClick={() => onDaySelect(day.day)}\r\n-                    className=\"w-full flex items-center justify-center space-x-2 p-3 border-2 border-dashed border-gray-300 rounded-lg hover:border-gray-400 hover:bg-gray-50 transition-colors\"\r\n-                  >\r\n-                    <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n-                    </svg>\r\n-                    <span className=\"text-sm text-gray-600\">Add destination</span>\r\n-                  </button>\r\n-                </div>\r\n               </div>\r\n-            )}\r\n-          </div>\r\n-        ))}\r\n+            ))}\r\n+          </SortableContext>\r\n+        </DndContext>\r\n       </div>\r\n \r\n       {/* Footer */}\r\n       <div className=\"p-4 border-t border-gray-200\">\r\n@@ -498,9 +504,9 @@\n             <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n               <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n             </svg>\r\n             <span className=\"text-xs text-gray-500\">\r\n-              {tripDays.some(day => day.destinations.length > 0) ? 'Drag destinations to reorder â€¢ ' : ''}\r\n+              {tripDays.some(day => day.destinations.length > 0) ? 'Drag destinations to reorder or move between days â€¢ ' : ''}\r\n               Click on the map to add destinations\r\n             </span>\r\n           </div>\r\n           <button className=\"text-xs text-primary-600 hover:text-primary-700\">\r\n"
                },
                {
                    "date": 1752443267959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \r\n import { useState } from 'react';\r\n import { Trip, Destination, TripDay } from '@/types';\r\n import { format, parseISO } from 'date-fns';\r\n+import LocationSearch from './LocationSearch';\r\n import {\r\n   DndContext,\r\n   closestCenter,\r\n   KeyboardSensor,\r\n"
                },
                {
                    "date": 1752443278885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n   selectedDestination: Destination | null;\r\n   onDaySelect: (day: number) => void;\r\n   onDestinationSelect: (destination: Destination) => void;\r\n   onDestinationsChange: (destinations: Destination[]) => void;\r\n+  onLocationSelect: (destination: Destination) => void;\r\n }\r\n \r\n // Droppable day container component\r\n function DroppableDay({ \r\n"
                },
                {
                    "date": 1752443286959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,8 +187,9 @@\n   selectedDestination,\r\n   onDaySelect,\r\n   onDestinationSelect,\r\n   onDestinationsChange,\r\n+  onLocationSelect,\r\n }: ItineraryPanelProps) {\r\n   const [expandedDays, setExpandedDays] = useState<Set<number>>(new Set([1]));\r\n   const [isReordering, setIsReordering] = useState(false);\r\n   const [activeId, setActiveId] = useState<string | null>(null);\r\n"
                },
                {
                    "date": 1752443300604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -478,19 +478,33 @@\n                           ))}\r\n                         </div>\r\n                       )}\r\n                       \r\n-                      {/* Add Destination Button */}\r\n+                      {/* Add Destination - Location Search */}\r\n                       <div className=\"p-4 border-t border-gray-200\">\r\n-                        <button\r\n-                          onClick={() => onDaySelect(day.day)}\r\n-                          className=\"w-full flex items-center justify-center space-x-2 p-3 border-2 border-dashed border-gray-300 rounded-lg hover:border-gray-400 hover:bg-gray-50 transition-colors\"\r\n-                        >\r\n-                          <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n-                          </svg>\r\n-                          <span className=\"text-sm text-gray-600\">Add destination</span>\r\n-                        </button>\r\n+                        <LocationSearch\r\n+                          onLocationSelect={(destination) => {\r\n+                            // Set the destination's day and order index\r\n+                            const updatedDestination = {\r\n+                              ...destination,\r\n+                              day: day.day,\r\n+                              orderIndex: day.destinations.length + 1,\r\n+                            };\r\n+                            onLocationSelect(updatedDestination);\r\n+                            onDaySelect(day.day);\r\n+                          }}\r\n+                          selectedDay={day.day}\r\n+                          tripId={trip.id}\r\n+                          placeholder={`Search places for Day ${day.day}...`}\r\n+                          className=\"w-full\"\r\n+                        />\r\n+                        \r\n+                        {/* Alternative: Click on map hint */}\r\n+                        <div className=\"mt-2 text-center\">\r\n+                          <span className=\"text-xs text-gray-500\">\r\n+                            or click on the map to add a destination\r\n+                          </span>\r\n+                        </div>\r\n                       </div>\r\n                     </div>\r\n                   </DroppableDay>\r\n                 )}\r\n"
                },
                {
                    "date": 1752479614776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,25 +252,30 @@\n         const targetDay = parseInt(over.id.toString().replace('day-', ''));\r\n         const targetDayData = tripDays.find(d => d.day === targetDay);\r\n         \r\n         if (targetDayData && targetDay !== draggedDestination.day) {\r\n+          // Calculate proper sequential order index\r\n           const newOrderIndex = targetDayData.destinations.length + 1;\r\n           \r\n           // Update in database\r\n           await moveDestinationToDay(draggedDestination.id, targetDay, newOrderIndex);\r\n           \r\n-          // Update local state\r\n-          const updatedDestination = {\r\n-            ...draggedDestination,\r\n-            day: targetDay,\r\n-            orderIndex: newOrderIndex\r\n-          };\r\n+          // Create updated destinations with proper renumbering\r\n+          const updatedDestinations = allDestinations.map(dest => {\r\n+            if (dest.id === draggedDestination.id) {\r\n+              return {\r\n+                ...dest,\r\n+                day: targetDay,\r\n+                orderIndex: newOrderIndex\r\n+              };\r\n+            }\r\n+            return dest;\r\n+          });\r\n+\r\n+          // Renumber all destinations in both source and target days\r\n+          const finalDestinations = renumberDestinationsInDays(updatedDestinations, [draggedDestination.day, targetDay]);\r\n           \r\n-          const updatedDestinations = allDestinations.map(dest =>\r\n-            dest.id === draggedDestination.id ? updatedDestination : dest\r\n-          );\r\n-          \r\n-          onDestinationsChange(updatedDestinations);\r\n+          onDestinationsChange(finalDestinations);\r\n         }\r\n       } else {\r\n         // Same day or destination-to-destination drop\r\n         const targetDestination = allDestinations.find(dest => dest.id === over.id);\r\n@@ -293,9 +298,9 @@\n           const newDestinations = [...dayData.destinations];\r\n           const [movedItem] = newDestinations.splice(oldIndex, 1);\r\n           newDestinations.splice(newIndex, 0, movedItem);\r\n \r\n-          // Update order indices\r\n+          // Update order indices sequentially\r\n           const reorderedDestinations = newDestinations.map((dest, index) => ({\r\n             ...dest,\r\n             orderIndex: index + 1\r\n           }));\r\n@@ -316,48 +321,47 @@\n           const targetDayData = tripDays.find(d => d.day === targetDay);\r\n           if (!targetDayData) return;\r\n \r\n           const targetIndex = targetDayData.destinations.findIndex(dest => dest.id === over.id);\r\n-          const newOrderIndex = targetIndex + 1;\r\n-\r\n-          // Update in database\r\n-          await moveDestinationToDay(draggedDestination.id, targetDay, newOrderIndex);\r\n-\r\n-          // Reorder existing destinations in target day\r\n+          \r\n+          // Insert the destination at the target position\r\n           const updatedTargetDestinations = [...targetDayData.destinations];\r\n           updatedTargetDestinations.splice(targetIndex + 1, 0, {\r\n             ...draggedDestination,\r\n             day: targetDay,\r\n-            orderIndex: newOrderIndex\r\n+            orderIndex: targetIndex + 2 // Temporary index, will be renumbered\r\n           });\r\n \r\n-          // Update order indices for all destinations in target day\r\n-          const reorderedTargetDestinations = updatedTargetDestinations.map((dest, index) => ({\r\n-            ...dest,\r\n-            orderIndex: index + 1\r\n-          }));\r\n+          // Update in database with proper order index\r\n+          await moveDestinationToDay(draggedDestination.id, targetDay, targetIndex + 2);\r\n \r\n-          // Update local state\r\n+          // Create updated destinations array\r\n           const updatedDestinations = allDestinations\r\n             .filter(dest => dest.id !== draggedDestination.id) // Remove from source\r\n             .map(dest => {\r\n               // Update target day destinations\r\n               if (dest.day === targetDay) {\r\n-                const updated = reorderedTargetDestinations.find(rd => rd.id === dest.id);\r\n+                const updated = updatedTargetDestinations.find(rd => rd.id === dest.id);\r\n                 return updated || dest;\r\n               }\r\n               return dest;\r\n             })\r\n             .concat([{\r\n               ...draggedDestination,\r\n               day: targetDay,\r\n-              orderIndex: newOrderIndex\r\n+              orderIndex: targetIndex + 2 // Temporary, will be renumbered\r\n             }]);\r\n \r\n-          onDestinationsChange(updatedDestinations);\r\n+          // Renumber all destinations in both affected days\r\n+          const finalDestinations = renumberDestinationsInDays(updatedDestinations, [sourceDay, targetDay]);\r\n+          \r\n+          onDestinationsChange(finalDestinations);\r\n \r\n-          // Reorder target day in database\r\n-          const targetDayIds = reorderedTargetDestinations.map(dest => dest.id);\r\n+          // Reorder target day in database with proper sequential IDs\r\n+          const targetDayDestinations = finalDestinations.filter(dest => dest.day === targetDay);\r\n+          const targetDayIds = targetDayDestinations\r\n+            .sort((a, b) => (a.orderIndex || 0) - (b.orderIndex || 0))\r\n+            .map(dest => dest.id);\r\n           await reorderDestinations(trip.id, targetDay, targetDayIds);\r\n         }\r\n       }\r\n     } catch (error) {\r\n@@ -366,8 +370,29 @@\n       setIsReordering(false);\r\n     }\r\n   };\r\n \r\n+  // Helper function to renumber destinations sequentially within specified days\r\n+  const renumberDestinationsInDays = (destinations: Destination[], daysToRenumber: number[]): Destination[] => {\r\n+    return destinations.map(dest => {\r\n+      if (daysToRenumber.includes(dest.day)) {\r\n+        // Get all destinations for this day and sort by current order\r\n+        const dayDestinations = destinations\r\n+          .filter(d => d.day === dest.day)\r\n+          .sort((a, b) => (a.orderIndex || 0) - (b.orderIndex || 0));\r\n+        \r\n+        // Find the new sequential index\r\n+        const newIndex = dayDestinations.findIndex(d => d.id === dest.id) + 1;\r\n+        \r\n+        return {\r\n+          ...dest,\r\n+          orderIndex: newIndex\r\n+        };\r\n+      }\r\n+      return dest;\r\n+    });\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"h-full flex flex-col\">\r\n       {/* Header */}\r\n       <div className=\"p-4 border-b border-gray-200\">\r\n"
                },
                {
                    "date": 1752479732221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,8 +150,23 @@\n               <p className=\"text-sm text-gray-500 mt-1 line-clamp-2\">\r\n                 {destination.notes}\r\n               </p>\r\n             )}\r\n+            \r\n+            {/* Photo display */}\r\n+            {destination.photos && destination.photos.length > 0 && (\r\n+              <div className=\"mt-2\">\r\n+                <img \r\n+                  src={destination.photos[0]} \r\n+                  alt={destination.locationName}\r\n+                  className=\"w-full h-24 object-cover rounded-lg\"\r\n+                  onError={(e) => {\r\n+                    (e.target as HTMLImageElement).style.display = 'none';\r\n+                  }}\r\n+                />\r\n+              </div>\r\n+            )}\r\n+            \r\n             <div className=\"flex items-center space-x-4 mt-2\">\r\n               {destination.category && (\r\n                 <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-700\">\r\n                   {destination.category}\r\n"
                },
                {
                    "date": 1752479963949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,9 @@\n   onDaySelect: (day: number) => void;\r\n   onDestinationSelect: (destination: Destination) => void;\r\n   onDestinationsChange: (destinations: Destination[]) => void;\r\n   onLocationSelect: (destination: Destination) => void;\r\n+  onDestinationDelete: (destinationId: string) => void;\r\n }\r\n \r\n // Droppable day container component\r\n function DroppableDay({ \r\n"
                },
                {
                    "date": 1752479974244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,8 +204,9 @@\n   onDaySelect,\r\n   onDestinationSelect,\r\n   onDestinationsChange,\r\n   onLocationSelect,\r\n+  onDestinationDelete,\r\n }: ItineraryPanelProps) {\r\n   const [expandedDays, setExpandedDays] = useState<Set<number>>(new Set([1]));\r\n   const [isReordering, setIsReordering] = useState(false);\r\n   const [activeId, setActiveId] = useState<string | null>(null);\r\n"
                },
                {
                    "date": 1752479982943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -514,8 +514,9 @@\n                               destination={destination}\r\n                               dayColor={day.color}\r\n                               selectedDestination={selectedDestination}\r\n                               onDestinationSelect={onDestinationSelect}\r\n+                              onDestinationDelete={onDestinationDelete}\r\n                               isLastItem={index === day.destinations.length - 1}\r\n                             />\r\n                           ))}\r\n                         </div>\r\n"
                },
                {
                    "date": 1752479990565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,14 +70,16 @@\n   destination, \r\n   dayColor, \r\n   selectedDestination,\r\n   onDestinationSelect,\r\n+  onDestinationDelete,\r\n   isLastItem \r\n }: {\r\n   destination: Destination;\r\n   dayColor: any;\r\n   selectedDestination: Destination | null;\r\n   onDestinationSelect: (destination: Destination) => void;\r\n+  onDestinationDelete: (destinationId: string) => void;\r\n   isLastItem: boolean;\r\n }) {\r\n   const {\r\n     attributes,\r\n"
                },
                {
                    "date": 1752480005629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,13 +139,27 @@\n             <div className=\"flex items-center justify-between\">\r\n               <h4 className=\"font-medium text-gray-900 truncate\">\r\n                 {destination.locationName}\r\n               </h4>\r\n-              {destination.startTime && (\r\n-                <span className=\"text-sm text-gray-500 flex-shrink-0 ml-2\">\r\n-                  {formatTime(destination.startTime)}\r\n-                </span>\r\n-              )}\r\n+              <div className=\"flex items-center space-x-2\">\r\n+                {destination.startTime && (\r\n+                  <span className=\"text-sm text-gray-500 flex-shrink-0\">\r\n+                    {formatTime(destination.startTime)}\r\n+                  </span>\r\n+                )}\r\n+                <button\r\n+                  onClick={(e) => {\r\n+                    e.stopPropagation();\r\n+                    onDestinationDelete(destination.id);\r\n+                  }}\r\n+                  className=\"text-red-500 hover:text-red-700 hover:bg-red-50 rounded-lg p-1 transition-colors opacity-0 group-hover:opacity-100 flex-shrink-0\"\r\n+                  title=\"Delete destination\"\r\n+                >\r\n+                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n+                  </svg>\r\n+                </button>\r\n+              </div>\r\n             </div>\r\n             <p className=\"text-sm text-gray-600 truncate\">\r\n               {destination.address}\r\n             </p>\r\n"
                },
                {
                    "date": 1752480014678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n   return (\r\n     <div ref={setNodeRef} style={style} className={isDragging ? 'opacity-50' : ''}>\r\n       <button\r\n         onClick={() => onDestinationSelect(destination)}\r\n-        className={`w-full p-4 text-left hover:bg-gray-100 transition-colors ${\r\n+        className={`w-full p-4 text-left hover:bg-gray-100 transition-colors group ${\r\n           selectedDestination?.id === destination.id ? 'bg-blue-100' : ''\r\n         }`}\r\n       >\r\n         <div className=\"flex items-start space-x-3\">\r\n"
                },
                {
                    "date": 1752480982339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,14 +126,32 @@\n               <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 8h16M4 16h16\" />\r\n             </svg>\r\n           </div>\r\n \r\n-          {/* Pin Number */}\r\n-          <div \r\n-            className=\"w-6 h-6 rounded-full flex items-center justify-center text-white text-xs font-medium flex-shrink-0 mt-0.5\"\r\n-            style={{ backgroundColor: dayColor.pin }}\r\n-          >\r\n-            {destination.orderIndex}\r\n+          {/* Pin Number - Teardrop shape matching map */}\r\n+          <div className=\"flex-shrink-0 mt-0.5\">\r\n+            <svg \r\n+              width=\"24\" \r\n+              height=\"24\" \r\n+              viewBox=\"0 0 24 24\" \r\n+              className=\"w-6 h-6\"\r\n+            >\r\n+              <path \r\n+                d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7z\"\r\n+                fill={dayColor.pin}\r\n+                stroke=\"#FFFFFF\"\r\n+                strokeWidth=\"2\"\r\n+              />\r\n+              <text \r\n+                x=\"12\" \r\n+                y=\"13\" \r\n+                textAnchor=\"middle\" \r\n+                className=\"text-white text-xs font-medium fill-current\"\r\n+                style={{ fontSize: '12px' }}\r\n+              >\r\n+                {destination.orderIndex}\r\n+              </text>\r\n+            </svg>\r\n           </div>\r\n           \r\n           <div className=\"flex-1 min-w-0\">\r\n             <div className=\"flex items-center justify-between\">\r\n"
                },
                {
                    "date": 1752480993044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -488,15 +488,33 @@\n                     selectedDay === day.day ? 'bg-blue-50' : ''\r\n                   }`}\r\n                 >\r\n                   <div className=\"flex items-center justify-between\">\r\n-                    <div className=\"flex items-center space-x-3\">\r\n-                      <div \r\n-                        className={`w-6 h-6 rounded-full flex items-center justify-center text-white text-sm font-medium`}\r\n-                        style={{ backgroundColor: day.color.pin }}\r\n+                                      <div className=\"flex items-center space-x-3\">\r\n+                    <div>\r\n+                      <svg \r\n+                        width=\"24\" \r\n+                        height=\"24\" \r\n+                        viewBox=\"0 0 24 24\" \r\n+                        className=\"w-6 h-6\"\r\n                       >\r\n-                        {day.day}\r\n-                      </div>\r\n+                        <path \r\n+                          d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7z\"\r\n+                          fill={day.color.pin}\r\n+                          stroke=\"#FFFFFF\"\r\n+                          strokeWidth=\"2\"\r\n+                        />\r\n+                        <text \r\n+                          x=\"12\" \r\n+                          y=\"13\" \r\n+                          textAnchor=\"middle\" \r\n+                          className=\"text-white text-sm font-medium fill-current\"\r\n+                          style={{ fontSize: '14px' }}\r\n+                        >\r\n+                          {day.day}\r\n+                        </text>\r\n+                      </svg>\r\n+                    </div>\r\n                       <div>\r\n                         <h3 className=\"font-medium text-gray-900\">\r\n                           Day {day.day}\r\n                         </h3>\r\n"
                },
                {
                    "date": 1752491364244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { useState } from 'react';\r\n import { Trip, Destination, TripDay } from '@/types';\r\n import { format, parseISO } from 'date-fns';\r\n import LocationSearch from './LocationSearch';\r\n+import SmartRecommendations from './SmartRecommendations';\r\n import {\r\n   DndContext,\r\n   closestCenter,\r\n   KeyboardSensor,\r\n"
                },
                {
                    "date": 1752491386241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -609,8 +609,17 @@\n           </SortableContext>\r\n         </DndContext>\r\n       </div>\r\n \r\n+      {/* Smart Recommendations */}\r\n+      <SmartRecommendations\r\n+        trip={trip}\r\n+        tripDays={tripDays}\r\n+        selectedDay={selectedDay}\r\n+        onDestinationAdd={onLocationSelect}\r\n+        existingDestinations={tripDays.flatMap(day => day.destinations)}\r\n+      />\r\n+\r\n       {/* Footer */}\r\n       <div className=\"p-4 border-t border-gray-200\">\r\n         <div className=\"flex items-center justify-between\">\r\n           <div className=\"flex items-center space-x-2\">\r\n"
                },
                {
                    "date": 1752492178812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,14 +107,16 @@\n       return time;\r\n     }\r\n   };\r\n \r\n+  const isSelected = selectedDestination?.id === destination.id;\r\n+\r\n   return (\r\n     <div ref={setNodeRef} style={style} className={isDragging ? 'opacity-50' : ''}>\r\n       <button\r\n         onClick={() => onDestinationSelect(destination)}\r\n-        className={`w-full p-4 text-left hover:bg-gray-100 transition-colors group ${\r\n-          selectedDestination?.id === destination.id ? 'bg-blue-100' : ''\r\n+        className={`w-full p-4 text-left hover:bg-gray-100 transition-colors group relative ${\r\n+          isSelected ? 'bg-blue-50 border-l-4 border-blue-500' : ''\r\n         }`}\r\n       >\r\n         <div className=\"flex items-start space-x-3\">\r\n           {/* Drag Handle */}\r\n@@ -137,9 +139,9 @@\n               className=\"w-6 h-6\"\r\n             >\r\n               <path \r\n                 d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7z\"\r\n-                fill={dayColor.pin}\r\n+                fill={isSelected ? '#3B82F6' : dayColor.pin}\r\n                 stroke=\"#FFFFFF\"\r\n                 strokeWidth=\"2\"\r\n               />\r\n               <text \r\n@@ -155,11 +157,24 @@\n           </div>\r\n           \r\n           <div className=\"flex-1 min-w-0\">\r\n             <div className=\"flex items-center justify-between\">\r\n-              <h4 className=\"font-medium text-gray-900 truncate\">\r\n-                {destination.locationName}\r\n-              </h4>\r\n+              <div className=\"flex items-center space-x-2 min-w-0\">\r\n+                <h4 className=\"font-medium text-gray-900 truncate\">\r\n+                  {destination.locationName}\r\n+                </h4>\r\n+                {/* Compact photo for selected destinations */}\r\n+                {isSelected && destination.photos && destination.photos.length > 0 && (\r\n+                  <img \r\n+                    src={destination.photos[0]} \r\n+                    alt={destination.locationName}\r\n+                    className=\"w-8 h-8 object-cover rounded-lg flex-shrink-0\"\r\n+                    onError={(e) => {\r\n+                      (e.target as HTMLImageElement).style.display = 'none';\r\n+                    }}\r\n+                  />\r\n+                )}\r\n+              </div>\r\n               <div className=\"flex items-center space-x-2\">\r\n                 {destination.startTime && (\r\n                   <span className=\"text-sm text-gray-500 flex-shrink-0\">\r\n                     {formatTime(destination.startTime)}\r\n@@ -187,37 +202,39 @@\n                 {destination.notes}\r\n               </p>\r\n             )}\r\n             \r\n-            {/* Photo display */}\r\n-            {destination.photos && destination.photos.length > 0 && (\r\n-              <div className=\"mt-2\">\r\n-                <img \r\n-                  src={destination.photos[0]} \r\n-                  alt={destination.locationName}\r\n-                  className=\"w-full h-24 object-cover rounded-lg\"\r\n-                  onError={(e) => {\r\n-                    (e.target as HTMLImageElement).style.display = 'none';\r\n+            {/* Compact details for selected destinations */}\r\n+            {isSelected && (\r\n+              <div className=\"flex items-center space-x-4 mt-2 text-xs\">\r\n+                {destination.category && (\r\n+                  <span className=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\r\n+                    {destination.category}\r\n+                  </span>\r\n+                )}\r\n+                {destination.rating && (\r\n+                  <div className=\"flex items-center space-x-1\">\r\n+                    <svg className=\"w-3 h-3 text-yellow-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n+                      <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\r\n+                    </svg>\r\n+                    <span className=\"text-gray-600\">{destination.rating}</span>\r\n+                  </div>\r\n+                )}\r\n+                {/* Close button for selected destinations */}\r\n+                <button\r\n+                  onClick={(e) => {\r\n+                    e.stopPropagation();\r\n+                    onDestinationSelect(null as any);\r\n                   }}\r\n-                />\r\n+                  className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n+                  title=\"Clear selection\"\r\n+                >\r\n+                  <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n+                  </svg>\r\n+                </button>\r\n               </div>\r\n             )}\r\n-            \r\n-            <div className=\"flex items-center space-x-4 mt-2\">\r\n-              {destination.category && (\r\n-                <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-700\">\r\n-                  {destination.category}\r\n-                </span>\r\n-              )}\r\n-              {destination.rating && (\r\n-                <div className=\"flex items-center space-x-1\">\r\n-                  <svg className=\"w-4 h-4 text-yellow-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n-                    <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\r\n-                  </svg>\r\n-                  <span className=\"text-sm text-gray-600\">{destination.rating}</span>\r\n-                </div>\r\n-              )}\r\n-            </div>\r\n           </div>\r\n         </div>\r\n       </button>\r\n       \r\n"
                },
                {
                    "date": 1752493948096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -497,75 +497,58 @@\n             items={allDestinations.map(dest => dest.id)}\r\n             strategy={verticalListSortingStrategy}\r\n           >\r\n             {tripDays.map((day) => (\r\n-              <div key={day.day} className=\"border-b border-gray-100 last:border-b-0\">\r\n-                {/* Day Header */}\r\n-                <button\r\n-                  onClick={() => toggleDay(day.day)}\r\n-                  className={`w-full p-4 text-left hover:bg-gray-50 transition-colors ${\r\n-                    selectedDay === day.day ? 'bg-blue-50' : ''\r\n-                  }`}\r\n-                >\r\n-                  <div className=\"flex items-center justify-between\">\r\n-                                      <div className=\"flex items-center space-x-3\">\r\n-                    <div>\r\n-                      <svg \r\n-                        width=\"24\" \r\n-                        height=\"24\" \r\n-                        viewBox=\"0 0 24 24\" \r\n-                        className=\"w-6 h-6\"\r\n-                      >\r\n-                        <path \r\n-                          d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7z\"\r\n-                          fill={day.color.pin}\r\n-                          stroke=\"#FFFFFF\"\r\n-                          strokeWidth=\"2\"\r\n-                        />\r\n-                        <text \r\n-                          x=\"12\" \r\n-                          y=\"13\" \r\n-                          textAnchor=\"middle\" \r\n-                          className=\"text-white text-sm font-medium fill-current\"\r\n-                          style={{ fontSize: '14px' }}\r\n+              <DroppableDay\r\n+                key={day.day}\r\n+                day={day}\r\n+                isOver={overId === `day-${day.day}`}\r\n+              >\r\n+                <div className=\"border-b border-gray-100 last:border-b-0\">\r\n+                  {/* Day Header */}\r\n+                  <button\r\n+                    onClick={() => toggleDay(day.day)}\r\n+                    className={`w-full p-4 text-left hover:bg-gray-50 transition-colors ${\r\n+                      selectedDay === day.day ? 'bg-blue-50' : ''\r\n+                    }`}\r\n+                  >\r\n+                    <div className=\"flex items-center justify-between\">\r\n+                      <div className=\"flex items-center space-x-3\">\r\n+                        <div \r\n+                          className={`w-6 h-6 rounded-full flex items-center justify-center text-white text-sm font-medium`}\r\n+                          style={{ backgroundColor: day.color.pin }}\r\n                         >\r\n                           {day.day}\r\n-                        </text>\r\n-                      </svg>\r\n-                    </div>\r\n-                      <div>\r\n-                        <h3 className=\"font-medium text-gray-900\">\r\n-                          Day {day.day}\r\n-                        </h3>\r\n-                        <p className=\"text-sm text-gray-600\">\r\n-                          {format(parseISO(day.date), 'MMM d, yyyy')}\r\n-                        </p>\r\n+                        </div>\r\n+                        <div>\r\n+                          <h3 className=\"font-medium text-gray-900\">\r\n+                            Day {day.day}\r\n+                          </h3>\r\n+                          <p className=\"text-sm text-gray-600\">\r\n+                            {format(parseISO(day.date), 'MMM d, yyyy')}\r\n+                          </p>\r\n+                        </div>\r\n                       </div>\r\n+                      <div className=\"flex items-center space-x-2\">\r\n+                        <span className=\"text-sm text-gray-500\">\r\n+                          {day.destinations.length} stops\r\n+                        </span>\r\n+                        <svg \r\n+                          className={`w-4 h-4 text-gray-400 transition-transform ${\r\n+                            expandedDays.has(day.day) ? 'rotate-180' : ''\r\n+                          }`}\r\n+                          fill=\"none\" \r\n+                          stroke=\"currentColor\" \r\n+                          viewBox=\"0 0 24 24\"\r\n+                        >\r\n+                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n+                        </svg>\r\n+                      </div>\r\n                     </div>\r\n-                    <div className=\"flex items-center space-x-2\">\r\n-                      <span className=\"text-sm text-gray-500\">\r\n-                        {day.destinations.length} stops\r\n-                      </span>\r\n-                      <svg \r\n-                        className={`w-4 h-4 text-gray-400 transition-transform ${\r\n-                          expandedDays.has(day.day) ? 'rotate-180' : ''\r\n-                        }`}\r\n-                        fill=\"none\" \r\n-                        stroke=\"currentColor\" \r\n-                        viewBox=\"0 0 24 24\"\r\n-                      >\r\n-                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n-                      </svg>\r\n-                    </div>\r\n-                  </div>\r\n-                </button>\r\n+                  </button>\r\n \r\n-                {/* Day Content */}\r\n-                {expandedDays.has(day.day) && (\r\n-                  <DroppableDay \r\n-                    day={day} \r\n-                    isOver={overId === `day-${day.day}`}\r\n-                  >\r\n+                  {/* Destinations List */}\r\n+                  {expandedDays.has(day.day) && (\r\n                     <div className=\"bg-gray-50\">\r\n                       {day.destinations.length === 0 ? (\r\n                         <div className=\"p-4 text-center text-gray-500\">\r\n                           <svg className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n@@ -573,9 +556,8 @@\n                             <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n                           </svg>\r\n                           <p className=\"text-sm\">No destinations added yet</p>\r\n                           <p className=\"text-xs text-gray-400 mt-1\">Click on the map to add destinations</p>\r\n-                          <p className=\"text-xs text-blue-500 mt-1\">Drag destinations from other days here</p>\r\n                         </div>\r\n                       ) : (\r\n                         <div className=\"space-y-0\">\r\n                           {day.destinations.map((destination, index) => (\r\n@@ -618,25 +600,25 @@\n                           </span>\r\n                         </div>\r\n                       </div>\r\n                     </div>\r\n-                  </DroppableDay>\r\n-                )}\r\n-              </div>\r\n+                  )}\r\n+                </div>\r\n+              </DroppableDay>\r\n             ))}\r\n           </SortableContext>\r\n         </DndContext>\r\n+        \r\n+        {/* Smart Recommendations - Inside scrollable area */}\r\n+        <SmartRecommendations\r\n+          trip={trip}\r\n+          tripDays={tripDays}\r\n+          selectedDay={selectedDay}\r\n+          onDestinationAdd={onLocationSelect}\r\n+          existingDestinations={tripDays.flatMap(day => day.destinations)}\r\n+        />\r\n       </div>\r\n \r\n-      {/* Smart Recommendations */}\r\n-      <SmartRecommendations\r\n-        trip={trip}\r\n-        tripDays={tripDays}\r\n-        selectedDay={selectedDay}\r\n-        onDestinationAdd={onLocationSelect}\r\n-        existingDestinations={tripDays.flatMap(day => day.destinations)}\r\n-      />\r\n-\r\n       {/* Footer */}\r\n       <div className=\"p-4 border-t border-gray-200\">\r\n         <div className=\"flex items-center justify-between\">\r\n           <div className=\"flex items-center space-x-2\">\r\n"
                },
                {
                    "date": 1752494148688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -616,25 +616,7 @@\n           onDestinationAdd={onLocationSelect}\r\n           existingDestinations={tripDays.flatMap(day => day.destinations)}\r\n         />\r\n       </div>\r\n-\r\n-      {/* Footer */}\r\n-      <div className=\"p-4 border-t border-gray-200\">\r\n-        <div className=\"flex items-center justify-between\">\r\n-          <div className=\"flex items-center space-x-2\">\r\n-            <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n-            </svg>\r\n-            <span className=\"text-xs text-gray-500\">\r\n-              {tripDays.some(day => day.destinations.length > 0) ? 'Drag destinations to reorder or move between days â€¢ ' : ''}\r\n-              Click on the map to add destinations\r\n-            </span>\r\n-          </div>\r\n-          <button className=\"text-xs text-primary-600 hover:text-primary-700\">\r\n-            Export\r\n-          </button>\r\n-        </div>\r\n-      </div>\r\n     </div>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752494386342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -461,9 +461,9 @@\n     });\r\n   };\r\n \r\n   return (\r\n-    <div className=\"h-full flex flex-col\">\r\n+    <div className=\"h-full flex flex-col bg-white\">\r\n       {/* Header */}\r\n       <div className=\"p-4 border-b border-gray-200\">\r\n         <div className=\"flex items-center justify-between\">\r\n           <div>\r\n"
                },
                {
                    "date": 1752494875127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -606,17 +606,8 @@\n               </DroppableDay>\r\n             ))}\r\n           </SortableContext>\r\n         </DndContext>\r\n-        \r\n-        {/* Smart Recommendations - Inside scrollable area */}\r\n-        <SmartRecommendations\r\n-          trip={trip}\r\n-          tripDays={tripDays}\r\n-          selectedDay={selectedDay}\r\n-          onDestinationAdd={onLocationSelect}\r\n-          existingDestinations={tripDays.flatMap(day => day.destinations)}\r\n-        />\r\n       </div>\r\n     </div>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752494884675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n import { useState } from 'react';\r\n import { Trip, Destination, TripDay } from '@/types';\r\n import { format, parseISO } from 'date-fns';\r\n import LocationSearch from './LocationSearch';\r\n-import SmartRecommendations from './SmartRecommendations';\r\n import {\r\n   DndContext,\r\n   closestCenter,\r\n   KeyboardSensor,\r\n"
                },
                {
                    "date": 1752494907489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -591,14 +591,20 @@\n                           placeholder={`Search places for Day ${day.day}...`}\r\n                           className=\"w-full\"\r\n                         />\r\n                         \r\n-                        {/* Alternative: Click on map hint */}\r\n-                        <div className=\"mt-2 text-center\">\r\n-                          <span className=\"text-xs text-gray-500\">\r\n-                            or click on the map to add a destination\r\n-                          </span>\r\n-                        </div>\r\n+                        {/* Day-specific recommendations */}\r\n+                        {day.destinations.length > 0 && (\r\n+                          <div className=\"mt-3 pt-3 border-t border-gray-100\">\r\n+                            <h4 className=\"text-xs font-medium text-gray-600 mb-2\">Recommended nearby</h4>\r\n+                            <div className=\"flex space-x-2 overflow-x-auto\">\r\n+                              {/* We'll add recommendations here */}\r\n+                              <div className=\"flex-shrink-0 w-32 h-16 bg-gray-100 rounded-md flex items-center justify-center\">\r\n+                                <span className=\"text-xs text-gray-500\">Loading...</span>\r\n+                              </div>\r\n+                            </div>\r\n+                          </div>\r\n+                        )}\r\n                       </div>\r\n                     </div>\r\n                   )}\r\n                 </div>\r\n"
                },
                {
                    "date": 1752494915796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n 'use client';\r\n \r\n-import { useState } from 'react';\r\n+import { useState, useEffect, useRef } from 'react';\r\n import { Trip, Destination, TripDay } from '@/types';\r\n import { format, parseISO } from 'date-fns';\r\n import LocationSearch from './LocationSearch';\r\n import {\r\n"
                },
                {
                    "date": 1752494938609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,94 @@\n   CSS,\r\n } from '@dnd-kit/utilities';\r\n import { reorderDestinations, moveDestinationToDay } from '@/lib/destination-service';\r\n \r\n+interface RecommendationItem {\r\n+  id: string;\r\n+  name: string;\r\n+  address: string;\r\n+  lat: number;\r\n+  lng: number;\r\n+  category: string;\r\n+  rating?: number;\r\n+  photos?: string[];\r\n+  description: string;\r\n+  photo?: string;\r\n+}\r\n+\r\n+// Curated recommendations\r\n+const CURATED_RECOMMENDATIONS = {\r\n+  tokyo: [\r\n+    {\r\n+      name: 'Senso-ji Temple',\r\n+      address: '2-3-1 Asakusa, Taito City, Tokyo',\r\n+      lat: 35.7148,\r\n+      lng: 139.7967,\r\n+      category: 'tourist_attraction',\r\n+      description: 'Ancient Buddhist temple',\r\n+      photo: 'https://images.unsplash.com/photo-1573822632087-b37c9d73f5f5?w=300&h=200&fit=crop',\r\n+    },\r\n+    {\r\n+      name: 'Shibuya Crossing',\r\n+      address: 'Shibuya City, Tokyo',\r\n+      lat: 35.6598,\r\n+      lng: 139.7006,\r\n+      category: 'point_of_interest',\r\n+      description: 'Famous scramble crossing',\r\n+      photo: 'https://images.unsplash.com/photo-1609813306884-a3b4c2b7f86b?w=300&h=200&fit=crop',\r\n+    },\r\n+    {\r\n+      name: 'Tsukiji Outer Market',\r\n+      address: 'Tsukiji, Chuo City, Tokyo',\r\n+      lat: 35.6654,\r\n+      lng: 139.7707,\r\n+      category: 'food',\r\n+      description: 'Fresh seafood market',\r\n+      photo: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=300&h=200&fit=crop',\r\n+    },\r\n+  ],\r\n+  paris: [\r\n+    {\r\n+      name: 'Eiffel Tower',\r\n+      address: 'Champ de Mars, Paris',\r\n+      lat: 48.8584,\r\n+      lng: 2.2945,\r\n+      category: 'tourist_attraction',\r\n+      description: 'Iconic iron lattice tower',\r\n+      photo: 'https://images.unsplash.com/photo-1511739001486-6bfe10ce785f?w=300&h=200&fit=crop',\r\n+    },\r\n+    {\r\n+      name: 'Louvre Museum',\r\n+      address: 'Rue de Rivoli, Paris',\r\n+      lat: 48.8606,\r\n+      lng: 2.3376,\r\n+      category: 'museum',\r\n+      description: 'World\\'s largest art museum',\r\n+      photo: 'https://images.unsplash.com/photo-1566139327542-1f4c8fdb8e88?w=300&h=200&fit=crop',\r\n+    },\r\n+  ],\r\n+  london: [\r\n+    {\r\n+      name: 'Big Ben',\r\n+      address: 'Westminster, London',\r\n+      lat: 51.5007,\r\n+      lng: -0.1246,\r\n+      category: 'tourist_attraction',\r\n+      description: 'Famous clock tower',\r\n+      photo: 'https://images.unsplash.com/photo-1513635269975-59663e0ac1ad?w=300&h=200&fit=crop',\r\n+    },\r\n+    {\r\n+      name: 'Tower Bridge',\r\n+      address: 'Tower Bridge Rd, London',\r\n+      lat: 51.5055,\r\n+      lng: -0.0754,\r\n+      category: 'tourist_attraction',\r\n+      description: 'Victorian Gothic bridge',\r\n+      photo: 'https://images.unsplash.com/photo-1515920892043-e8b3b7b13bee?w=300&h=200&fit=crop',\r\n+    },\r\n+  ],\r\n+};\r\n+\r\n interface ItineraryPanelProps {\r\n   trip: Trip;\r\n   tripDays: TripDay[];\r\n   selectedDay: number;\r\n"
                },
                {
                    "date": 1752494948482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -347,8 +347,9 @@\n   const [expandedDays, setExpandedDays] = useState<Set<number>>(new Set([1]));\r\n   const [isReordering, setIsReordering] = useState(false);\r\n   const [activeId, setActiveId] = useState<string | null>(null);\r\n   const [overId, setOverId] = useState<UniqueIdentifier | null>(null);\r\n+  const [dayRecommendations, setDayRecommendations] = useState<{[key: number]: RecommendationItem[]}>({});\r\n \r\n   const sensors = useSensors(\r\n     useSensor(PointerSensor, {\r\n       activationConstraint: {\r\n"
                },
                {
                    "date": 1752494987077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -546,8 +546,77 @@\n       return dest;\r\n     });\r\n   };\r\n \r\n+  // Generate recommendations for a specific day\r\n+  const generateDayRecommendations = (dayNumber: number) => {\r\n+    const dayData = tripDays.find(d => d.day === dayNumber);\r\n+    if (!dayData || dayData.destinations.length === 0) return;\r\n+\r\n+    const recommendations: RecommendationItem[] = [];\r\n+    \r\n+    // Get curated recommendations based on trip location\r\n+    const location = trip.location.toLowerCase();\r\n+    Object.entries(CURATED_RECOMMENDATIONS).forEach(([city, recs]) => {\r\n+      if (location.includes(city)) {\r\n+        recs.forEach((rec, index) => {\r\n+          // Check if this recommendation is already in the trip\r\n+          const isAlreadyAdded = tripDays.some(day => \r\n+            day.destinations.some(dest => \r\n+              Math.abs(dest.lat - rec.lat) < 0.001 && \r\n+              Math.abs(dest.lng - rec.lng) < 0.001\r\n+            )\r\n+          );\r\n+          \r\n+          if (!isAlreadyAdded) {\r\n+            recommendations.push({\r\n+              id: `curated-${city}-${index}-day-${dayNumber}`,\r\n+              ...rec,\r\n+            });\r\n+          }\r\n+        });\r\n+      }\r\n+    });\r\n+\r\n+    // Update state\r\n+    setDayRecommendations(prev => ({\r\n+      ...prev,\r\n+      [dayNumber]: recommendations.slice(0, 3) // Limit to 3 recommendations per day\r\n+    }));\r\n+  };\r\n+\r\n+  // Generate recommendations when days change\r\n+  useEffect(() => {\r\n+    tripDays.forEach(day => {\r\n+      if (day.destinations.length > 0) {\r\n+        generateDayRecommendations(day.day);\r\n+      }\r\n+    });\r\n+  }, [tripDays, trip.location]);\r\n+\r\n+  const handleAddRecommendation = (rec: RecommendationItem, dayNumber: number) => {\r\n+    const dayData = tripDays.find(d => d.day === dayNumber);\r\n+    \r\n+    const newDestination: Destination = {\r\n+      id: crypto.randomUUID(),\r\n+      tripId: trip.id,\r\n+      locationName: rec.name,\r\n+      address: rec.address,\r\n+      lat: rec.lat,\r\n+      lng: rec.lng,\r\n+      day: dayNumber,\r\n+      orderIndex: (dayData?.destinations.length || 0) + 1,\r\n+      notes: rec.description,\r\n+      category: rec.category,\r\n+      rating: rec.rating,\r\n+      photos: rec.photo ? [rec.photo] : [],\r\n+      createdAt: new Date(),\r\n+      updatedAt: new Date(),\r\n+    };\r\n+    \r\n+    onLocationSelect(newDestination);\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"h-full flex flex-col bg-white\">\r\n       {/* Header */}\r\n       <div className=\"p-4 border-b border-gray-200\">\r\n"
                },
                {
                    "date": 1752495006898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -748,16 +748,51 @@\n                           className=\"w-full\"\r\n                         />\r\n                         \r\n                         {/* Day-specific recommendations */}\r\n-                        {day.destinations.length > 0 && (\r\n+                        {day.destinations.length > 0 && dayRecommendations[day.day] && dayRecommendations[day.day].length > 0 && (\r\n                           <div className=\"mt-3 pt-3 border-t border-gray-100\">\r\n                             <h4 className=\"text-xs font-medium text-gray-600 mb-2\">Recommended nearby</h4>\r\n                             <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                              {/* We'll add recommendations here */}\r\n-                              <div className=\"flex-shrink-0 w-32 h-16 bg-gray-100 rounded-md flex items-center justify-center\">\r\n-                                <span className=\"text-xs text-gray-500\">Loading...</span>\r\n-                              </div>\r\n+                              {dayRecommendations[day.day].map((rec) => (\r\n+                                <div key={rec.id} className=\"flex-shrink-0 w-32 h-16 bg-white border border-gray-200 rounded-md overflow-hidden group hover:shadow-sm transition-shadow\">\r\n+                                  <div className=\"h-full flex\">\r\n+                                    {/* Square image */}\r\n+                                    <div className=\"w-12 h-16 bg-gray-100 flex-shrink-0\">\r\n+                                      {rec.photo ? (\r\n+                                        <img \r\n+                                          src={rec.photo} \r\n+                                          alt={rec.name}\r\n+                                          className=\"w-full h-full object-cover\"\r\n+                                        />\r\n+                                      ) : (\r\n+                                        <div className=\"w-full h-full flex items-center justify-center\">\r\n+                                          <svg className=\"w-3 h-3 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\r\n+                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n+                                          </svg>\r\n+                                        </div>\r\n+                                      )}\r\n+                                    </div>\r\n+                                    \r\n+                                    {/* Content */}\r\n+                                    <div className=\"flex-1 p-1.5 flex flex-col justify-between\">\r\n+                                      <div className=\"min-w-0\">\r\n+                                        <p className=\"text-xs font-medium text-gray-900 truncate\">{rec.name}</p>\r\n+                                        <p className=\"text-xs text-gray-500 truncate\">{rec.description}</p>\r\n+                                      </div>\r\n+                                      <button\r\n+                                        onClick={() => handleAddRecommendation(rec, day.day)}\r\n+                                        className=\"self-end w-4 h-4 bg-primary-600 text-white rounded-full flex items-center justify-center hover:bg-primary-700 transition-colors\"\r\n+                                      >\r\n+                                        <svg className=\"w-2.5 h-2.5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n+                                        </svg>\r\n+                                      </button>\r\n+                                    </div>\r\n+                                  </div>\r\n+                                </div>\r\n+                              ))}\r\n                             </div>\r\n                           </div>\r\n                         )}\r\n                       </div>\r\n"
                },
                {
                    "date": 1752495066590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,809 +1,622 @@\n-'use client';\r\n-\r\n-import { useState, useEffect, useRef } from 'react';\r\n-import { Trip, Destination, TripDay } from '@/types';\r\n-import { format, parseISO } from 'date-fns';\r\n-import LocationSearch from './LocationSearch';\r\n-import {\r\n-  DndContext,\r\n-  closestCenter,\r\n-  KeyboardSensor,\r\n-  PointerSensor,\r\n-  useSensor,\r\n-  useSensors,\r\n-  DragEndEvent,\r\n-  DragOverEvent,\r\n-  DragOverlay,\r\n-  useDraggable,\r\n-  useDroppable,\r\n-  UniqueIdentifier,\r\n-} from '@dnd-kit/core';\r\n-import {\r\n-  SortableContext,\r\n-  sortableKeyboardCoordinates,\r\n-  verticalListSortingStrategy,\r\n-  useSortable,\r\n-} from '@dnd-kit/sortable';\r\n-import {\r\n-  CSS,\r\n-} from '@dnd-kit/utilities';\r\n-import { reorderDestinations, moveDestinationToDay } from '@/lib/destination-service';\r\n-\r\n-interface RecommendationItem {\r\n-  id: string;\r\n-  name: string;\r\n-  address: string;\r\n-  lat: number;\r\n-  lng: number;\r\n-  category: string;\r\n-  rating?: number;\r\n-  photos?: string[];\r\n-  description: string;\r\n-  photo?: string;\r\n-}\r\n-\r\n-// Curated recommendations\r\n-const CURATED_RECOMMENDATIONS = {\r\n-  tokyo: [\r\n-    {\r\n-      name: 'Senso-ji Temple',\r\n-      address: '2-3-1 Asakusa, Taito City, Tokyo',\r\n-      lat: 35.7148,\r\n-      lng: 139.7967,\r\n-      category: 'tourist_attraction',\r\n-      description: 'Ancient Buddhist temple',\r\n-      photo: 'https://images.unsplash.com/photo-1573822632087-b37c9d73f5f5?w=300&h=200&fit=crop',\r\n-    },\r\n-    {\r\n-      name: 'Shibuya Crossing',\r\n-      address: 'Shibuya City, Tokyo',\r\n-      lat: 35.6598,\r\n-      lng: 139.7006,\r\n-      category: 'point_of_interest',\r\n-      description: 'Famous scramble crossing',\r\n-      photo: 'https://images.unsplash.com/photo-1609813306884-a3b4c2b7f86b?w=300&h=200&fit=crop',\r\n-    },\r\n-    {\r\n-      name: 'Tsukiji Outer Market',\r\n-      address: 'Tsukiji, Chuo City, Tokyo',\r\n-      lat: 35.6654,\r\n-      lng: 139.7707,\r\n-      category: 'food',\r\n-      description: 'Fresh seafood market',\r\n-      photo: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=300&h=200&fit=crop',\r\n-    },\r\n-  ],\r\n-  paris: [\r\n-    {\r\n-      name: 'Eiffel Tower',\r\n-      address: 'Champ de Mars, Paris',\r\n-      lat: 48.8584,\r\n-      lng: 2.2945,\r\n-      category: 'tourist_attraction',\r\n-      description: 'Iconic iron lattice tower',\r\n-      photo: 'https://images.unsplash.com/photo-1511739001486-6bfe10ce785f?w=300&h=200&fit=crop',\r\n-    },\r\n-    {\r\n-      name: 'Louvre Museum',\r\n-      address: 'Rue de Rivoli, Paris',\r\n-      lat: 48.8606,\r\n-      lng: 2.3376,\r\n-      category: 'museum',\r\n-      description: 'World\\'s largest art museum',\r\n-      photo: 'https://images.unsplash.com/photo-1566139327542-1f4c8fdb8e88?w=300&h=200&fit=crop',\r\n-    },\r\n-  ],\r\n-  london: [\r\n-    {\r\n-      name: 'Big Ben',\r\n-      address: 'Westminster, London',\r\n-      lat: 51.5007,\r\n-      lng: -0.1246,\r\n-      category: 'tourist_attraction',\r\n-      description: 'Famous clock tower',\r\n-      photo: 'https://images.unsplash.com/photo-1513635269975-59663e0ac1ad?w=300&h=200&fit=crop',\r\n-    },\r\n-    {\r\n-      name: 'Tower Bridge',\r\n-      address: 'Tower Bridge Rd, London',\r\n-      lat: 51.5055,\r\n-      lng: -0.0754,\r\n-      category: 'tourist_attraction',\r\n-      description: 'Victorian Gothic bridge',\r\n-      photo: 'https://images.unsplash.com/photo-1515920892043-e8b3b7b13bee?w=300&h=200&fit=crop',\r\n-    },\r\n-  ],\r\n-};\r\n-\r\n-interface ItineraryPanelProps {\r\n-  trip: Trip;\r\n-  tripDays: TripDay[];\r\n-  selectedDay: number;\r\n-  selectedDestination: Destination | null;\r\n-  onDaySelect: (day: number) => void;\r\n-  onDestinationSelect: (destination: Destination) => void;\r\n-  onDestinationsChange: (destinations: Destination[]) => void;\r\n-  onLocationSelect: (destination: Destination) => void;\r\n-  onDestinationDelete: (destinationId: string) => void;\r\n-}\r\n-\r\n-// Droppable day container component\r\n-function DroppableDay({ \r\n-  day, \r\n-  children, \r\n-  isOver \r\n-}: { \r\n-  day: TripDay; \r\n-  children: React.ReactNode;\r\n-  isOver: boolean;\r\n-}) {\r\n-  const { setNodeRef } = useDroppable({\r\n-    id: `day-${day.day}`,\r\n-  });\r\n-\r\n-  return (\r\n-    <div \r\n-      ref={setNodeRef}\r\n-      className={`transition-colors ${isOver ? 'bg-blue-50' : ''}`}\r\n-    >\r\n-      {children}\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-// Sortable destination item component\r\n-function SortableDestination({ \r\n-  destination, \r\n-  dayColor, \r\n-  selectedDestination,\r\n-  onDestinationSelect,\r\n-  onDestinationDelete,\r\n-  isLastItem \r\n-}: {\r\n-  destination: Destination;\r\n-  dayColor: any;\r\n-  selectedDestination: Destination | null;\r\n-  onDestinationSelect: (destination: Destination) => void;\r\n-  onDestinationDelete: (destinationId: string) => void;\r\n-  isLastItem: boolean;\r\n-}) {\r\n-  const {\r\n-    attributes,\r\n-    listeners,\r\n-    setNodeRef,\r\n-    transform,\r\n-    transition,\r\n-    isDragging,\r\n-  } = useSortable({ id: destination.id });\r\n-\r\n-  const style = {\r\n-    transform: CSS.Transform.toString(transform),\r\n-    transition,\r\n-  };\r\n-\r\n-  const formatTime = (time: string) => {\r\n-    if (!time) return '';\r\n-    try {\r\n-      const [hours, minutes] = time.split(':');\r\n-      const date = new Date();\r\n-      date.setHours(parseInt(hours), parseInt(minutes));\r\n-      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n-    } catch {\r\n-      return time;\r\n-    }\r\n-  };\r\n-\r\n-  const isSelected = selectedDestination?.id === destination.id;\r\n-\r\n-  return (\r\n-    <div ref={setNodeRef} style={style} className={isDragging ? 'opacity-50' : ''}>\r\n-      <button\r\n-        onClick={() => onDestinationSelect(destination)}\r\n-        className={`w-full p-4 text-left hover:bg-gray-100 transition-colors group relative ${\r\n-          isSelected ? 'bg-blue-50 border-l-4 border-blue-500' : ''\r\n-        }`}\r\n-      >\r\n-        <div className=\"flex items-start space-x-3\">\r\n-          {/* Drag Handle */}\r\n-          <div \r\n-            {...attributes}\r\n-            {...listeners}\r\n-            className=\"flex-shrink-0 mt-1 cursor-grab active:cursor-grabbing\"\r\n-          >\r\n-            <svg className=\"w-4 h-4 text-gray-400 hover:text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 8h16M4 16h16\" />\r\n-            </svg>\r\n-          </div>\r\n-\r\n-          {/* Pin Number - Teardrop shape matching map */}\r\n-          <div className=\"flex-shrink-0 mt-0.5\">\r\n-            <svg \r\n-              width=\"24\" \r\n-              height=\"24\" \r\n-              viewBox=\"0 0 24 24\" \r\n-              className=\"w-6 h-6\"\r\n-            >\r\n-              <path \r\n-                d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7z\"\r\n-                fill={isSelected ? '#3B82F6' : dayColor.pin}\r\n-                stroke=\"#FFFFFF\"\r\n-                strokeWidth=\"2\"\r\n-              />\r\n-              <text \r\n-                x=\"12\" \r\n-                y=\"13\" \r\n-                textAnchor=\"middle\" \r\n-                className=\"text-white text-xs font-medium fill-current\"\r\n-                style={{ fontSize: '12px' }}\r\n-              >\r\n-                {destination.orderIndex}\r\n-              </text>\r\n-            </svg>\r\n-          </div>\r\n-          \r\n-          <div className=\"flex-1 min-w-0\">\r\n-            <div className=\"flex items-center justify-between\">\r\n-              <div className=\"flex items-center space-x-2 min-w-0\">\r\n-                <h4 className=\"font-medium text-gray-900 truncate\">\r\n-                  {destination.locationName}\r\n-                </h4>\r\n-                {/* Compact photo for selected destinations */}\r\n-                {isSelected && destination.photos && destination.photos.length > 0 && (\r\n-                  <img \r\n-                    src={destination.photos[0]} \r\n-                    alt={destination.locationName}\r\n-                    className=\"w-8 h-8 object-cover rounded-lg flex-shrink-0\"\r\n-                    onError={(e) => {\r\n-                      (e.target as HTMLImageElement).style.display = 'none';\r\n-                    }}\r\n-                  />\r\n-                )}\r\n-              </div>\r\n-              <div className=\"flex items-center space-x-2\">\r\n-                {destination.startTime && (\r\n-                  <span className=\"text-sm text-gray-500 flex-shrink-0\">\r\n-                    {formatTime(destination.startTime)}\r\n-                  </span>\r\n-                )}\r\n-                <button\r\n-                  onClick={(e) => {\r\n-                    e.stopPropagation();\r\n-                    onDestinationDelete(destination.id);\r\n-                  }}\r\n-                  className=\"text-red-500 hover:text-red-700 hover:bg-red-50 rounded-lg p-1 transition-colors opacity-0 group-hover:opacity-100 flex-shrink-0\"\r\n-                  title=\"Delete destination\"\r\n-                >\r\n-                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n-                  </svg>\r\n-                </button>\r\n-              </div>\r\n-            </div>\r\n-            <p className=\"text-sm text-gray-600 truncate\">\r\n-              {destination.address}\r\n-            </p>\r\n-            {destination.notes && (\r\n-              <p className=\"text-sm text-gray-500 mt-1 line-clamp-2\">\r\n-                {destination.notes}\r\n-              </p>\r\n-            )}\r\n-            \r\n-            {/* Compact details for selected destinations */}\r\n-            {isSelected && (\r\n-              <div className=\"flex items-center space-x-4 mt-2 text-xs\">\r\n-                {destination.category && (\r\n-                  <span className=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\r\n-                    {destination.category}\r\n-                  </span>\r\n-                )}\r\n-                {destination.rating && (\r\n-                  <div className=\"flex items-center space-x-1\">\r\n-                    <svg className=\"w-3 h-3 text-yellow-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n-                      <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\r\n-                    </svg>\r\n-                    <span className=\"text-gray-600\">{destination.rating}</span>\r\n-                  </div>\r\n-                )}\r\n-                {/* Close button for selected destinations */}\r\n-                <button\r\n-                  onClick={(e) => {\r\n-                    e.stopPropagation();\r\n-                    onDestinationSelect(null as any);\r\n-                  }}\r\n-                  className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n-                  title=\"Clear selection\"\r\n-                >\r\n-                  <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n-                  </svg>\r\n-                </button>\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      </button>\r\n-      \r\n-      {/* Connector line */}\r\n-      {!isLastItem && (\r\n-        <div className=\"flex justify-start ml-11\">\r\n-          <div className=\"w-0.5 h-4 bg-gray-300\"></div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-export default function ItineraryPanel({\r\n-  trip,\r\n-  tripDays,\r\n-  selectedDay,\r\n-  selectedDestination,\r\n-  onDaySelect,\r\n-  onDestinationSelect,\r\n-  onDestinationsChange,\r\n-  onLocationSelect,\r\n-  onDestinationDelete,\r\n-}: ItineraryPanelProps) {\r\n-  const [expandedDays, setExpandedDays] = useState<Set<number>>(new Set([1]));\r\n-  const [isReordering, setIsReordering] = useState(false);\r\n-  const [activeId, setActiveId] = useState<string | null>(null);\r\n-  const [overId, setOverId] = useState<UniqueIdentifier | null>(null);\r\n-  const [dayRecommendations, setDayRecommendations] = useState<{[key: number]: RecommendationItem[]}>({});\r\n-\r\n-  const sensors = useSensors(\r\n-    useSensor(PointerSensor, {\r\n-      activationConstraint: {\r\n-        distance: 8,\r\n-      },\r\n-    }),\r\n-    useSensor(KeyboardSensor, {\r\n-      coordinateGetter: sortableKeyboardCoordinates,\r\n-    })\r\n-  );\r\n-\r\n-  const toggleDay = (day: number) => {\r\n-    const newExpanded = new Set(expandedDays);\r\n-    if (newExpanded.has(day)) {\r\n-      newExpanded.delete(day);\r\n-    } else {\r\n-      newExpanded.add(day);\r\n-    }\r\n-    setExpandedDays(newExpanded);\r\n-    onDaySelect(day);\r\n-  };\r\n-\r\n-  // Get all destinations for sortable context\r\n-  const allDestinations = tripDays.flatMap(day => day.destinations);\r\n-\r\n-  const handleDragStart = (event: any) => {\r\n-    setActiveId(event.active.id);\r\n-  };\r\n-\r\n-  const handleDragOver = (event: DragOverEvent) => {\r\n-    setOverId(event.over?.id || null);\r\n-  };\r\n-\r\n-  const handleDragEnd = async (event: DragEndEvent) => {\r\n-    const { active, over } = event;\r\n-    \r\n-    setActiveId(null);\r\n-    setOverId(null);\r\n-    \r\n-    if (!over || active.id === over.id) {\r\n-      return;\r\n-    }\r\n-\r\n-    const draggedDestination = allDestinations.find(dest => dest.id === active.id);\r\n-    if (!draggedDestination) return;\r\n-\r\n-    setIsReordering(true);\r\n-\r\n-    try {\r\n-      // Check if we're dropping on a day container or another destination\r\n-      const isDroppedOnDay = over.id.toString().startsWith('day-');\r\n-      \r\n-      if (isDroppedOnDay) {\r\n-        // Cross-day drop - move to end of target day\r\n-        const targetDay = parseInt(over.id.toString().replace('day-', ''));\r\n-        const targetDayData = tripDays.find(d => d.day === targetDay);\r\n-        \r\n-        if (targetDayData && targetDay !== draggedDestination.day) {\r\n-          // Calculate proper sequential order index\r\n-          const newOrderIndex = targetDayData.destinations.length + 1;\r\n-          \r\n-          // Update in database\r\n-          await moveDestinationToDay(draggedDestination.id, targetDay, newOrderIndex);\r\n-          \r\n-          // Create updated destinations with proper renumbering\r\n-          const updatedDestinations = allDestinations.map(dest => {\r\n-            if (dest.id === draggedDestination.id) {\r\n-              return {\r\n-                ...dest,\r\n-                day: targetDay,\r\n-                orderIndex: newOrderIndex\r\n-              };\r\n-            }\r\n-            return dest;\r\n-          });\r\n-\r\n-          // Renumber all destinations in both source and target days\r\n-          const finalDestinations = renumberDestinationsInDays(updatedDestinations, [draggedDestination.day, targetDay]);\r\n-          \r\n-          onDestinationsChange(finalDestinations);\r\n-        }\r\n-      } else {\r\n-        // Same day or destination-to-destination drop\r\n-        const targetDestination = allDestinations.find(dest => dest.id === over.id);\r\n-        if (!targetDestination) return;\r\n-\r\n-        const sourceDay = draggedDestination.day;\r\n-        const targetDay = targetDestination.day;\r\n-\r\n-        if (sourceDay === targetDay) {\r\n-          // Same day reordering\r\n-          const dayData = tripDays.find(d => d.day === sourceDay);\r\n-          if (!dayData) return;\r\n-\r\n-          const oldIndex = dayData.destinations.findIndex(dest => dest.id === active.id);\r\n-          const newIndex = dayData.destinations.findIndex(dest => dest.id === over.id);\r\n-\r\n-          if (oldIndex === newIndex) return;\r\n-\r\n-          // Create new order array\r\n-          const newDestinations = [...dayData.destinations];\r\n-          const [movedItem] = newDestinations.splice(oldIndex, 1);\r\n-          newDestinations.splice(newIndex, 0, movedItem);\r\n-\r\n-          // Update order indices sequentially\r\n-          const reorderedDestinations = newDestinations.map((dest, index) => ({\r\n-            ...dest,\r\n-            orderIndex: index + 1\r\n-          }));\r\n-\r\n-          // Update destinations in parent component\r\n-          const updatedAllDestinations = allDestinations.map(dest => {\r\n-            const updated = reorderedDestinations.find(rd => rd.id === dest.id);\r\n-            return updated || dest;\r\n-          });\r\n-          \r\n-          onDestinationsChange(updatedAllDestinations);\r\n-\r\n-          // Save to database\r\n-          const destinationIds = reorderedDestinations.map(dest => dest.id);\r\n-          await reorderDestinations(trip.id, sourceDay, destinationIds);\r\n-        } else {\r\n-          // Cross-day drop next to specific destination\r\n-          const targetDayData = tripDays.find(d => d.day === targetDay);\r\n-          if (!targetDayData) return;\r\n-\r\n-          const targetIndex = targetDayData.destinations.findIndex(dest => dest.id === over.id);\r\n-          \r\n-          // Insert the destination at the target position\r\n-          const updatedTargetDestinations = [...targetDayData.destinations];\r\n-          updatedTargetDestinations.splice(targetIndex + 1, 0, {\r\n-            ...draggedDestination,\r\n-            day: targetDay,\r\n-            orderIndex: targetIndex + 2 // Temporary index, will be renumbered\r\n-          });\r\n-\r\n-          // Update in database with proper order index\r\n-          await moveDestinationToDay(draggedDestination.id, targetDay, targetIndex + 2);\r\n-\r\n-          // Create updated destinations array\r\n-          const updatedDestinations = allDestinations\r\n-            .filter(dest => dest.id !== draggedDestination.id) // Remove from source\r\n-            .map(dest => {\r\n-              // Update target day destinations\r\n-              if (dest.day === targetDay) {\r\n-                const updated = updatedTargetDestinations.find(rd => rd.id === dest.id);\r\n-                return updated || dest;\r\n-              }\r\n-              return dest;\r\n-            })\r\n-            .concat([{\r\n-              ...draggedDestination,\r\n-              day: targetDay,\r\n-              orderIndex: targetIndex + 2 // Temporary, will be renumbered\r\n-            }]);\r\n-\r\n-          // Renumber all destinations in both affected days\r\n-          const finalDestinations = renumberDestinationsInDays(updatedDestinations, [sourceDay, targetDay]);\r\n-          \r\n-          onDestinationsChange(finalDestinations);\r\n-\r\n-          // Reorder target day in database with proper sequential IDs\r\n-          const targetDayDestinations = finalDestinations.filter(dest => dest.day === targetDay);\r\n-          const targetDayIds = targetDayDestinations\r\n-            .sort((a, b) => (a.orderIndex || 0) - (b.orderIndex || 0))\r\n-            .map(dest => dest.id);\r\n-          await reorderDestinations(trip.id, targetDay, targetDayIds);\r\n-        }\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Error handling drag:', error);\r\n-    } finally {\r\n-      setIsReordering(false);\r\n-    }\r\n-  };\r\n-\r\n-  // Helper function to renumber destinations sequentially within specified days\r\n-  const renumberDestinationsInDays = (destinations: Destination[], daysToRenumber: number[]): Destination[] => {\r\n-    return destinations.map(dest => {\r\n-      if (daysToRenumber.includes(dest.day)) {\r\n-        // Get all destinations for this day and sort by current order\r\n-        const dayDestinations = destinations\r\n-          .filter(d => d.day === dest.day)\r\n-          .sort((a, b) => (a.orderIndex || 0) - (b.orderIndex || 0));\r\n-        \r\n-        // Find the new sequential index\r\n-        const newIndex = dayDestinations.findIndex(d => d.id === dest.id) + 1;\r\n-        \r\n-        return {\r\n-          ...dest,\r\n-          orderIndex: newIndex\r\n-        };\r\n-      }\r\n-      return dest;\r\n-    });\r\n-  };\r\n-\r\n-  // Generate recommendations for a specific day\r\n-  const generateDayRecommendations = (dayNumber: number) => {\r\n-    const dayData = tripDays.find(d => d.day === dayNumber);\r\n-    if (!dayData || dayData.destinations.length === 0) return;\r\n-\r\n-    const recommendations: RecommendationItem[] = [];\r\n-    \r\n-    // Get curated recommendations based on trip location\r\n-    const location = trip.location.toLowerCase();\r\n-    Object.entries(CURATED_RECOMMENDATIONS).forEach(([city, recs]) => {\r\n-      if (location.includes(city)) {\r\n-        recs.forEach((rec, index) => {\r\n-          // Check if this recommendation is already in the trip\r\n-          const isAlreadyAdded = tripDays.some(day => \r\n-            day.destinations.some(dest => \r\n-              Math.abs(dest.lat - rec.lat) < 0.001 && \r\n-              Math.abs(dest.lng - rec.lng) < 0.001\r\n-            )\r\n-          );\r\n-          \r\n-          if (!isAlreadyAdded) {\r\n-            recommendations.push({\r\n-              id: `curated-${city}-${index}-day-${dayNumber}`,\r\n-              ...rec,\r\n-            });\r\n-          }\r\n-        });\r\n-      }\r\n-    });\r\n-\r\n-    // Update state\r\n-    setDayRecommendations(prev => ({\r\n-      ...prev,\r\n-      [dayNumber]: recommendations.slice(0, 3) // Limit to 3 recommendations per day\r\n-    }));\r\n-  };\r\n-\r\n-  // Generate recommendations when days change\r\n-  useEffect(() => {\r\n-    tripDays.forEach(day => {\r\n-      if (day.destinations.length > 0) {\r\n-        generateDayRecommendations(day.day);\r\n-      }\r\n-    });\r\n-  }, [tripDays, trip.location]);\r\n-\r\n-  const handleAddRecommendation = (rec: RecommendationItem, dayNumber: number) => {\r\n-    const dayData = tripDays.find(d => d.day === dayNumber);\r\n-    \r\n-    const newDestination: Destination = {\r\n-      id: crypto.randomUUID(),\r\n-      tripId: trip.id,\r\n-      locationName: rec.name,\r\n-      address: rec.address,\r\n-      lat: rec.lat,\r\n-      lng: rec.lng,\r\n-      day: dayNumber,\r\n-      orderIndex: (dayData?.destinations.length || 0) + 1,\r\n-      notes: rec.description,\r\n-      category: rec.category,\r\n-      rating: rec.rating,\r\n-      photos: rec.photo ? [rec.photo] : [],\r\n-      createdAt: new Date(),\r\n-      updatedAt: new Date(),\r\n-    };\r\n-    \r\n-    onLocationSelect(newDestination);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"h-full flex flex-col bg-white\">\r\n-      {/* Header */}\r\n-      <div className=\"p-4 border-b border-gray-200\">\r\n-        <div className=\"flex items-center justify-between\">\r\n-          <div>\r\n-            <h2 className=\"text-lg font-semibold text-gray-900\">Itinerary</h2>\r\n-            <p className=\"text-sm text-gray-600\">\r\n-              {tripDays.length} days â€¢ {tripDays.reduce((acc, day) => acc + day.destinations.length, 0)} destinations\r\n-            </p>\r\n-          </div>\r\n-          {isReordering && (\r\n-            <div className=\"flex items-center text-sm text-gray-500\">\r\n-              <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n-                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n-                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n-              </svg>\r\n-              Updating...\r\n-            </div>\r\n-          )}\r\n-        </div>\r\n-      </div>\r\n-\r\n-      {/* Days List with Cross-Day Dragging */}\r\n-      <div className=\"flex-1 overflow-y-auto\">\r\n-        <DndContext\r\n-          sensors={sensors}\r\n-          collisionDetection={closestCenter}\r\n-          onDragStart={handleDragStart}\r\n-          onDragOver={handleDragOver}\r\n-          onDragEnd={handleDragEnd}\r\n-        >\r\n-          <SortableContext \r\n-            items={allDestinations.map(dest => dest.id)}\r\n-            strategy={verticalListSortingStrategy}\r\n-          >\r\n-            {tripDays.map((day) => (\r\n-              <DroppableDay\r\n-                key={day.day}\r\n-                day={day}\r\n-                isOver={overId === `day-${day.day}`}\r\n-              >\r\n-                <div className=\"border-b border-gray-100 last:border-b-0\">\r\n-                  {/* Day Header */}\r\n-                  <button\r\n-                    onClick={() => toggleDay(day.day)}\r\n-                    className={`w-full p-4 text-left hover:bg-gray-50 transition-colors ${\r\n-                      selectedDay === day.day ? 'bg-blue-50' : ''\r\n-                    }`}\r\n-                  >\r\n-                    <div className=\"flex items-center justify-between\">\r\n-                      <div className=\"flex items-center space-x-3\">\r\n-                        <div \r\n-                          className={`w-6 h-6 rounded-full flex items-center justify-center text-white text-sm font-medium`}\r\n-                          style={{ backgroundColor: day.color.pin }}\r\n-                        >\r\n-                          {day.day}\r\n-                        </div>\r\n-                        <div>\r\n-                          <h3 className=\"font-medium text-gray-900\">\r\n-                            Day {day.day}\r\n-                          </h3>\r\n-                          <p className=\"text-sm text-gray-600\">\r\n-                            {format(parseISO(day.date), 'MMM d, yyyy')}\r\n-                          </p>\r\n-                        </div>\r\n-                      </div>\r\n-                      <div className=\"flex items-center space-x-2\">\r\n-                        <span className=\"text-sm text-gray-500\">\r\n-                          {day.destinations.length} stops\r\n-                        </span>\r\n-                        <svg \r\n-                          className={`w-4 h-4 text-gray-400 transition-transform ${\r\n-                            expandedDays.has(day.day) ? 'rotate-180' : ''\r\n-                          }`}\r\n-                          fill=\"none\" \r\n-                          stroke=\"currentColor\" \r\n-                          viewBox=\"0 0 24 24\"\r\n-                        >\r\n-                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n-                        </svg>\r\n-                      </div>\r\n-                    </div>\r\n-                  </button>\r\n-\r\n-                  {/* Destinations List */}\r\n-                  {expandedDays.has(day.day) && (\r\n-                    <div className=\"bg-gray-50\">\r\n-                      {day.destinations.length === 0 ? (\r\n-                        <div className=\"p-4 text-center text-gray-500\">\r\n-                          <svg className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\r\n-                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n-                          </svg>\r\n-                          <p className=\"text-sm\">No destinations added yet</p>\r\n-                          <p className=\"text-xs text-gray-400 mt-1\">Click on the map to add destinations</p>\r\n-                        </div>\r\n-                      ) : (\r\n-                        <div className=\"space-y-0\">\r\n-                          {day.destinations.map((destination, index) => (\r\n-                            <SortableDestination\r\n-                              key={destination.id}\r\n-                              destination={destination}\r\n-                              dayColor={day.color}\r\n-                              selectedDestination={selectedDestination}\r\n-                              onDestinationSelect={onDestinationSelect}\r\n-                              onDestinationDelete={onDestinationDelete}\r\n-                              isLastItem={index === day.destinations.length - 1}\r\n-                            />\r\n-                          ))}\r\n-                        </div>\r\n-                      )}\r\n-                      \r\n-                      {/* Add Destination - Location Search */}\r\n-                      <div className=\"p-4 border-t border-gray-200\">\r\n-                        <LocationSearch\r\n-                          onLocationSelect={(destination) => {\r\n-                            // Set the destination's day and order index\r\n-                            const updatedDestination = {\r\n-                              ...destination,\r\n-                              day: day.day,\r\n-                              orderIndex: day.destinations.length + 1,\r\n-                            };\r\n-                            onLocationSelect(updatedDestination);\r\n-                            onDaySelect(day.day);\r\n-                          }}\r\n-                          selectedDay={day.day}\r\n-                          tripId={trip.id}\r\n-                          placeholder={`Search places for Day ${day.day}...`}\r\n-                          className=\"w-full\"\r\n-                        />\r\n-                        \r\n-                        {/* Day-specific recommendations */}\r\n-                        {day.destinations.length > 0 && dayRecommendations[day.day] && dayRecommendations[day.day].length > 0 && (\r\n-                          <div className=\"mt-3 pt-3 border-t border-gray-100\">\r\n-                            <h4 className=\"text-xs font-medium text-gray-600 mb-2\">Recommended nearby</h4>\r\n-                            <div className=\"flex space-x-2 overflow-x-auto\">\r\n-                              {dayRecommendations[day.day].map((rec) => (\r\n-                                <div key={rec.id} className=\"flex-shrink-0 w-32 h-16 bg-white border border-gray-200 rounded-md overflow-hidden group hover:shadow-sm transition-shadow\">\r\n-                                  <div className=\"h-full flex\">\r\n-                                    {/* Square image */}\r\n-                                    <div className=\"w-12 h-16 bg-gray-100 flex-shrink-0\">\r\n-                                      {rec.photo ? (\r\n-                                        <img \r\n-                                          src={rec.photo} \r\n-                                          alt={rec.name}\r\n-                                          className=\"w-full h-full object-cover\"\r\n-                                        />\r\n-                                      ) : (\r\n-                                        <div className=\"w-full h-full flex items-center justify-center\">\r\n-                                          <svg className=\"w-3 h-3 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\r\n-                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n-                                          </svg>\r\n-                                        </div>\r\n-                                      )}\r\n-                                    </div>\r\n-                                    \r\n-                                    {/* Content */}\r\n-                                    <div className=\"flex-1 p-1.5 flex flex-col justify-between\">\r\n-                                      <div className=\"min-w-0\">\r\n-                                        <p className=\"text-xs font-medium text-gray-900 truncate\">{rec.name}</p>\r\n-                                        <p className=\"text-xs text-gray-500 truncate\">{rec.description}</p>\r\n-                                      </div>\r\n-                                      <button\r\n-                                        onClick={() => handleAddRecommendation(rec, day.day)}\r\n-                                        className=\"self-end w-4 h-4 bg-primary-600 text-white rounded-full flex items-center justify-center hover:bg-primary-700 transition-colors\"\r\n-                                      >\r\n-                                        <svg className=\"w-2.5 h-2.5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n-                                        </svg>\r\n-                                      </button>\r\n-                                    </div>\r\n-                                  </div>\r\n-                                </div>\r\n-                              ))}\r\n-                            </div>\r\n-                          </div>\r\n-                        )}\r\n-                      </div>\r\n-                    </div>\r\n-                  )}\r\n-                </div>\r\n-              </DroppableDay>\r\n-            ))}\r\n-          </SortableContext>\r\n-        </DndContext>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n+'use client';\n+\n+import { useState } from 'react';\n+import { Trip, Destination, TripDay } from '@/types';\n+import { format, parseISO } from 'date-fns';\n+import LocationSearch from './LocationSearch';\n+import SmartRecommendations from './SmartRecommendations';\n+import {\n+  DndContext,\n+  closestCenter,\n+  KeyboardSensor,\n+  PointerSensor,\n+  useSensor,\n+  useSensors,\n+  DragEndEvent,\n+  DragOverEvent,\n+  DragOverlay,\n+  useDraggable,\n+  useDroppable,\n+  UniqueIdentifier,\n+} from '@dnd-kit/core';\n+import {\n+  SortableContext,\n+  sortableKeyboardCoordinates,\n+  verticalListSortingStrategy,\n+  useSortable,\n+} from '@dnd-kit/sortable';\n+import {\n+  CSS,\n+} from '@dnd-kit/utilities';\n+import { reorderDestinations, moveDestinationToDay } from '@/lib/destination-service';\n+\n+interface ItineraryPanelProps {\n+  trip: Trip;\n+  tripDays: TripDay[];\n+  selectedDay: number;\n+  selectedDestination: Destination | null;\n+  onDaySelect: (day: number) => void;\n+  onDestinationSelect: (destination: Destination) => void;\n+  onDestinationsChange: (destinations: Destination[]) => void;\n+  onLocationSelect: (destination: Destination) => void;\n+  onDestinationDelete: (destinationId: string) => void;\n+}\n+\n+// Droppable day container component\n+function DroppableDay({ \n+  day, \n+  children, \n+  isOver \n+}: { \n+  day: TripDay; \n+  children: React.ReactNode;\n+  isOver: boolean;\n+}) {\n+  const { setNodeRef } = useDroppable({\n+    id: `day-${day.day}`,\n+  });\n+\n+  return (\n+    <div \n+      ref={setNodeRef}\n+      className={`transition-colors ${isOver ? 'bg-blue-50' : ''}`}\n+    >\n+      {children}\n+    </div>\n+  );\n+}\n+\n+// Sortable destination item component\n+function SortableDestination({ \n+  destination, \n+  dayColor, \n+  selectedDestination,\n+  onDestinationSelect,\n+  onDestinationDelete,\n+  isLastItem \n+}: {\n+  destination: Destination;\n+  dayColor: any;\n+  selectedDestination: Destination | null;\n+  onDestinationSelect: (destination: Destination) => void;\n+  onDestinationDelete: (destinationId: string) => void;\n+  isLastItem: boolean;\n+}) {\n+  const {\n+    attributes,\n+    listeners,\n+    setNodeRef,\n+    transform,\n+    transition,\n+    isDragging,\n+  } = useSortable({ id: destination.id });\n+\n+  const style = {\n+    transform: CSS.Transform.toString(transform),\n+    transition,\n+  };\n+\n+  const formatTime = (time: string) => {\n+    if (!time) return '';\n+    try {\n+      const [hours, minutes] = time.split(':');\n+      const date = new Date();\n+      date.setHours(parseInt(hours), parseInt(minutes));\n+      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n+    } catch {\n+      return time;\n+    }\n+  };\n+\n+  const isSelected = selectedDestination?.id === destination.id;\n+\n+  return (\n+    <div ref={setNodeRef} style={style} className={isDragging ? 'opacity-50' : ''}>\n+      <button\n+        onClick={() => onDestinationSelect(destination)}\n+        className={`w-full p-4 text-left hover:bg-gray-100 transition-colors group relative ${\n+          isSelected ? 'bg-blue-50 border-l-4 border-blue-500' : ''\n+        }`}\n+      >\n+        <div className=\"flex items-start space-x-3\">\n+          {/* Drag Handle */}\n+          <div \n+            {...attributes}\n+            {...listeners}\n+            className=\"flex-shrink-0 mt-1 cursor-grab active:cursor-grabbing\"\n+          >\n+            <svg className=\"w-4 h-4 text-gray-400 hover:text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n+              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 8h16M4 16h16\" />\n+            </svg>\n+          </div>\n+\n+          {/* Pin Number - Teardrop shape matching map */}\n+          <div className=\"flex-shrink-0 mt-0.5\">\n+            <svg \n+              width=\"24\" \n+              height=\"24\" \n+              viewBox=\"0 0 24 24\" \n+              className=\"w-6 h-6\"\n+            >\n+              <path \n+                d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7z\"\n+                fill={isSelected ? '#3B82F6' : dayColor.pin}\n+                stroke=\"#FFFFFF\"\n+                strokeWidth=\"2\"\n+              />\n+              <text \n+                x=\"12\" \n+                y=\"13\" \n+                textAnchor=\"middle\" \n+                className=\"text-white text-xs font-medium fill-current\"\n+                style={{ fontSize: '12px' }}\n+              >\n+                {destination.orderIndex}\n+              </text>\n+            </svg>\n+          </div>\n+          \n+          <div className=\"flex-1 min-w-0\">\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"flex items-center space-x-2 min-w-0\">\n+                <h4 className=\"font-medium text-gray-900 truncate\">\n+                  {destination.locationName}\n+                </h4>\n+                {/* Compact photo for selected destinations */}\n+                {isSelected && destination.photos && destination.photos.length > 0 && (\n+                  <img \n+                    src={destination.photos[0]} \n+                    alt={destination.locationName}\n+                    className=\"w-8 h-8 object-cover rounded-lg flex-shrink-0\"\n+                    onError={(e) => {\n+                      (e.target as HTMLImageElement).style.display = 'none';\n+                    }}\n+                  />\n+                )}\n+              </div>\n+              <div className=\"flex items-center space-x-2\">\n+                {destination.startTime && (\n+                  <span className=\"text-sm text-gray-500 flex-shrink-0\">\n+                    {formatTime(destination.startTime)}\n+                  </span>\n+                )}\n+                <button\n+                  onClick={(e) => {\n+                    e.stopPropagation();\n+                    onDestinationDelete(destination.id);\n+                  }}\n+                  className=\"text-red-500 hover:text-red-700 hover:bg-red-50 rounded-lg p-1 transition-colors opacity-0 group-hover:opacity-100 flex-shrink-0\"\n+                  title=\"Delete destination\"\n+                >\n+                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n+                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n+                  </svg>\n+                </button>\n+              </div>\n+            </div>\n+            <p className=\"text-sm text-gray-600 truncate\">\n+              {destination.address}\n+            </p>\n+            {destination.notes && (\n+              <p className=\"text-sm text-gray-500 mt-1 line-clamp-2\">\n+                {destination.notes}\n+              </p>\n+            )}\n+            \n+            {/* Compact details for selected destinations */}\n+            {isSelected && (\n+              <div className=\"flex items-center space-x-4 mt-2 text-xs\">\n+                {destination.category && (\n+                  <span className=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n+                    {destination.category}\n+                  </span>\n+                )}\n+                {destination.rating && (\n+                  <div className=\"flex items-center space-x-1\">\n+                    <svg className=\"w-3 h-3 text-yellow-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n+                      <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n+                    </svg>\n+                    <span className=\"text-gray-600\">{destination.rating}</span>\n+                  </div>\n+                )}\n+                {/* Close button for selected destinations */}\n+                <button\n+                  onClick={(e) => {\n+                    e.stopPropagation();\n+                    onDestinationSelect(null as any);\n+                  }}\n+                  className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n+                  title=\"Clear selection\"\n+                >\n+                  <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n+                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n+                  </svg>\n+                </button>\n+              </div>\n+            )}\n+          </div>\n+        </div>\n+      </button>\n+      \n+      {/* Connector line */}\n+      {!isLastItem && (\n+        <div className=\"flex justify-start ml-11\">\n+          <div className=\"w-0.5 h-4 bg-gray-300\"></div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+}\n+\n+export default function ItineraryPanel({\n+  trip,\n+  tripDays,\n+  selectedDay,\n+  selectedDestination,\n+  onDaySelect,\n+  onDestinationSelect,\n+  onDestinationsChange,\n+  onLocationSelect,\n+  onDestinationDelete,\n+}: ItineraryPanelProps) {\n+  const [expandedDays, setExpandedDays] = useState<Set<number>>(new Set([1]));\n+  const [isReordering, setIsReordering] = useState(false);\n+  const [activeId, setActiveId] = useState<string | null>(null);\n+  const [overId, setOverId] = useState<UniqueIdentifier | null>(null);\n+\n+  const sensors = useSensors(\n+    useSensor(PointerSensor, {\n+      activationConstraint: {\n+        distance: 8,\n+      },\n+    }),\n+    useSensor(KeyboardSensor, {\n+      coordinateGetter: sortableKeyboardCoordinates,\n+    })\n+  );\n+\n+  const toggleDay = (day: number) => {\n+    const newExpanded = new Set(expandedDays);\n+    if (newExpanded.has(day)) {\n+      newExpanded.delete(day);\n+    } else {\n+      newExpanded.add(day);\n+    }\n+    setExpandedDays(newExpanded);\n+    onDaySelect(day);\n+  };\n+\n+  // Get all destinations for sortable context\n+  const allDestinations = tripDays.flatMap(day => day.destinations);\n+\n+  const handleDragStart = (event: any) => {\n+    setActiveId(event.active.id);\n+  };\n+\n+  const handleDragOver = (event: DragOverEvent) => {\n+    setOverId(event.over?.id || null);\n+  };\n+\n+  const handleDragEnd = async (event: DragEndEvent) => {\n+    const { active, over } = event;\n+    \n+    setActiveId(null);\n+    setOverId(null);\n+    \n+    if (!over || active.id === over.id) {\n+      return;\n+    }\n+\n+    const draggedDestination = allDestinations.find(dest => dest.id === active.id);\n+    if (!draggedDestination) return;\n+\n+    setIsReordering(true);\n+\n+    try {\n+      // Check if we're dropping on a day container or another destination\n+      const isDroppedOnDay = over.id.toString().startsWith('day-');\n+      \n+      if (isDroppedOnDay) {\n+        // Cross-day drop - move to end of target day\n+        const targetDay = parseInt(over.id.toString().replace('day-', ''));\n+        const targetDayData = tripDays.find(d => d.day === targetDay);\n+        \n+        if (targetDayData && targetDay !== draggedDestination.day) {\n+          // Calculate proper sequential order index\n+          const newOrderIndex = targetDayData.destinations.length + 1;\n+          \n+          // Update in database\n+          await moveDestinationToDay(draggedDestination.id, targetDay, newOrderIndex);\n+          \n+          // Create updated destinations with proper renumbering\n+          const updatedDestinations = allDestinations.map(dest => {\n+            if (dest.id === draggedDestination.id) {\n+              return {\n+                ...dest,\n+                day: targetDay,\n+                orderIndex: newOrderIndex\n+              };\n+            }\n+            return dest;\n+          });\n+\n+          // Renumber all destinations in both source and target days\n+          const finalDestinations = renumberDestinationsInDays(updatedDestinations, [draggedDestination.day, targetDay]);\n+          \n+          onDestinationsChange(finalDestinations);\n+        }\n+      } else {\n+        // Same day or destination-to-destination drop\n+        const targetDestination = allDestinations.find(dest => dest.id === over.id);\n+        if (!targetDestination) return;\n+\n+        const sourceDay = draggedDestination.day;\n+        const targetDay = targetDestination.day;\n+\n+        if (sourceDay === targetDay) {\n+          // Same day reordering\n+          const dayData = tripDays.find(d => d.day === sourceDay);\n+          if (!dayData) return;\n+\n+          const oldIndex = dayData.destinations.findIndex(dest => dest.id === active.id);\n+          const newIndex = dayData.destinations.findIndex(dest => dest.id === over.id);\n+\n+          if (oldIndex === newIndex) return;\n+\n+          // Create new order array\n+          const newDestinations = [...dayData.destinations];\n+          const [movedItem] = newDestinations.splice(oldIndex, 1);\n+          newDestinations.splice(newIndex, 0, movedItem);\n+\n+          // Update order indices sequentially\n+          const reorderedDestinations = newDestinations.map((dest, index) => ({\n+            ...dest,\n+            orderIndex: index + 1\n+          }));\n+\n+          // Update destinations in parent component\n+          const updatedAllDestinations = allDestinations.map(dest => {\n+            const updated = reorderedDestinations.find(rd => rd.id === dest.id);\n+            return updated || dest;\n+          });\n+          \n+          onDestinationsChange(updatedAllDestinations);\n+\n+          // Save to database\n+          const destinationIds = reorderedDestinations.map(dest => dest.id);\n+          await reorderDestinations(trip.id, sourceDay, destinationIds);\n+        } else {\n+          // Cross-day drop next to specific destination\n+          const targetDayData = tripDays.find(d => d.day === targetDay);\n+          if (!targetDayData) return;\n+\n+          const targetIndex = targetDayData.destinations.findIndex(dest => dest.id === over.id);\n+          \n+          // Insert the destination at the target position\n+          const updatedTargetDestinations = [...targetDayData.destinations];\n+          updatedTargetDestinations.splice(targetIndex + 1, 0, {\n+            ...draggedDestination,\n+            day: targetDay,\n+            orderIndex: targetIndex + 2 // Temporary index, will be renumbered\n+          });\n+\n+          // Update in database with proper order index\n+          await moveDestinationToDay(draggedDestination.id, targetDay, targetIndex + 2);\n+\n+          // Create updated destinations array\n+          const updatedDestinations = allDestinations\n+            .filter(dest => dest.id !== draggedDestination.id) // Remove from source\n+            .map(dest => {\n+              // Update target day destinations\n+              if (dest.day === targetDay) {\n+                const updated = updatedTargetDestinations.find(rd => rd.id === dest.id);\n+                return updated || dest;\n+              }\n+              return dest;\n+            })\n+            .concat([{\n+              ...draggedDestination,\n+              day: targetDay,\n+              orderIndex: targetIndex + 2 // Temporary, will be renumbered\n+            }]);\n+\n+          // Renumber all destinations in both affected days\n+          const finalDestinations = renumberDestinationsInDays(updatedDestinations, [sourceDay, targetDay]);\n+          \n+          onDestinationsChange(finalDestinations);\n+\n+          // Reorder target day in database with proper sequential IDs\n+          const targetDayDestinations = finalDestinations.filter(dest => dest.day === targetDay);\n+          const targetDayIds = targetDayDestinations\n+            .sort((a, b) => (a.orderIndex || 0) - (b.orderIndex || 0))\n+            .map(dest => dest.id);\n+          await reorderDestinations(trip.id, targetDay, targetDayIds);\n+        }\n+      }\n+    } catch (error) {\n+      console.error('Error handling drag:', error);\n+    } finally {\n+      setIsReordering(false);\n+    }\n+  };\n+\n+  // Helper function to renumber destinations sequentially within specified days\n+  const renumberDestinationsInDays = (destinations: Destination[], daysToRenumber: number[]): Destination[] => {\n+    return destinations.map(dest => {\n+      if (daysToRenumber.includes(dest.day)) {\n+        // Get all destinations for this day and sort by current order\n+        const dayDestinations = destinations\n+          .filter(d => d.day === dest.day)\n+          .sort((a, b) => (a.orderIndex || 0) - (b.orderIndex || 0));\n+        \n+        // Find the new sequential index\n+        const newIndex = dayDestinations.findIndex(d => d.id === dest.id) + 1;\n+        \n+        return {\n+          ...dest,\n+          orderIndex: newIndex\n+        };\n+      }\n+      return dest;\n+    });\n+  };\n+\n+  return (\n+    <div className=\"h-full flex flex-col bg-white\">\n+      {/* Header */}\n+      <div className=\"p-4 border-b border-gray-200\">\n+        <div className=\"flex items-center justify-between\">\n+          <div>\n+            <h2 className=\"text-lg font-semibold text-gray-900\">Itinerary</h2>\n+            <p className=\"text-sm text-gray-600\">\n+              {tripDays.length} days â€¢ {tripDays.reduce((acc, day) => acc + day.destinations.length, 0)} destinations\n+            </p>\n+          </div>\n+          {isReordering && (\n+            <div className=\"flex items-center text-sm text-gray-500\">\n+              <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\n+                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n+                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n+              </svg>\n+              Updating...\n+            </div>\n+          )}\n+        </div>\n+      </div>\n+\n+      {/* Days List with Cross-Day Dragging */}\n+      <div className=\"flex-1 overflow-y-auto\">\n+        <DndContext\n+          sensors={sensors}\n+          collisionDetection={closestCenter}\n+          onDragStart={handleDragStart}\n+          onDragOver={handleDragOver}\n+          onDragEnd={handleDragEnd}\n+        >\n+          <SortableContext \n+            items={allDestinations.map(dest => dest.id)}\n+            strategy={verticalListSortingStrategy}\n+          >\n+            {tripDays.map((day) => (\n+              <DroppableDay\n+                key={day.day}\n+                day={day}\n+                isOver={overId === `day-${day.day}`}\n+              >\n+                <div className=\"border-b border-gray-100 last:border-b-0\">\n+                  {/* Day Header */}\n+                  <button\n+                    onClick={() => toggleDay(day.day)}\n+                    className={`w-full p-4 text-left hover:bg-gray-50 transition-colors ${\n+                      selectedDay === day.day ? 'bg-blue-50' : ''\n+                    }`}\n+                  >\n+                    <div className=\"flex items-center justify-between\">\n+                      <div className=\"flex items-center space-x-3\">\n+                        <div \n+                          className={`w-6 h-6 rounded-full flex items-center justify-center text-white text-sm font-medium`}\n+                          style={{ backgroundColor: day.color.pin }}\n+                        >\n+                          {day.day}\n+                        </div>\n+                        <div>\n+                          <h3 className=\"font-medium text-gray-900\">\n+                            Day {day.day}\n+                          </h3>\n+                          <p className=\"text-sm text-gray-600\">\n+                            {format(parseISO(day.date), 'MMM d, yyyy')}\n+                          </p>\n+                        </div>\n+                      </div>\n+                      <div className=\"flex items-center space-x-2\">\n+                        <span className=\"text-sm text-gray-500\">\n+                          {day.destinations.length} stops\n+                        </span>\n+                        <svg \n+                          className={`w-4 h-4 text-gray-400 transition-transform ${\n+                            expandedDays.has(day.day) ? 'rotate-180' : ''\n+                          }`}\n+                          fill=\"none\" \n+                          stroke=\"currentColor\" \n+                          viewBox=\"0 0 24 24\"\n+                        >\n+                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n+                        </svg>\n+                      </div>\n+                    </div>\n+                  </button>\n+\n+                  {/* Destinations List */}\n+                  {expandedDays.has(day.day) && (\n+                    <div className=\"bg-gray-50\">\n+                      {day.destinations.length === 0 ? (\n+                        <div className=\"p-4 text-center text-gray-500\">\n+                          <svg className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n+                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\n+                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n+                          </svg>\n+                          <p className=\"text-sm\">No destinations added yet</p>\n+                          <p className=\"text-xs text-gray-400 mt-1\">Click on the map to add destinations</p>\n+                        </div>\n+                      ) : (\n+                        <div className=\"space-y-0\">\n+                          {day.destinations.map((destination, index) => (\n+                            <SortableDestination\n+                              key={destination.id}\n+                              destination={destination}\n+                              dayColor={day.color}\n+                              selectedDestination={selectedDestination}\n+                              onDestinationSelect={onDestinationSelect}\n+                              onDestinationDelete={onDestinationDelete}\n+                              isLastItem={index === day.destinations.length - 1}\n+                            />\n+                          ))}\n+                        </div>\n+                      )}\n+                      \n+                      {/* Add Destination - Location Search */}\n+                      <div className=\"p-4 border-t border-gray-200\">\n+                        <LocationSearch\n+                          onLocationSelect={(destination) => {\n+                            // Set the destination's day and order index\n+                            const updatedDestination = {\n+                              ...destination,\n+                              day: day.day,\n+                              orderIndex: day.destinations.length + 1,\n+                            };\n+                            onLocationSelect(updatedDestination);\n+                            onDaySelect(day.day);\n+                          }}\n+                          selectedDay={day.day}\n+                          tripId={trip.id}\n+                          placeholder={`Search places for Day ${day.day}...`}\n+                          className=\"w-full\"\n+                        />\n+                        \n+                        {/* Alternative: Click on map hint */}\n+                        <div className=\"mt-2 text-center\">\n+                          <span className=\"text-xs text-gray-500\">\n+                            or click on the map to add a destination\n+                          </span>\n+                        </div>\n+                      </div>\n+                    </div>\n+                  )}\n+                </div>\n+              </DroppableDay>\n+            ))}\n+          </SortableContext>\n+        </DndContext>\n+        \n+        {/* Smart Recommendations - Inside scrollable area */}\n+        <SmartRecommendations\n+          trip={trip}\n+          tripDays={tripDays}\n+          selectedDay={selectedDay}\n+          onDestinationAdd={onLocationSelect}\n+          existingDestinations={tripDays.flatMap(day => day.destinations)}\n+        />\n+      </div>\n+    </div>\n+  );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752495084299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -592,14 +592,17 @@\n                           placeholder={`Search places for Day ${day.day}...`}\n                           className=\"w-full\"\n                         />\n                         \n-                        {/* Alternative: Click on map hint */}\n-                        <div className=\"mt-2 text-center\">\n-                          <span className=\"text-xs text-gray-500\">\n-                            or click on the map to add a destination\n-                          </span>\n-                        </div>\n+                        \n+                        {/* Smart Recommendations for this day */}\n+                        <SmartRecommendations\n+                          trip={trip}\n+                          tripDays={tripDays}\n+                          selectedDay={day.day}\n+                          onDestinationAdd={onLocationSelect}\n+                          existingDestinations={tripDays.flatMap(d => d.destinations)}\n+                        />\n                       </div>\n                     </div>\n                   )}\n                 </div>\n"
                },
                {
                    "date": 1752495217930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -592,17 +592,14 @@\n                           placeholder={`Search places for Day ${day.day}...`}\n                           className=\"w-full\"\n                         />\n                         \n-                        \n-                        {/* Smart Recommendations for this day */}\n-                        <SmartRecommendations\n-                          trip={trip}\n-                          tripDays={tripDays}\n-                          selectedDay={day.day}\n-                          onDestinationAdd={onLocationSelect}\n-                          existingDestinations={tripDays.flatMap(d => d.destinations)}\n-                        />\n+                        {/* Alternative: Click on map hint */}\n+                        <div className=\"mt-2 text-center\">\n+                          <span className=\"text-xs text-gray-500\">\n+                            or click on the map to add a destination\n+                          </span>\n+                        </div>\n                       </div>\n                     </div>\n                   )}\n                 </div>\n"
                },
                {
                    "date": 1752495237041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -599,8 +599,17 @@\n                             or click on the map to add a destination\n                           </span>\n                         </div>\n                       </div>\n+                      \n+                      {/* Smart Recommendations for this day */}\n+                      <SmartRecommendations\n+                        trip={trip}\n+                        tripDays={tripDays}\n+                        selectedDay={day.day}\n+                        onDestinationAdd={onLocationSelect}\n+                        existingDestinations={tripDays.flatMap(d => d.destinations)}\n+                      />\n                     </div>\n                   )}\n                 </div>\n               </DroppableDay>\n"
                },
                {
                    "date": 1752495245303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -615,17 +615,8 @@\n               </DroppableDay>\n             ))}\n           </SortableContext>\n         </DndContext>\n-        \n-        {/* Smart Recommendations - Inside scrollable area */}\n-        <SmartRecommendations\n-          trip={trip}\n-          tripDays={tripDays}\n-          selectedDay={selectedDay}\n-          onDestinationAdd={onLocationSelect}\n-          existingDestinations={tripDays.flatMap(day => day.destinations)}\n-        />\n       </div>\n     </div>\n   );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752495326503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -592,14 +592,9 @@\n                           placeholder={`Search places for Day ${day.day}...`}\n                           className=\"w-full\"\n                         />\n                         \n-                        {/* Alternative: Click on map hint */}\n-                        <div className=\"mt-2 text-center\">\n-                          <span className=\"text-xs text-gray-500\">\n-                            or click on the map to add a destination\n-                          </span>\n-                        </div>\n+\n                       </div>\n                       \n                       {/* Smart Recommendations for this day */}\n                       <SmartRecommendations\n"
                }
            ],
            "date": 1752433683232,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { Trip, Destination, TripDay } from '@/types';\r\nimport { format, parseISO } from 'date-fns';\r\n\r\ninterface ItineraryPanelProps {\r\n  trip: Trip;\r\n  tripDays: TripDay[];\r\n  selectedDay: number;\r\n  selectedDestination: Destination | null;\r\n  onDaySelect: (day: number) => void;\r\n  onDestinationSelect: (destination: Destination) => void;\r\n  onDestinationsChange: (destinations: Destination[]) => void;\r\n}\r\n\r\nexport default function ItineraryPanel({\r\n  trip,\r\n  tripDays,\r\n  selectedDay,\r\n  selectedDestination,\r\n  onDaySelect,\r\n  onDestinationSelect,\r\n  onDestinationsChange,\r\n}: ItineraryPanelProps) {\r\n  const [expandedDays, setExpandedDays] = useState<Set<number>>(new Set([1]));\r\n\r\n  const toggleDay = (day: number) => {\r\n    const newExpanded = new Set(expandedDays);\r\n    if (newExpanded.has(day)) {\r\n      newExpanded.delete(day);\r\n    } else {\r\n      newExpanded.add(day);\r\n    }\r\n    setExpandedDays(newExpanded);\r\n    onDaySelect(day);\r\n  };\r\n\r\n  const formatTime = (time: string) => {\r\n    if (!time) return '';\r\n    try {\r\n      const [hours, minutes] = time.split(':');\r\n      const date = new Date();\r\n      date.setHours(parseInt(hours), parseInt(minutes));\r\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n    } catch {\r\n      return time;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-full flex flex-col\">\r\n      {/* Header */}\r\n      <div className=\"p-4 border-b border-gray-200\">\r\n        <h2 className=\"text-lg font-semibold text-gray-900\">Itinerary</h2>\r\n        <p className=\"text-sm text-gray-600\">\r\n          {tripDays.length} days â€¢ {tripDays.reduce((acc, day) => acc + day.destinations.length, 0)} destinations\r\n        </p>\r\n      </div>\r\n\r\n      {/* Days List */}\r\n      <div className=\"flex-1 overflow-y-auto\">\r\n        {tripDays.map((day) => (\r\n          <div key={day.day} className=\"border-b border-gray-100 last:border-b-0\">\r\n            {/* Day Header */}\r\n            <button\r\n              onClick={() => toggleDay(day.day)}\r\n              className={`w-full p-4 text-left hover:bg-gray-50 transition-colors ${\r\n                selectedDay === day.day ? 'bg-blue-50' : ''\r\n              }`}\r\n            >\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <div \r\n                    className={`w-6 h-6 rounded-full flex items-center justify-center text-white text-sm font-medium`}\r\n                    style={{ backgroundColor: day.color.pin }}\r\n                  >\r\n                    {day.day}\r\n                  </div>\r\n                  <div>\r\n                    <h3 className=\"font-medium text-gray-900\">\r\n                      Day {day.day}\r\n                    </h3>\r\n                    <p className=\"text-sm text-gray-600\">\r\n                      {format(parseISO(day.date), 'MMM d, yyyy')}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <span className=\"text-sm text-gray-500\">\r\n                    {day.destinations.length} stops\r\n                  </span>\r\n                  <svg \r\n                    className={`w-4 h-4 text-gray-400 transition-transform ${\r\n                      expandedDays.has(day.day) ? 'rotate-180' : ''\r\n                    }`}\r\n                    fill=\"none\" \r\n                    stroke=\"currentColor\" \r\n                    viewBox=\"0 0 24 24\"\r\n                  >\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n                  </svg>\r\n                </div>\r\n              </div>\r\n            </button>\r\n\r\n            {/* Destinations List */}\r\n            {expandedDays.has(day.day) && (\r\n              <div className=\"bg-gray-50\">\r\n                {day.destinations.length === 0 ? (\r\n                  <div className=\"p-4 text-center text-gray-500\">\r\n                    <svg className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n                    </svg>\r\n                    <p className=\"text-sm\">No destinations added yet</p>\r\n                    <p className=\"text-xs text-gray-400 mt-1\">Click on the map to add destinations</p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-0\">\r\n                    {day.destinations.map((destination, index) => (\r\n                      <div key={destination.id || index}>\r\n                        <button\r\n                          onClick={() => onDestinationSelect(destination)}\r\n                          className={`w-full p-4 text-left hover:bg-gray-100 transition-colors ${\r\n                            selectedDestination?.id === destination.id ? 'bg-blue-100' : ''\r\n                          }`}\r\n                        >\r\n                          <div className=\"flex items-start space-x-3\">\r\n                            <div \r\n                              className=\"w-6 h-6 rounded-full flex items-center justify-center text-white text-xs font-medium flex-shrink-0 mt-0.5\"\r\n                              style={{ backgroundColor: day.color.pin }}\r\n                            >\r\n                              {destination.orderIndex}\r\n                            </div>\r\n                            <div className=\"flex-1 min-w-0\">\r\n                              <div className=\"flex items-center justify-between\">\r\n                                <h4 className=\"font-medium text-gray-900 truncate\">\r\n                                  {destination.locationName}\r\n                                </h4>\r\n                                {destination.startTime && (\r\n                                  <span className=\"text-sm text-gray-500 flex-shrink-0 ml-2\">\r\n                                    {formatTime(destination.startTime)}\r\n                                  </span>\r\n                                )}\r\n                              </div>\r\n                              <p className=\"text-sm text-gray-600 truncate\">\r\n                                {destination.address}\r\n                              </p>\r\n                              {destination.notes && (\r\n                                <p className=\"text-sm text-gray-500 mt-1 line-clamp-2\">\r\n                                  {destination.notes}\r\n                                </p>\r\n                              )}\r\n                              <div className=\"flex items-center space-x-4 mt-2\">\r\n                                {destination.category && (\r\n                                  <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-700\">\r\n                                    {destination.category}\r\n                                  </span>\r\n                                )}\r\n                                {destination.rating && (\r\n                                  <div className=\"flex items-center space-x-1\">\r\n                                    <svg className=\"w-4 h-4 text-yellow-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                                      <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\r\n                                    </svg>\r\n                                    <span className=\"text-sm text-gray-600\">{destination.rating}</span>\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </button>\r\n                        \r\n                        {/* Connector line */}\r\n                        {index < day.destinations.length - 1 && (\r\n                          <div className=\"flex justify-start ml-7\">\r\n                            <div className=\"w-0.5 h-4 bg-gray-300\"></div>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n                \r\n                {/* Add Destination Button */}\r\n                <div className=\"p-4 border-t border-gray-200\">\r\n                  <button\r\n                    onClick={() => onDaySelect(day.day)}\r\n                    className=\"w-full flex items-center justify-center space-x-2 p-3 border-2 border-dashed border-gray-300 rounded-lg hover:border-gray-400 hover:bg-gray-50 transition-colors\"\r\n                  >\r\n                    <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n                    </svg>\r\n                    <span className=\"text-sm text-gray-600\">Add destination</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Footer */}\r\n      <div className=\"p-4 border-t border-gray-200\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n            </svg>\r\n            <span className=\"text-xs text-gray-500\">Click on the map to add destinations</span>\r\n          </div>\r\n          <button className=\"text-xs text-primary-600 hover:text-primary-700\">\r\n            Export\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} "
        }
    ]
}