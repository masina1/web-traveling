{
    "sourceFile": "components/trip/UngroupedDestinations.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754150141951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754150141948,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { Destination } from '@/types';\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n  DragEndEvent,\r\n} from '@dnd-kit/core';\r\nimport {\r\n  SortableContext,\r\n  sortableKeyboardCoordinates,\r\n  verticalListSortingStrategy,\r\n  useSortable,\r\n} from '@dnd-kit/sortable';\r\nimport { CSS } from '@dnd-kit/utilities';\r\nimport { ClockIcon, Bars3Icon } from '@heroicons/react/24/outline';\r\n\r\ninterface UngroupedDestinationsProps {\r\n  destinations: Destination[];\r\n  onDestinationSelect?: (destination: Destination) => void;\r\n  onDestinationDelete?: (destinationId: string) => void;\r\n  onAddTimeToDestination?: (destination: Destination) => void;\r\n  onReorderDestinations?: (destinations: Destination[]) => void;\r\n  selectedPinIds: string[];\r\n  handleCheckboxChange: (id: string, checked: boolean) => void;\r\n  viewMode: 'picture' | 'compact';\r\n  readOnly?: boolean;\r\n}\r\n\r\n// Sortable ungrouped destination component\r\nfunction SortableUngroupedDestination({ \r\n  destination, \r\n  onDestinationSelect,\r\n  onDestinationDelete,\r\n  onAddTimeToDestination,\r\n  selectedPinIds,\r\n  handleCheckboxChange,\r\n  viewMode,\r\n  readOnly = false\r\n}: {\r\n  destination: Destination;\r\n  onDestinationSelect?: (destination: Destination) => void;\r\n  onDestinationDelete?: (destinationId: string) => void;\r\n  onAddTimeToDestination?: (destination: Destination) => void;\r\n  selectedPinIds: string[];\r\n  handleCheckboxChange: (id: string, checked: boolean) => void;\r\n  viewMode: 'picture' | 'compact';\r\n  readOnly?: boolean;\r\n}) {\r\n  const {\r\n    attributes,\r\n    listeners,\r\n    setNodeRef,\r\n    transform,\r\n    transition,\r\n    isDragging,\r\n  } = useSortable({ id: destination.id });\r\n\r\n  const style = {\r\n    transform: CSS.Transform.toString(transform),\r\n    transition,\r\n  };\r\n\r\n  const imageUrl = destination.photos && destination.photos.length > 0 \r\n    ? destination.photos[0] \r\n    : '/default-location.jpg';\r\n\r\n  if (viewMode === 'picture') {\r\n    return (\r\n      <div\r\n        ref={setNodeRef}\r\n        style={style}\r\n        className={`group mb-2 cursor-grab ${isDragging ? 'opacity-50' : ''}`}\r\n        {...attributes}\r\n        {...listeners}\r\n      >\r\n        <div className=\"flex items-start space-x-3\">\r\n          {/* Checkbox */}\r\n          {!readOnly && (\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"mr-2 ml-4 mt-3\"\r\n              checked={selectedPinIds.includes(destination.id)}\r\n              onChange={e => handleCheckboxChange(destination.id, e.target.checked)}\r\n            />\r\n          )}\r\n          \r\n          {/* Drag handle on the far left */}\r\n          {!readOnly && (\r\n            <button\r\n              className=\"text-gray-400 hover:text-gray-600 pt-3 opacity-0 group-hover:opacity-100 transition-opacity\"\r\n              type=\"button\"\r\n            >\r\n              <Bars3Icon className=\"w-4 h-4\" />\r\n            </button>\r\n          )}\r\n\r\n          {/* Gray box with pin, name, and drag handle */}\r\n          <div className=\"relative flex items-center space-x-3 bg-gray-100 rounded-lg px-3 py-2 flex-1 min-w-0\">\r\n            {/* Ungrouped pin icon */}\r\n            <div className=\"flex-shrink-0\">\r\n              <div className=\"w-6 h-6 bg-gray-400 rounded-full flex items-center justify-center\">\r\n                <span className=\"text-white text-xs font-bold\">•</span>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex-1 min-w-0 ml-6\">\r\n              <h4 className=\"font-medium text-gray-900 truncate\">\r\n                {destination.locationName}\r\n              </h4>\r\n              <p className=\"text-sm text-gray-600 truncate\">\r\n                {destination.address}\r\n              </p>\r\n              {destination.category && (\r\n                <span className=\"inline-block px-2 py-1 text-xs bg-gray-200 text-gray-700 rounded-full mr-1 mt-1\">\r\n                  {destination.category}\r\n                </span>\r\n              )}\r\n            </div>\r\n\r\n            {/* Add time button */}\r\n            {!readOnly && onAddTimeToDestination && (\r\n              <button\r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  onAddTimeToDestination(destination);\r\n                }}\r\n                className=\"flex items-center space-x-1 px-3 py-1 text-xs bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200 transition-colors\"\r\n                type=\"button\"\r\n              >\r\n                <ClockIcon className=\"w-3 h-3\" />\r\n                <span>Add time</span>\r\n              </button>\r\n            )}\r\n\r\n            {/* Drag handle on the right inside the gray box */}\r\n            {!readOnly && (\r\n              <button\r\n                className=\"text-gray-400 hover:text-gray-600 opacity-0 group-hover:opacity-100 transition-opacity\"\r\n                type=\"button\"\r\n              >\r\n                <Bars3Icon className=\"w-4 h-4\" />\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          {/* Image */}\r\n          <div className=\"flex-shrink-0\">\r\n            <img\r\n              src={imageUrl}\r\n              alt={destination.locationName}\r\n              className=\"w-16 h-16 object-cover rounded-lg\"\r\n              onError={(e) => {\r\n                e.currentTarget.src = '/default-location.jpg';\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          {/* Trash can (delete button) */}\r\n          {!readOnly && onDestinationDelete && (\r\n            <button\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                onDestinationDelete(destination.id);\r\n              }}\r\n              className=\"text-gray-400 hover:text-red-500 opacity-0 group-hover:opacity-100 transition-all\"\r\n              type=\"button\"\r\n            >\r\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n              </svg>\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Compact view\r\n  return (\r\n    <div\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={`group mb-2 cursor-grab ${isDragging ? 'opacity-50' : ''}`}\r\n      {...attributes}\r\n      {...listeners}\r\n    >\r\n      <div className=\"flex items-center group mb-2\">\r\n        {/* Checkbox */}\r\n        {!readOnly && (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"mr-2 ml-4\"\r\n            checked={selectedPinIds.includes(destination.id)}\r\n            onChange={e => handleCheckboxChange(destination.id, e.target.checked)}\r\n          />\r\n        )}\r\n        \r\n        {/* Drag handle on the far left */}\r\n        {!readOnly && (\r\n          <button\r\n            className=\"text-gray-400 hover:text-gray-600 opacity-0 group-hover:opacity-100 transition-opacity\"\r\n            type=\"button\"\r\n          >\r\n            <Bars3Icon className=\"w-4 h-4\" />\r\n          </button>\r\n        )}\r\n\r\n        {/* Gray box with pin, name, and controls */}\r\n        <div className=\"relative flex items-center space-x-3 bg-gray-100 rounded-lg px-3 py-2 flex-1 min-w-0\">\r\n          {/* Ungrouped pin icon */}\r\n          <div className=\"flex-shrink-0\">\r\n            <div className=\"w-6 h-6 bg-gray-400 rounded-full flex items-center justify-center\">\r\n              <span className=\"text-white text-xs font-bold\">•</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex-1 min-w-0 ml-6\">\r\n            <h4 className=\"font-medium text-gray-900 truncate\">\r\n              {destination.locationName}\r\n            </h4>\r\n          </div>\r\n\r\n          {/* Add time button */}\r\n          {!readOnly && onAddTimeToDestination && (\r\n            <button\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                onAddTimeToDestination(destination);\r\n              }}\r\n              className=\"flex items-center space-x-1 px-3 py-1 text-xs bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200 transition-colors\"\r\n              type=\"button\"\r\n            >\r\n              <ClockIcon className=\"w-3 h-3\" />\r\n              <span>Add time</span>\r\n            </button>\r\n          )}\r\n\r\n          {/* Drag handle on the right inside the gray box */}\r\n          {!readOnly && (\r\n            <button\r\n              className=\"text-gray-400 hover:text-gray-600 opacity-0 group-hover:opacity-100 transition-opacity\"\r\n              type=\"button\"\r\n            >\r\n              <Bars3Icon className=\"w-4 h-4\" />\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Trash can (delete button) outside the gray box, right-aligned */}\r\n        {!readOnly && onDestinationDelete && (\r\n          <button\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              onDestinationDelete(destination.id);\r\n            }}\r\n            className=\"text-gray-400 hover:text-red-500 opacity-0 group-hover:opacity-100 transition-all ml-2\"\r\n            type=\"button\"\r\n          >\r\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n            </svg>\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function UngroupedDestinations({\r\n  destinations,\r\n  onDestinationSelect,\r\n  onDestinationDelete,\r\n  onAddTimeToDestination,\r\n  onReorderDestinations,\r\n  selectedPinIds,\r\n  handleCheckboxChange,\r\n  viewMode,\r\n  readOnly = false\r\n}: UngroupedDestinationsProps) {\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor),\r\n    useSensor(KeyboardSensor, {\r\n      coordinateGetter: sortableKeyboardCoordinates,\r\n    })\r\n  );\r\n\r\n  const handleDragEnd = (event: DragEndEvent) => {\r\n    const { active, over } = event;\r\n\r\n    if (active.id !== over?.id && onReorderDestinations) {\r\n      const oldIndex = destinations.findIndex(d => d.id === active.id);\r\n      const newIndex = destinations.findIndex(d => d.id === over?.id);\r\n      \r\n      if (oldIndex !== -1 && newIndex !== -1) {\r\n        const newDestinations = [...destinations];\r\n        const [reorderedItem] = newDestinations.splice(oldIndex, 1);\r\n        newDestinations.splice(newIndex, 0, reorderedItem);\r\n        \r\n        // Update order indices\r\n        const updatedDestinations = newDestinations.map((dest, index) => ({\r\n          ...dest,\r\n          orderIndex: index + 1\r\n        }));\r\n        \r\n        onReorderDestinations(updatedDestinations);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (destinations.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"border-b border-gray-200\">\r\n      {/* Header */}\r\n      <div className=\"p-4 bg-gray-50\">\r\n        <div className=\"flex items-center space-x-3\">\r\n          <div className=\"w-6 h-6 bg-gray-400 rounded-full flex items-center justify-center\">\r\n            <span className=\"text-white text-xs font-bold\">•</span>\r\n          </div>\r\n          <div>\r\n            <h3 className=\"font-medium text-gray-900\">Ungrouped</h3>\r\n            <p className=\"text-sm text-gray-600\">\r\n              Destinations without specific times\r\n            </p>\r\n          </div>\r\n          <div className=\"flex-1\"></div>\r\n          <span className=\"text-sm text-gray-500\">\r\n            {destinations.length} {destinations.length === 1 ? 'place' : 'places'}\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Destinations List */}\r\n      <div className=\"bg-gray-50 pb-4\">\r\n        <DndContext\r\n          sensors={sensors}\r\n          collisionDetection={closestCenter}\r\n          onDragEnd={handleDragEnd}\r\n        >\r\n          <SortableContext\r\n            items={destinations.map(d => d.id)}\r\n            strategy={verticalListSortingStrategy}\r\n          >\r\n            {destinations.map((destination) => (\r\n              <SortableUngroupedDestination\r\n                key={destination.id}\r\n                destination={destination}\r\n                onDestinationSelect={onDestinationSelect}\r\n                onDestinationDelete={onDestinationDelete}\r\n                onAddTimeToDestination={onAddTimeToDestination}\r\n                selectedPinIds={selectedPinIds}\r\n                handleCheckboxChange={handleCheckboxChange}\r\n                viewMode={viewMode}\r\n                readOnly={readOnly}\r\n              />\r\n            ))}\r\n          </SortableContext>\r\n        </DndContext>\r\n      </div>\r\n    </div>\r\n  );\r\n}"
        }
    ]
}