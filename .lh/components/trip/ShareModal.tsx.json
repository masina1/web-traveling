{
    "sourceFile": "components/trip/ShareModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754143387377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754143387377,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Trip, SharedUser } from '@/types';\r\nimport { \r\n  createShareLink, \r\n  shareWithUser, \r\n  removeUserFromTrip, \r\n  updateTripSharingSettings,\r\n  getUserTripPermission \r\n} from '@/lib/sharing-service';\r\nimport { useAuth } from '@/lib/auth-context';\r\nimport {\r\n  XMarkIcon,\r\n  LinkIcon,\r\n  UserPlusIcon,\r\n  TrashIcon,\r\n  GlobeAltIcon,\r\n  LockClosedIcon,\r\n  CheckIcon,\r\n  ClipboardDocumentIcon,\r\n} from '@heroicons/react/24/outline';\r\n\r\ninterface ShareModalProps {\r\n  trip: Trip;\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onTripUpdate: (updatedTrip: Trip) => void;\r\n}\r\n\r\nexport default function ShareModal({ trip, isOpen, onClose, onTripUpdate }: ShareModalProps) {\r\n  const { user } = useAuth();\r\n  const [loading, setLoading] = useState(false);\r\n  const [shareLink, setShareLink] = useState('');\r\n  const [sharePermission, setSharePermission] = useState<'view' | 'edit'>('view');\r\n  const [newUserEmail, setNewUserEmail] = useState('');\r\n  const [linkCopied, setLinkCopied] = useState(false);\r\n  const [userPermission, setUserPermission] = useState<'owner' | 'edit' | 'view' | 'none'>('none');\r\n\r\n  const isOwner = user && trip.userId === user.uid;\r\n\r\n  useEffect(() => {\r\n    if (user && trip.id) {\r\n      getUserTripPermission(trip.id, user.uid).then(setUserPermission);\r\n    }\r\n  }, [user, trip.id]);\r\n\r\n  useEffect(() => {\r\n    if (trip.shareToken) {\r\n      setShareLink(`${window.location.origin}/trip/shared/${trip.shareToken}`);\r\n    }\r\n  }, [trip.shareToken]);\r\n\r\n  const handleCreateShareLink = async () => {\r\n    if (!isOwner) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const token = await createShareLink(trip.id, sharePermission);\r\n      const newLink = `${window.location.origin}/trip/shared/${token}`;\r\n      setShareLink(newLink);\r\n      \r\n      // Update local trip state\r\n      onTripUpdate({ ...trip, shareToken: token });\r\n    } catch (error) {\r\n      console.error('Error creating share link:', error);\r\n      alert('Failed to create share link. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCopyLink = async () => {\r\n    try {\r\n      await navigator.clipboard.writeText(shareLink);\r\n      setLinkCopied(true);\r\n      setTimeout(() => setLinkCopied(false), 2000);\r\n    } catch (error) {\r\n      console.error('Failed to copy link:', error);\r\n    }\r\n  };\r\n\r\n  const handleShareWithUser = async () => {\r\n    if (!isOwner || !newUserEmail.trim()) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      await shareWithUser(trip.id, newUserEmail.trim(), sharePermission, user!.uid);\r\n      setNewUserEmail('');\r\n      \r\n      // Update local trip state\r\n      const newSharedUser: SharedUser = {\r\n        userId: '',\r\n        email: newUserEmail.trim(),\r\n        displayName: '',\r\n        permission: sharePermission,\r\n        invitedAt: new Date(),\r\n      };\r\n      \r\n      const updatedTrip = {\r\n        ...trip,\r\n        shareSettings: {\r\n          ...trip.shareSettings,\r\n          sharedUsers: [...(trip.shareSettings?.sharedUsers || []), newSharedUser],\r\n        },\r\n      };\r\n      \r\n      onTripUpdate(updatedTrip);\r\n    } catch (error) {\r\n      console.error('Error sharing with user:', error);\r\n      alert('Failed to share trip. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRemoveUser = async (userEmail: string) => {\r\n    if (!isOwner) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      await removeUserFromTrip(trip.id, userEmail, user!.uid);\r\n      \r\n      // Update local trip state\r\n      const updatedTrip = {\r\n        ...trip,\r\n        shareSettings: {\r\n          ...trip.shareSettings,\r\n          sharedUsers: (trip.shareSettings?.sharedUsers || []).filter(u => u.email !== userEmail),\r\n        },\r\n      };\r\n      \r\n      onTripUpdate(updatedTrip);\r\n    } catch (error) {\r\n      console.error('Error removing user:', error);\r\n      alert('Failed to remove user. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleUpdateSharingSettings = async (settings: {\r\n    isPublic?: boolean;\r\n    allowPublicView?: boolean;\r\n    allowPublicEdit?: boolean;\r\n  }) => {\r\n    if (!isOwner) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      await updateTripSharingSettings(trip.id, settings, user!.uid);\r\n      \r\n      // Initialize shareSettings if it doesn't exist\r\n      const currentShareSettings = trip.shareSettings || {\r\n        isPublic: false,\r\n        allowPublicView: false,\r\n        allowPublicEdit: false,\r\n        sharedUsers: [],\r\n      };\r\n      \r\n      // Update local trip state\r\n      const updatedTrip = {\r\n        ...trip,\r\n        isPublic: settings.isPublic ?? trip.isPublic,\r\n        shareSettings: {\r\n          ...currentShareSettings,\r\n          isPublic: settings.isPublic ?? currentShareSettings.isPublic,\r\n          allowPublicView: settings.allowPublicView ?? currentShareSettings.allowPublicView,\r\n          allowPublicEdit: settings.allowPublicEdit ?? currentShareSettings.allowPublicEdit,\r\n        },\r\n      };\r\n      \r\n      onTripUpdate(updatedTrip);\r\n    } catch (error) {\r\n      console.error('Error updating sharing settings:', error);\r\n      alert('Failed to update sharing settings. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div className=\"bg-white rounded-xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <h2 className=\"text-2xl font-bold text-gray-900\">Share \"{trip.name}\"</h2>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"p-2 text-gray-400 hover:text-gray-600 rounded-lg\"\r\n          >\r\n            <XMarkIcon className=\"w-6 h-6\" />\r\n          </button>\r\n        </div>\r\n\r\n        {/* Current Access Level */}\r\n        <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\r\n          <div className=\"flex items-center gap-2 mb-2\">\r\n            {userPermission === 'owner' ? (\r\n              <LockClosedIcon className=\"w-5 h-5 text-blue-600\" />\r\n            ) : (\r\n              <GlobeAltIcon className=\"w-5 h-5 text-green-600\" />\r\n            )}\r\n            <span className=\"font-medium capitalize\">{userPermission} Access</span>\r\n          </div>\r\n          <p className=\"text-sm text-gray-600\">\r\n            {userPermission === 'owner' && 'You own this trip and can manage all sharing settings.'}\r\n            {userPermission === 'edit' && 'You can view and edit this trip.'}\r\n            {userPermission === 'view' && 'You can view this trip but cannot make changes.'}\r\n          </p>\r\n        </div>\r\n\r\n        {isOwner && (\r\n          <>\r\n            {/* Public Sharing Settings */}\r\n            <div className=\"mb-6\">\r\n              <h3 className=\"font-semibold text-lg mb-3\">Public Access</h3>\r\n              \r\n              <div className=\"space-y-3\">\r\n                <label className=\"flex items-center gap-3\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={trip.shareSettings?.allowPublicView || false}\r\n                    onChange={(e) => handleUpdateSharingSettings({ allowPublicView: e.target.checked })}\r\n                    disabled={loading}\r\n                    className=\"w-4 h-4 text-blue-600 rounded\"\r\n                  />\r\n                  <span className=\"text-sm\">Anyone with the link can view this trip</span>\r\n                </label>\r\n                \r\n                <label className=\"flex items-center gap-3\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={trip.shareSettings?.allowPublicEdit || false}\r\n                    onChange={(e) => handleUpdateSharingSettings({ allowPublicEdit: e.target.checked })}\r\n                    disabled={loading}\r\n                    className=\"w-4 h-4 text-blue-600 rounded\"\r\n                  />\r\n                  <span className=\"text-sm\">Anyone with the link can edit this trip (requires account)</span>\r\n                </label>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Share Link */}\r\n            <div className=\"mb-6\">\r\n              <h3 className=\"font-semibold text-lg mb-3\">Share Link</h3>\r\n              \r\n              {shareLink ? (\r\n                <div className=\"flex gap-2\">\r\n                  <input\r\n                    type=\"text\"\r\n                    value={shareLink}\r\n                    readOnly\r\n                    className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg text-sm bg-gray-50\"\r\n                  />\r\n                  <button\r\n                    onClick={handleCopyLink}\r\n                    className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2\"\r\n                  >\r\n                    {linkCopied ? (\r\n                      <>\r\n                        <CheckIcon className=\"w-4 h-4\" />\r\n                        Copied!\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <ClipboardDocumentIcon className=\"w-4 h-4\" />\r\n                        Copy\r\n                      </>\r\n                    )}\r\n                  </button>\r\n                </div>\r\n              ) : (\r\n                <div className=\"flex gap-3\">\r\n                  <select\r\n                    value={sharePermission}\r\n                    onChange={(e) => setSharePermission(e.target.value as 'view' | 'edit')}\r\n                    className=\"px-3 py-2 border border-gray-300 rounded-lg\"\r\n                  >\r\n                    <option value=\"view\">View Only</option>\r\n                    <option value=\"edit\">Can Edit</option>\r\n                  </select>\r\n                  \r\n                  <button\r\n                    onClick={handleCreateShareLink}\r\n                    disabled={loading}\r\n                    className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2 disabled:bg-gray-400\"\r\n                  >\r\n                    <LinkIcon className=\"w-4 h-4\" />\r\n                    Create Link\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Share with Specific Users */}\r\n            <div className=\"mb-6\">\r\n              <h3 className=\"font-semibold text-lg mb-3\">Share with Specific People</h3>\r\n              \r\n              <div className=\"flex gap-2 mb-4\">\r\n                <input\r\n                  type=\"email\"\r\n                  value={newUserEmail}\r\n                  onChange={(e) => setNewUserEmail(e.target.value)}\r\n                  placeholder=\"Enter email address\"\r\n                  className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg\"\r\n                />\r\n                <select\r\n                  value={sharePermission}\r\n                  onChange={(e) => setSharePermission(e.target.value as 'view' | 'edit')}\r\n                  className=\"px-3 py-2 border border-gray-300 rounded-lg\"\r\n                >\r\n                  <option value=\"view\">View</option>\r\n                  <option value=\"edit\">Edit</option>\r\n                </select>\r\n                <button\r\n                  onClick={handleShareWithUser}\r\n                  disabled={loading || !newUserEmail.trim()}\r\n                  className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center gap-2 disabled:bg-gray-400\"\r\n                >\r\n                  <UserPlusIcon className=\"w-4 h-4\" />\r\n                  Share\r\n                </button>\r\n              </div>\r\n\r\n              {/* Shared Users List */}\r\n              {trip.shareSettings?.sharedUsers && trip.shareSettings.sharedUsers.length > 0 && (\r\n                <div className=\"space-y-2\">\r\n                  {trip.shareSettings.sharedUsers.map((sharedUser, index) => (\r\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\r\n                      <div>\r\n                        <p className=\"font-medium\">{sharedUser.displayName || sharedUser.email}</p>\r\n                        <p className=\"text-sm text-gray-600 capitalize\">{sharedUser.permission} access</p>\r\n                      </div>\r\n                      <button\r\n                        onClick={() => handleRemoveUser(sharedUser.email)}\r\n                        disabled={loading}\r\n                        className=\"p-2 text-red-600 hover:bg-red-50 rounded-lg disabled:text-gray-400\"\r\n                      >\r\n                        <TrashIcon className=\"w-4 h-4\" />\r\n                      </button>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {/* Close Button */}\r\n        <div className=\"flex justify-end\">\r\n          <button\r\n            onClick={onClose}\r\n            className=\"px-6 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300\"\r\n          >\r\n            Done\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"
        }
    ]
}