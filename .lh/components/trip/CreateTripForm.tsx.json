{
    "sourceFile": "components/trip/CreateTripForm.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752432565760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752432565760,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { useAuth } from '@/lib/auth-context';\r\nimport { createTrip } from '@/lib/trip-service';\r\nimport { CreateTripData } from '@/types';\r\n\r\ninterface CreateTripFormProps {\r\n  onSuccess?: (tripId: string) => void;\r\n  onCancel?: () => void;\r\n}\r\n\r\nexport default function CreateTripForm({ onSuccess, onCancel }: CreateTripFormProps) {\r\n  const { user } = useAuth();\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  \r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    location: '',\r\n    startDate: '',\r\n    endDate: '',\r\n    description: '',\r\n    isPublic: false,\r\n  });\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    const { name, value, type } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: type === 'checkbox' ? (e.target as HTMLInputElement).checked : value\r\n    }));\r\n  };\r\n\r\n  const validateForm = (): boolean => {\r\n    if (!formData.name.trim()) {\r\n      setError('Trip name is required');\r\n      return false;\r\n    }\r\n    \r\n    if (!formData.location.trim()) {\r\n      setError('Location is required');\r\n      return false;\r\n    }\r\n    \r\n    if (!formData.startDate) {\r\n      setError('Start date is required');\r\n      return false;\r\n    }\r\n    \r\n    if (!formData.endDate) {\r\n      setError('End date is required');\r\n      return false;\r\n    }\r\n    \r\n    if (new Date(formData.startDate) > new Date(formData.endDate)) {\r\n      setError('Start date must be before end date');\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    \r\n    if (!user) {\r\n      setError('You must be logged in to create a trip');\r\n      return;\r\n    }\r\n    \r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      const tripData: CreateTripData = {\r\n        ...formData,\r\n        userId: user.uid,\r\n      };\r\n      \r\n      const tripId = await createTrip(tripData);\r\n      \r\n      // Reset form\r\n      setFormData({\r\n        name: '',\r\n        location: '',\r\n        startDate: '',\r\n        endDate: '',\r\n        description: '',\r\n        isPublic: false,\r\n      });\r\n      \r\n      if (onSuccess) {\r\n        onSuccess(tripId);\r\n      }\r\n    } catch (error: any) {\r\n      setError(error.message || 'Failed to create trip');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-md mx-auto bg-white rounded-xl shadow-lg p-6\">\r\n      <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Create New Trip</h2>\r\n      \r\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n        {error && (\r\n          <div className=\"rounded-xl bg-red-50 p-4\">\r\n            <div className=\"text-sm text-red-700\">{error}</div>\r\n          </div>\r\n        )}\r\n        \r\n        <div>\r\n          <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n            Trip Name *\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"name\"\r\n            name=\"name\"\r\n            value={formData.name}\r\n            onChange={handleInputChange}\r\n            className=\"input-field\"\r\n            placeholder=\"e.g., Summer in Europe\"\r\n            required\r\n          />\r\n        </div>\r\n        \r\n        <div>\r\n          <label htmlFor=\"location\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n            Main Location *\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"location\"\r\n            name=\"location\"\r\n            value={formData.location}\r\n            onChange={handleInputChange}\r\n            className=\"input-field\"\r\n            placeholder=\"e.g., Paris, France\"\r\n            required\r\n          />\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n          <div>\r\n            <label htmlFor=\"startDate\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              Start Date *\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              id=\"startDate\"\r\n              name=\"startDate\"\r\n              value={formData.startDate}\r\n              onChange={handleInputChange}\r\n              className=\"input-field\"\r\n              required\r\n            />\r\n          </div>\r\n          \r\n          <div>\r\n            <label htmlFor=\"endDate\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              End Date *\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              id=\"endDate\"\r\n              name=\"endDate\"\r\n              value={formData.endDate}\r\n              onChange={handleInputChange}\r\n              className=\"input-field\"\r\n              min={formData.startDate}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n            Description\r\n          </label>\r\n          <textarea\r\n            id=\"description\"\r\n            name=\"description\"\r\n            value={formData.description}\r\n            onChange={handleInputChange}\r\n            rows={3}\r\n            className=\"input-field resize-none\"\r\n            placeholder=\"Tell us about your trip plans...\"\r\n          />\r\n        </div>\r\n        \r\n        <div className=\"flex items-center\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"isPublic\"\r\n            name=\"isPublic\"\r\n            checked={formData.isPublic}\r\n            onChange={handleInputChange}\r\n            className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded\"\r\n          />\r\n          <label htmlFor=\"isPublic\" className=\"ml-2 block text-sm text-gray-700\">\r\n            Make this trip public (others can view it)\r\n          </label>\r\n        </div>\r\n        \r\n        <div className=\"flex gap-3 pt-4\">\r\n          <button\r\n            type=\"submit\"\r\n            disabled={loading}\r\n            className=\"flex-1 btn-primary disabled:opacity-50 disabled:cursor-not-allowed\"\r\n          >\r\n            {loading ? 'Creating...' : 'Create Trip'}\r\n          </button>\r\n          \r\n          {onCancel && (\r\n            <button\r\n              type=\"button\"\r\n              onClick={onCancel}\r\n              className=\"btn-secondary\"\r\n            >\r\n              Cancel\r\n            </button>\r\n          )}\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n} "
        }
    ]
}