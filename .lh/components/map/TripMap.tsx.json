{
    "sourceFile": "components/map/TripMap.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 44,
            "patches": [
                {
                    "date": 1752433617930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752433628417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,20 +177,21 @@\n     const geocoder = new google.maps.Geocoder();\r\n     geocoder.geocode({ location: { lat, lng } }, (results, status) => {\r\n       if (status === 'OK' && results?.[0]) {\r\n         const address = results[0].formatted_address;\r\n-        const locationName = results[0].name || address;\r\n+        const locationName = results[0].address_components?.[0]?.long_name || address;\r\n \r\n         // Create new destination object\r\n+        const selectedDayData = tripDays.find(d => d.day === selectedDay);\r\n         const newDestination: Destination = {\r\n           id: '', // Will be set by server\r\n           tripId: trip.id,\r\n           locationName,\r\n           address,\r\n           lat,\r\n           lng,\r\n           day: selectedDay,\r\n-          orderIndex: tripDays.find(d => d.day === selectedDay)?.destinations.length + 1 || 1,\r\n+          orderIndex: selectedDayData?.destinations.length + 1 || 1,\r\n           createdAt: new Date(),\r\n           updatedAt: new Date(),\r\n         };\r\n \r\n"
                },
                {
                    "date": 1752433636452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,9 +189,9 @@\n           address,\r\n           lat,\r\n           lng,\r\n           day: selectedDay,\r\n-          orderIndex: selectedDayData?.destinations.length + 1 || 1,\r\n+          orderIndex: (selectedDayData?.destinations.length || 0) + 1,\r\n           createdAt: new Date(),\r\n           updatedAt: new Date(),\r\n         };\r\n \r\n"
                },
                {
                    "date": 1752436711900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,34 +32,40 @@\n   // Initialize Google Maps\r\n   useEffect(() => {\r\n     const initMap = async () => {\r\n       try {\r\n+        setIsLoading(true);\r\n+        setError(null);\r\n+\r\n         const loader = new Loader({\r\n           apiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY!,\r\n           version: 'weekly',\r\n           libraries: ['places'],\r\n         });\r\n \r\n-        const { Map } = await loader.importLibrary('maps');\r\n-        const { AdvancedMarkerElement } = await loader.importLibrary('marker');\r\n-\r\n+        const google = await loader.load();\r\n+        \r\n         if (!mapRef.current) return;\r\n \r\n         // Default center (can be improved by geocoding trip.location)\r\n         const defaultCenter = { lat: 40.7128, lng: -74.0060 }; // NYC as fallback\r\n \r\n-        // Create map\r\n-        const mapInstance = new Map(mapRef.current, {\r\n+        // Create map with basic configuration (no Map ID required)\r\n+        const mapInstance = new google.maps.Map(mapRef.current, {\r\n           center: defaultCenter,\r\n           zoom: 10,\r\n-          mapId: process.env.NEXT_PUBLIC_GOOGLE_MAPS_MAP_ID || 'DEMO_MAP_ID',\r\n+          // Remove mapId to avoid API issues\r\n+          disableDefaultUI: false,\r\n+          zoomControl: true,\r\n+          streetViewControl: true,\r\n+          fullscreenControl: true,\r\n         });\r\n \r\n         setMap(mapInstance);\r\n         setIsLoading(false);\r\n       } catch (err) {\r\n         console.error('Error initializing map:', err);\r\n-        setError('Failed to load map');\r\n+        setError(`Failed to load map: ${err instanceof Error ? err.message : 'Unknown error'}`);\r\n         setIsLoading(false);\r\n       }\r\n     };\r\n \r\n@@ -79,23 +85,23 @@\n \r\n     destinations.forEach((destination, index) => {\r\n       const dayColor = tripDays.find(d => d.day === destination.day)?.color;\r\n       \r\n-      // Create marker\r\n+      // Create marker with simple icon (no advanced markers)\r\n       const marker = new google.maps.Marker({\r\n         position: { lat: destination.lat, lng: destination.lng },\r\n         map: map,\r\n         title: destination.locationName,\r\n         icon: {\r\n           path: google.maps.SymbolPath.CIRCLE,\r\n-          scale: 10,\r\n+          scale: 12,\r\n           fillColor: dayColor?.pin || '#6B7280',\r\n           fillOpacity: 1,\r\n           strokeColor: '#FFFFFF',\r\n           strokeWeight: 2,\r\n         },\r\n         label: {\r\n-          text: destination.orderIndex.toString(),\r\n+          text: destination.orderIndex?.toString() || (index + 1).toString(),\r\n           color: '#FFFFFF',\r\n           fontSize: '12px',\r\n           fontWeight: 'bold',\r\n         },\r\n@@ -108,16 +114,16 @@\n \r\n       // Create info window\r\n       const infoWindow = new google.maps.InfoWindow({\r\n         content: `\r\n-          <div class=\"p-3 max-w-sm\">\r\n-            <h3 class=\"font-semibold text-gray-900 mb-1\">${destination.locationName}</h3>\r\n-            <p class=\"text-sm text-gray-600 mb-2\">${destination.address}</p>\r\n-            <div class=\"flex items-center justify-between text-xs text-gray-500\">\r\n+          <div style=\"padding: 12px; max-width: 250px;\">\r\n+            <h3 style=\"font-weight: 600; color: #1F2937; margin-bottom: 4px;\">${destination.locationName}</h3>\r\n+            <p style=\"font-size: 14px; color: #6B7280; margin-bottom: 8px;\">${destination.address}</p>\r\n+            <div style=\"display: flex; align-items: center; justify-content: space-between; font-size: 12px; color: #9CA3AF;\">\r\n               <span>Day ${destination.day}</span>\r\n               ${destination.startTime ? `<span>${destination.startTime}</span>` : ''}\r\n             </div>\r\n-            ${destination.notes ? `<p class=\"text-sm text-gray-700 mt-2\">${destination.notes}</p>` : ''}\r\n+            ${destination.notes ? `<p style=\"font-size: 14px; color: #374151; margin-top: 8px;\">${destination.notes}</p>` : ''}\r\n           </div>\r\n         `,\r\n       });\r\n \r\n@@ -223,16 +229,29 @@\n \r\n   if (error) {\r\n     return (\r\n       <div className=\"h-full flex items-center justify-center bg-gray-50\">\r\n-        <div className=\"text-center\">\r\n-          <p className=\"text-red-600 mb-4\">{error}</p>\r\n+        <div className=\"text-center max-w-md\">\r\n+          <div className=\"text-red-500 mb-4\">\r\n+            <svg className=\"w-12 h-12 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n+            </svg>\r\n+          </div>\r\n+          <p className=\"text-red-600 mb-4 text-sm\">{error}</p>\r\n           <button \r\n             onClick={() => window.location.reload()} \r\n             className=\"btn-primary\"\r\n           >\r\n             Retry\r\n           </button>\r\n+          <div className=\"mt-4 text-xs text-gray-500\">\r\n+            <p>Make sure your Google Maps API key has these services enabled:</p>\r\n+            <ul className=\"mt-2 text-left\">\r\n+              <li>• Maps JavaScript API</li>\r\n+              <li>• Places API</li>\r\n+              <li>• Geocoding API</li>\r\n+            </ul>\r\n+          </div>\r\n         </div>\r\n       </div>\r\n     );\r\n   }\r\n"
                },
                {
                    "date": 1752438184210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,56 +27,89 @@\n   const [map, setMap] = useState<google.maps.Map | null>(null);\r\n   const [markers, setMarkers] = useState<google.maps.Marker[]>([]);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [error, setError] = useState<string | null>(null);\r\n+  const [debugInfo, setDebugInfo] = useState<string[]>([]);\r\n \r\n+  // Debug function\r\n+  const addDebugInfo = (info: string) => {\r\n+    console.log('TripMap Debug:', info);\r\n+    setDebugInfo(prev => [...prev, `${new Date().toLocaleTimeString()}: ${info}`]);\r\n+  };\r\n+\r\n   // Initialize Google Maps\r\n   useEffect(() => {\r\n     const initMap = async () => {\r\n       try {\r\n         setIsLoading(true);\r\n         setError(null);\r\n+        addDebugInfo('Starting map initialization...');\r\n \r\n+        // Check environment variables\r\n+        const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\r\n+        addDebugInfo(`API Key present: ${apiKey ? 'Yes' : 'No'}`);\r\n+        \r\n+        if (!apiKey) {\r\n+          throw new Error('Google Maps API key not found in environment variables');\r\n+        }\r\n+\r\n+        addDebugInfo('Creating Google Maps Loader...');\r\n         const loader = new Loader({\r\n-          apiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY!,\r\n+          apiKey: apiKey,\r\n           version: 'weekly',\r\n           libraries: ['places'],\r\n         });\r\n \r\n+        addDebugInfo('Loading Google Maps API...');\r\n         const google = await loader.load();\r\n+        addDebugInfo('Google Maps API loaded successfully');\r\n         \r\n-        if (!mapRef.current) return;\r\n+        if (!mapRef.current) {\r\n+          throw new Error('Map container not found');\r\n+        }\r\n \r\n+        addDebugInfo('Creating map instance...');\r\n+        \r\n         // Default center (can be improved by geocoding trip.location)\r\n         const defaultCenter = { lat: 40.7128, lng: -74.0060 }; // NYC as fallback\r\n \r\n         // Create map with basic configuration (no Map ID required)\r\n         const mapInstance = new google.maps.Map(mapRef.current, {\r\n           center: defaultCenter,\r\n           zoom: 10,\r\n-          // Remove mapId to avoid API issues\r\n           disableDefaultUI: false,\r\n           zoomControl: true,\r\n           streetViewControl: true,\r\n           fullscreenControl: true,\r\n         });\r\n \r\n+        addDebugInfo('Map instance created successfully');\r\n         setMap(mapInstance);\r\n         setIsLoading(false);\r\n+        addDebugInfo('Map initialization complete!');\r\n+        \r\n       } catch (err) {\r\n+        const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\r\n+        addDebugInfo(`Error: ${errorMessage}`);\r\n         console.error('Error initializing map:', err);\r\n-        setError(`Failed to load map: ${err instanceof Error ? err.message : 'Unknown error'}`);\r\n+        setError(`Failed to load map: ${errorMessage}`);\r\n         setIsLoading(false);\r\n       }\r\n     };\r\n \r\n+    addDebugInfo('Map effect triggered');\r\n     initMap();\r\n   }, []);\r\n \r\n   // Update markers when destinations change\r\n   useEffect(() => {\r\n-    if (!map || !destinations.length) return;\r\n+    if (!map || !destinations.length) {\r\n+      addDebugInfo(`Skipping markers: map=${!!map}, destinations=${destinations.length}`);\r\n+      return;\r\n+    }\r\n \r\n+    addDebugInfo(`Updating ${destinations.length} markers`);\r\n+\r\n     // Clear existing markers\r\n     markers.forEach(marker => marker.setMap(null));\r\n \r\n     // Create new markers\r\n@@ -136,8 +169,9 @@\n       bounds.extend(marker.getPosition()!);\r\n     });\r\n \r\n     setMarkers(newMarkers);\r\n+    addDebugInfo(`Created ${newMarkers.length} markers`);\r\n \r\n     // Fit map to show all markers\r\n     if (newMarkers.length > 0) {\r\n       map.fitBounds(bounds);\r\n@@ -217,13 +251,28 @@\n   }, [map, selectedDay, trip.id, tripDays, onDestinationAdd]);\r\n \r\n   if (isLoading) {\r\n     return (\r\n-      <div className=\"h-full flex items-center justify-center bg-gray-50\">\r\n-        <div className=\"text-center\">\r\n+      <div className=\"h-full flex flex-col items-center justify-center bg-gray-50 p-4\">\r\n+        <div className=\"text-center mb-4\">\r\n           <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-2\"></div>\r\n           <p className=\"text-sm text-gray-600\">Loading map...</p>\r\n         </div>\r\n+        \r\n+        {/* Debug Info */}\r\n+        <div className=\"bg-white rounded-lg shadow p-3 max-w-md text-xs\">\r\n+          <h4 className=\"font-semibold mb-2\">Debug Info:</h4>\r\n+          <div className=\"space-y-1 max-h-32 overflow-y-auto\">\r\n+            {debugInfo.map((info, index) => (\r\n+              <div key={index} className=\"text-gray-600\">{info}</div>\r\n+            ))}\r\n+          </div>\r\n+          <div className=\"mt-2 pt-2 border-t\">\r\n+            <div>API Key: {process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY ? \r\n+              `${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY.substring(0, 20)}...` : \r\n+              'Not found'}</div>\r\n+          </div>\r\n+        </div>\r\n       </div>\r\n     );\r\n   }\r\n \r\n@@ -236,8 +285,19 @@\n               <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n             </svg>\r\n           </div>\r\n           <p className=\"text-red-600 mb-4 text-sm\">{error}</p>\r\n+          \r\n+          {/* Debug Info */}\r\n+          <div className=\"bg-white rounded-lg shadow p-3 mb-4 text-xs text-left\">\r\n+            <h4 className=\"font-semibold mb-2\">Debug Log:</h4>\r\n+            <div className=\"space-y-1 max-h-32 overflow-y-auto\">\r\n+              {debugInfo.map((info, index) => (\r\n+                <div key={index} className=\"text-gray-600\">{info}</div>\r\n+              ))}\r\n+            </div>\r\n+          </div>\r\n+          \r\n           <button \r\n             onClick={() => window.location.reload()} \r\n             className=\"btn-primary\"\r\n           >\r\n@@ -246,9 +306,9 @@\n           <div className=\"mt-4 text-xs text-gray-500\">\r\n             <p>Make sure your Google Maps API key has these services enabled:</p>\r\n             <ul className=\"mt-2 text-left\">\r\n               <li>• Maps JavaScript API</li>\r\n-              <li>• Places API</li>\r\n+              <li>• Places API (New)</li>\r\n               <li>• Geocoding API</li>\r\n             </ul>\r\n           </div>\r\n         </div>\r\n"
                },
                {
                    "date": 1752438421450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n   const [markers, setMarkers] = useState<google.maps.Marker[]>([]);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [error, setError] = useState<string | null>(null);\r\n   const [debugInfo, setDebugInfo] = useState<string[]>([]);\r\n+  const [mapInitialized, setMapInitialized] = useState(false);\r\n \r\n   // Debug function\r\n   const addDebugInfo = (info: string) => {\r\n     console.log('TripMap Debug:', info);\r\n@@ -37,14 +38,32 @@\n   };\r\n \r\n   // Initialize Google Maps\r\n   useEffect(() => {\r\n+    // Prevent multiple initializations\r\n+    if (mapInitialized) {\r\n+      addDebugInfo('Map already initialized, skipping...');\r\n+      return;\r\n+    }\r\n+\r\n     const initMap = async () => {\r\n       try {\r\n         setIsLoading(true);\r\n         setError(null);\r\n         addDebugInfo('Starting map initialization...');\r\n \r\n+        // Check if container exists first\r\n+        if (!mapRef.current) {\r\n+          addDebugInfo('Map container not ready, retrying in 100ms...');\r\n+          setTimeout(() => {\r\n+            if (!mapInitialized) {\r\n+              addDebugInfo('Retrying map initialization...');\r\n+              initMap();\r\n+            }\r\n+          }, 100);\r\n+          return;\r\n+        }\r\n+\r\n         // Check environment variables\r\n         const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\r\n         addDebugInfo(`API Key present: ${apiKey ? 'Yes' : 'No'}`);\r\n         \r\n@@ -62,10 +81,11 @@\n         addDebugInfo('Loading Google Maps API...');\r\n         const google = await loader.load();\r\n         addDebugInfo('Google Maps API loaded successfully');\r\n         \r\n+        // Double-check container still exists\r\n         if (!mapRef.current) {\r\n-          throw new Error('Map container not found');\r\n+          throw new Error('Map container not found after API load');\r\n         }\r\n \r\n         addDebugInfo('Creating map instance...');\r\n         \r\n@@ -83,8 +103,9 @@\n         });\r\n \r\n         addDebugInfo('Map instance created successfully');\r\n         setMap(mapInstance);\r\n+        setMapInitialized(true);\r\n         setIsLoading(false);\r\n         addDebugInfo('Map initialization complete!');\r\n         \r\n       } catch (err) {\r\n@@ -96,10 +117,16 @@\n       }\r\n     };\r\n \r\n     addDebugInfo('Map effect triggered');\r\n-    initMap();\r\n-  }, []);\r\n+    \r\n+    // Add a small delay to ensure DOM is ready\r\n+    setTimeout(() => {\r\n+      if (!mapInitialized) {\r\n+        initMap();\r\n+      }\r\n+    }, 50);\r\n+  }, [mapInitialized]);\r\n \r\n   // Update markers when destinations change\r\n   useEffect(() => {\r\n     if (!map || !destinations.length) {\r\n@@ -259,15 +286,16 @@\n         </div>\r\n         \r\n         {/* Debug Info */}\r\n         <div className=\"bg-white rounded-lg shadow p-3 max-w-md text-xs\">\r\n-          <h4 className=\"font-semibold mb-2\">Debug Info:</h4>\r\n+          <h4 className=\"font-semibold mb-2\">Debug Log:</h4>\r\n           <div className=\"space-y-1 max-h-32 overflow-y-auto\">\r\n             {debugInfo.map((info, index) => (\r\n               <div key={index} className=\"text-gray-600\">{info}</div>\r\n             ))}\r\n           </div>\r\n           <div className=\"mt-2 pt-2 border-t\">\r\n+            <div>Container Ready: {mapRef.current ? '✅' : '❌'}</div>\r\n             <div>API Key: {process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY ? \r\n               `${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY.substring(0, 20)}...` : \r\n               'Not found'}</div>\r\n           </div>\r\n@@ -294,12 +322,20 @@\n               {debugInfo.map((info, index) => (\r\n                 <div key={index} className=\"text-gray-600\">{info}</div>\r\n               ))}\r\n             </div>\r\n+            <div className=\"mt-2 pt-2 border-t\">\r\n+              <div>Container Ready: {mapRef.current ? '✅' : '❌'}</div>\r\n+              <div>Map Initialized: {mapInitialized ? '✅' : '❌'}</div>\r\n+            </div>\r\n           </div>\r\n           \r\n           <button \r\n-            onClick={() => window.location.reload()} \r\n+            onClick={() => {\r\n+              setMapInitialized(false);\r\n+              setError(null);\r\n+              setDebugInfo([]);\r\n+            }} \r\n             className=\"btn-primary\"\r\n           >\r\n             Retry\r\n           </button>\r\n@@ -317,9 +353,13 @@\n   }\r\n \r\n   return (\r\n     <div className=\"h-full relative\">\r\n-      <div ref={mapRef} className=\"h-full w-full\" />\r\n+      <div \r\n+        ref={mapRef} \r\n+        className=\"h-full w-full\"\r\n+        style={{ minHeight: '400px' }}\r\n+      />\r\n       \r\n       {/* Map Controls */}\r\n       <div className=\"absolute top-4 left-4 bg-white rounded-lg shadow-md p-2\">\r\n         <div className=\"flex items-center space-x-2 text-sm\">\r\n"
                },
                {
                    "date": 1752438787865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,8 @@\n   const [markers, setMarkers] = useState<google.maps.Marker[]>([]);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [error, setError] = useState<string | null>(null);\r\n   const [debugInfo, setDebugInfo] = useState<string[]>([]);\r\n-  const [mapInitialized, setMapInitialized] = useState(false);\r\n \r\n   // Debug function\r\n   const addDebugInfo = (info: string) => {\r\n     console.log('TripMap Debug:', info);\r\n@@ -38,62 +37,73 @@\n   };\r\n \r\n   // Initialize Google Maps\r\n   useEffect(() => {\r\n-    // Prevent multiple initializations\r\n-    if (mapInitialized) {\r\n-      addDebugInfo('Map already initialized, skipping...');\r\n-      return;\r\n-    }\r\n-\r\n     const initMap = async () => {\r\n       try {\r\n         setIsLoading(true);\r\n         setError(null);\r\n         addDebugInfo('Starting map initialization...');\r\n \r\n-        // Check if container exists first\r\n-        if (!mapRef.current) {\r\n-          addDebugInfo('Map container not ready, retrying in 100ms...');\r\n-          setTimeout(() => {\r\n-            if (!mapInitialized) {\r\n-              addDebugInfo('Retrying map initialization...');\r\n-              initMap();\r\n-            }\r\n-          }, 100);\r\n-          return;\r\n-        }\r\n-\r\n         // Check environment variables\r\n         const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\r\n         addDebugInfo(`API Key present: ${apiKey ? 'Yes' : 'No'}`);\r\n         \r\n         if (!apiKey) {\r\n           throw new Error('Google Maps API key not found in environment variables');\r\n         }\r\n \r\n-        addDebugInfo('Creating Google Maps Loader...');\r\n-        const loader = new Loader({\r\n-          apiKey: apiKey,\r\n-          version: 'weekly',\r\n-          libraries: ['places'],\r\n-        });\r\n-\r\n+        // Load Google Maps script directly (similar to Basic Map Test)\r\n         addDebugInfo('Loading Google Maps API...');\r\n-        const google = await loader.load();\r\n-        addDebugInfo('Google Maps API loaded successfully');\r\n         \r\n-        // Double-check container still exists\r\n-        if (!mapRef.current) {\r\n-          throw new Error('Map container not found after API load');\r\n+        // Check if Google Maps is already loaded\r\n+        if (window.google?.maps) {\r\n+          addDebugInfo('Google Maps already loaded, using existing instance');\r\n+          initializeMap();\r\n+          return;\r\n         }\r\n \r\n-        addDebugInfo('Creating map instance...');\r\n+        // Load Google Maps script\r\n+        const script = document.createElement('script');\r\n+        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;\r\n+        script.async = true;\r\n+        script.defer = true;\r\n         \r\n+        script.onload = () => {\r\n+          addDebugInfo('Google Maps API loaded successfully');\r\n+          initializeMap();\r\n+        };\r\n+        \r\n+        script.onerror = () => {\r\n+          throw new Error('Failed to load Google Maps script');\r\n+        };\r\n+        \r\n+        document.head.appendChild(script);\r\n+        \r\n+      } catch (err) {\r\n+        const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\r\n+        addDebugInfo(`Error: ${errorMessage}`);\r\n+        console.error('Error initializing map:', err);\r\n+        setError(`Failed to load map: ${errorMessage}`);\r\n+        setIsLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    const initializeMap = () => {\r\n+      addDebugInfo('Initializing map instance...');\r\n+      \r\n+      if (!mapRef.current) {\r\n+        addDebugInfo('Map container not found');\r\n+        setError('Map container not found');\r\n+        setIsLoading(false);\r\n+        return;\r\n+      }\r\n+\r\n+      try {\r\n         // Default center (can be improved by geocoding trip.location)\r\n         const defaultCenter = { lat: 40.7128, lng: -74.0060 }; // NYC as fallback\r\n \r\n-        // Create map with basic configuration (no Map ID required)\r\n+        // Create map instance\r\n         const mapInstance = new google.maps.Map(mapRef.current, {\r\n           center: defaultCenter,\r\n           zoom: 10,\r\n           disableDefaultUI: false,\r\n@@ -103,30 +113,22 @@\n         });\r\n \r\n         addDebugInfo('Map instance created successfully');\r\n         setMap(mapInstance);\r\n-        setMapInitialized(true);\r\n         setIsLoading(false);\r\n         addDebugInfo('Map initialization complete!');\r\n         \r\n       } catch (err) {\r\n         const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\r\n-        addDebugInfo(`Error: ${errorMessage}`);\r\n-        console.error('Error initializing map:', err);\r\n-        setError(`Failed to load map: ${errorMessage}`);\r\n+        addDebugInfo(`Error creating map: ${errorMessage}`);\r\n+        setError(`Failed to create map: ${errorMessage}`);\r\n         setIsLoading(false);\r\n       }\r\n     };\r\n \r\n     addDebugInfo('Map effect triggered');\r\n-    \r\n-    // Add a small delay to ensure DOM is ready\r\n-    setTimeout(() => {\r\n-      if (!mapInitialized) {\r\n-        initMap();\r\n-      }\r\n-    }, 50);\r\n-  }, [mapInitialized]);\r\n+    initMap();\r\n+  }, []);\r\n \r\n   // Update markers when destinations change\r\n   useEffect(() => {\r\n     if (!map || !destinations.length) {\r\n@@ -324,18 +326,13 @@\n               ))}\r\n             </div>\r\n             <div className=\"mt-2 pt-2 border-t\">\r\n               <div>Container Ready: {mapRef.current ? '✅' : '❌'}</div>\r\n-              <div>Map Initialized: {mapInitialized ? '✅' : '❌'}</div>\r\n             </div>\r\n           </div>\r\n           \r\n           <button \r\n-            onClick={() => {\r\n-              setMapInitialized(false);\r\n-              setError(null);\r\n-              setDebugInfo([]);\r\n-            }} \r\n+            onClick={() => window.location.reload()} \r\n             className=\"btn-primary\"\r\n           >\r\n             Retry\r\n           </button>\r\n"
                },
                {
                    "date": 1752438903808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,12 @@\n         \r\n         // Check if Google Maps is already loaded\r\n         if (window.google?.maps) {\r\n           addDebugInfo('Google Maps already loaded, using existing instance');\r\n-          initializeMap();\r\n+          // Add a small delay to ensure DOM is ready\r\n+          setTimeout(() => {\r\n+            initializeMap();\r\n+          }, 100);\r\n           return;\r\n         }\r\n \r\n         // Load Google Maps script\r\n@@ -89,13 +92,22 @@\n     };\r\n \r\n     const initializeMap = () => {\r\n       addDebugInfo('Initializing map instance...');\r\n+      addDebugInfo(`Container element exists: ${!!mapRef.current}`);\r\n       \r\n       if (!mapRef.current) {\r\n-        addDebugInfo('Map container not found');\r\n-        setError('Map container not found');\r\n-        setIsLoading(false);\r\n+        addDebugInfo('Map container not found, retrying in 100ms...');\r\n+        setTimeout(() => {\r\n+          if (mapRef.current) {\r\n+            addDebugInfo('Container now available, proceeding with initialization');\r\n+            initializeMap();\r\n+          } else {\r\n+            addDebugInfo('Container still not available after retry');\r\n+            setError('Map container not found');\r\n+            setIsLoading(false);\r\n+          }\r\n+        }, 100);\r\n         return;\r\n       }\r\n \r\n       try {\r\n"
                },
                {
                    "date": 1752439033578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,8 +109,38 @@\n         }, 100);\r\n         return;\r\n       }\r\n \r\n+      // Additional DOM debugging\r\n+      const container = mapRef.current;\r\n+      const rect = container.getBoundingClientRect();\r\n+      addDebugInfo(`Container dimensions: ${rect.width}x${rect.height}`);\r\n+      addDebugInfo(`Container display: ${window.getComputedStyle(container).display}`);\r\n+      addDebugInfo(`Container visibility: ${window.getComputedStyle(container).visibility}`);\r\n+\r\n+      // Check if container has proper dimensions\r\n+      if (rect.width === 0 || rect.height === 0) {\r\n+        addDebugInfo('Container has zero dimensions, retrying in 100ms...');\r\n+        setTimeout(() => {\r\n+          if (mapRef.current) {\r\n+            const newRect = mapRef.current.getBoundingClientRect();\r\n+            if (newRect.width > 0 && newRect.height > 0) {\r\n+              addDebugInfo(`Container now has dimensions: ${newRect.width}x${newRect.height}`);\r\n+              initializeMap();\r\n+            } else {\r\n+              addDebugInfo('Container still has zero dimensions after retry');\r\n+              setError('Map container has no dimensions');\r\n+              setIsLoading(false);\r\n+            }\r\n+          } else {\r\n+            addDebugInfo('Container no longer exists after retry');\r\n+            setError('Map container disappeared');\r\n+            setIsLoading(false);\r\n+          }\r\n+        }, 100);\r\n+        return;\r\n+      }\r\n+\r\n       try {\r\n         // Default center (can be improved by geocoding trip.location)\r\n         const defaultCenter = { lat: 40.7128, lng: -74.0060 }; // NYC as fallback\r\n \r\n"
                },
                {
                    "date": 1752439051260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -394,10 +394,10 @@\n   return (\r\n     <div className=\"h-full relative\">\r\n       <div \r\n         ref={mapRef} \r\n-        className=\"h-full w-full\"\r\n-        style={{ minHeight: '400px' }}\r\n+        className=\"w-full bg-gray-100 rounded-lg\"\r\n+        style={{ height: '600px', minHeight: '400px' }}\r\n       />\r\n       \r\n       {/* Map Controls */}\r\n       <div className=\"absolute top-4 left-4 bg-white rounded-lg shadow-md p-2\">\r\n"
                },
                {
                    "date": 1752439165663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,17 +28,29 @@\n   const [markers, setMarkers] = useState<google.maps.Marker[]>([]);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [error, setError] = useState<string | null>(null);\r\n   const [debugInfo, setDebugInfo] = useState<string[]>([]);\r\n+  const [isMounted, setIsMounted] = useState(false);\r\n \r\n   // Debug function\r\n   const addDebugInfo = (info: string) => {\r\n     console.log('TripMap Debug:', info);\r\n     setDebugInfo(prev => [...prev, `${new Date().toLocaleTimeString()}: ${info}`]);\r\n   };\r\n \r\n-  // Initialize Google Maps\r\n+  // Set mounted state after component renders\r\n   useEffect(() => {\r\n+    setIsMounted(true);\r\n+    addDebugInfo('Component mounted');\r\n+  }, []);\r\n+\r\n+  // Initialize Google Maps only after component is mounted\r\n+  useEffect(() => {\r\n+    if (!isMounted) {\r\n+      addDebugInfo('Component not mounted yet, waiting...');\r\n+      return;\r\n+    }\r\n+\r\n     const initMap = async () => {\r\n       try {\r\n         setIsLoading(true);\r\n         setError(null);\r\n@@ -57,12 +69,12 @@\n         \r\n         // Check if Google Maps is already loaded\r\n         if (window.google?.maps) {\r\n           addDebugInfo('Google Maps already loaded, using existing instance');\r\n-          // Add a small delay to ensure DOM is ready\r\n+          // Add a delay to ensure DOM is ready\r\n           setTimeout(() => {\r\n             initializeMap();\r\n-          }, 100);\r\n+          }, 200);\r\n           return;\r\n         }\r\n \r\n         // Load Google Maps script\r\n@@ -72,9 +84,11 @@\n         script.defer = true;\r\n         \r\n         script.onload = () => {\r\n           addDebugInfo('Google Maps API loaded successfully');\r\n-          initializeMap();\r\n+          setTimeout(() => {\r\n+            initializeMap();\r\n+          }, 100);\r\n         };\r\n         \r\n         script.onerror = () => {\r\n           throw new Error('Failed to load Google Maps script');\r\n@@ -95,19 +109,19 @@\n       addDebugInfo('Initializing map instance...');\r\n       addDebugInfo(`Container element exists: ${!!mapRef.current}`);\r\n       \r\n       if (!mapRef.current) {\r\n-        addDebugInfo('Map container not found, retrying in 100ms...');\r\n+        addDebugInfo('Map container not found, retrying in 200ms...');\r\n         setTimeout(() => {\r\n           if (mapRef.current) {\r\n             addDebugInfo('Container now available, proceeding with initialization');\r\n             initializeMap();\r\n           } else {\r\n             addDebugInfo('Container still not available after retry');\r\n-            setError('Map container not found');\r\n+            setError('Map container not found - component may not be fully rendered');\r\n             setIsLoading(false);\r\n           }\r\n-        }, 100);\r\n+        }, 200);\r\n         return;\r\n       }\r\n \r\n       // Additional DOM debugging\r\n@@ -118,9 +132,9 @@\n       addDebugInfo(`Container visibility: ${window.getComputedStyle(container).visibility}`);\r\n \r\n       // Check if container has proper dimensions\r\n       if (rect.width === 0 || rect.height === 0) {\r\n-        addDebugInfo('Container has zero dimensions, retrying in 100ms...');\r\n+        addDebugInfo('Container has zero dimensions, retrying in 200ms...');\r\n         setTimeout(() => {\r\n           if (mapRef.current) {\r\n             const newRect = mapRef.current.getBoundingClientRect();\r\n             if (newRect.width > 0 && newRect.height > 0) {\r\n@@ -135,9 +149,9 @@\n             addDebugInfo('Container no longer exists after retry');\r\n             setError('Map container disappeared');\r\n             setIsLoading(false);\r\n           }\r\n-        }, 100);\r\n+        }, 200);\r\n         return;\r\n       }\r\n \r\n       try {\r\n@@ -168,9 +182,9 @@\n     };\r\n \r\n     addDebugInfo('Map effect triggered');\r\n     initMap();\r\n-  }, []);\r\n+  }, [isMounted]);\r\n \r\n   // Update markers when destinations change\r\n   useEffect(() => {\r\n     if (!map || !destinations.length) {\r\n"
                },
                {
                    "date": 1752439293143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n 'use client';\r\n \r\n-import { useEffect, useRef, useState } from 'react';\r\n+import { useEffect, useRef, useState, useCallback } from 'react';\r\n import { Loader } from '@googlemaps/js-api-loader';\r\n import { Trip, Destination, TripDay } from '@/types';\r\n \r\n interface TripMapProps {\r\n@@ -22,32 +22,36 @@\n   selectedDay,\r\n   onDestinationSelect,\r\n   onDestinationAdd,\r\n }: TripMapProps) {\r\n-  const mapRef = useRef<HTMLDivElement>(null);\r\n+  const [mapContainer, setMapContainer] = useState<HTMLDivElement | null>(null);\r\n   const [map, setMap] = useState<google.maps.Map | null>(null);\r\n   const [markers, setMarkers] = useState<google.maps.Marker[]>([]);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [error, setError] = useState<string | null>(null);\r\n   const [debugInfo, setDebugInfo] = useState<string[]>([]);\r\n-  const [isMounted, setIsMounted] = useState(false);\r\n \r\n   // Debug function\r\n   const addDebugInfo = (info: string) => {\r\n     console.log('TripMap Debug:', info);\r\n     setDebugInfo(prev => [...prev, `${new Date().toLocaleTimeString()}: ${info}`]);\r\n   };\r\n \r\n-  // Set mounted state after component renders\r\n-  useEffect(() => {\r\n-    setIsMounted(true);\r\n-    addDebugInfo('Component mounted');\r\n+  // Callback ref - gets called when the div is mounted\r\n+  const mapRef = useCallback((node: HTMLDivElement | null) => {\r\n+    if (node) {\r\n+      addDebugInfo('Map container ref callback called with element');\r\n+      setMapContainer(node);\r\n+    } else {\r\n+      addDebugInfo('Map container ref callback called with null');\r\n+      setMapContainer(null);\r\n+    }\r\n   }, []);\r\n \r\n-  // Initialize Google Maps only after component is mounted\r\n+  // Initialize Google Maps when container becomes available\r\n   useEffect(() => {\r\n-    if (!isMounted) {\r\n-      addDebugInfo('Component not mounted yet, waiting...');\r\n+    if (!mapContainer) {\r\n+      addDebugInfo('No map container yet, waiting...');\r\n       return;\r\n     }\r\n \r\n     const initMap = async () => {\r\n@@ -63,18 +67,39 @@\n         if (!apiKey) {\r\n           throw new Error('Google Maps API key not found in environment variables');\r\n         }\r\n \r\n-        // Load Google Maps script directly (similar to Basic Map Test)\r\n+        // Additional DOM debugging\r\n+        const rect = mapContainer.getBoundingClientRect();\r\n+        addDebugInfo(`Container dimensions: ${rect.width}x${rect.height}`);\r\n+        addDebugInfo(`Container display: ${window.getComputedStyle(mapContainer).display}`);\r\n+        addDebugInfo(`Container visibility: ${window.getComputedStyle(mapContainer).visibility}`);\r\n+\r\n+        // Check if container has proper dimensions\r\n+        if (rect.width === 0 || rect.height === 0) {\r\n+          addDebugInfo('Container has zero dimensions, waiting for layout...');\r\n+          setTimeout(() => {\r\n+            if (mapContainer) {\r\n+              const newRect = mapContainer.getBoundingClientRect();\r\n+              if (newRect.width > 0 && newRect.height > 0) {\r\n+                addDebugInfo(`Container now has dimensions: ${newRect.width}x${newRect.height}`);\r\n+                initMap();\r\n+              } else {\r\n+                addDebugInfo('Container still has zero dimensions after retry');\r\n+                setError('Map container has no dimensions');\r\n+                setIsLoading(false);\r\n+              }\r\n+            }\r\n+          }, 200);\r\n+          return;\r\n+        }\r\n+\r\n         addDebugInfo('Loading Google Maps API...');\r\n         \r\n         // Check if Google Maps is already loaded\r\n         if (window.google?.maps) {\r\n-          addDebugInfo('Google Maps already loaded, using existing instance');\r\n-          // Add a delay to ensure DOM is ready\r\n-          setTimeout(() => {\r\n-            initializeMap();\r\n-          }, 200);\r\n+          addDebugInfo('Google Maps already loaded, creating map instance');\r\n+          createMapInstance();\r\n           return;\r\n         }\r\n \r\n         // Load Google Maps script\r\n@@ -84,11 +109,9 @@\n         script.defer = true;\r\n         \r\n         script.onload = () => {\r\n           addDebugInfo('Google Maps API loaded successfully');\r\n-          setTimeout(() => {\r\n-            initializeMap();\r\n-          }, 100);\r\n+          createMapInstance();\r\n         };\r\n         \r\n         script.onerror = () => {\r\n           throw new Error('Failed to load Google Maps script');\r\n@@ -104,63 +127,17 @@\n         setIsLoading(false);\r\n       }\r\n     };\r\n \r\n-    const initializeMap = () => {\r\n-      addDebugInfo('Initializing map instance...');\r\n-      addDebugInfo(`Container element exists: ${!!mapRef.current}`);\r\n-      \r\n-      if (!mapRef.current) {\r\n-        addDebugInfo('Map container not found, retrying in 200ms...');\r\n-        setTimeout(() => {\r\n-          if (mapRef.current) {\r\n-            addDebugInfo('Container now available, proceeding with initialization');\r\n-            initializeMap();\r\n-          } else {\r\n-            addDebugInfo('Container still not available after retry');\r\n-            setError('Map container not found - component may not be fully rendered');\r\n-            setIsLoading(false);\r\n-          }\r\n-        }, 200);\r\n-        return;\r\n-      }\r\n-\r\n-      // Additional DOM debugging\r\n-      const container = mapRef.current;\r\n-      const rect = container.getBoundingClientRect();\r\n-      addDebugInfo(`Container dimensions: ${rect.width}x${rect.height}`);\r\n-      addDebugInfo(`Container display: ${window.getComputedStyle(container).display}`);\r\n-      addDebugInfo(`Container visibility: ${window.getComputedStyle(container).visibility}`);\r\n-\r\n-      // Check if container has proper dimensions\r\n-      if (rect.width === 0 || rect.height === 0) {\r\n-        addDebugInfo('Container has zero dimensions, retrying in 200ms...');\r\n-        setTimeout(() => {\r\n-          if (mapRef.current) {\r\n-            const newRect = mapRef.current.getBoundingClientRect();\r\n-            if (newRect.width > 0 && newRect.height > 0) {\r\n-              addDebugInfo(`Container now has dimensions: ${newRect.width}x${newRect.height}`);\r\n-              initializeMap();\r\n-            } else {\r\n-              addDebugInfo('Container still has zero dimensions after retry');\r\n-              setError('Map container has no dimensions');\r\n-              setIsLoading(false);\r\n-            }\r\n-          } else {\r\n-            addDebugInfo('Container no longer exists after retry');\r\n-            setError('Map container disappeared');\r\n-            setIsLoading(false);\r\n-          }\r\n-        }, 200);\r\n-        return;\r\n-      }\r\n-\r\n+    const createMapInstance = () => {\r\n       try {\r\n+        addDebugInfo('Creating map instance...');\r\n+        \r\n         // Default center (can be improved by geocoding trip.location)\r\n         const defaultCenter = { lat: 40.7128, lng: -74.0060 }; // NYC as fallback\r\n \r\n         // Create map instance\r\n-        const mapInstance = new google.maps.Map(mapRef.current, {\r\n+        const mapInstance = new google.maps.Map(mapContainer, {\r\n           center: defaultCenter,\r\n           zoom: 10,\r\n           disableDefaultUI: false,\r\n           zoomControl: true,\r\n@@ -180,11 +157,11 @@\n         setIsLoading(false);\r\n       }\r\n     };\r\n \r\n-    addDebugInfo('Map effect triggered');\r\n+    addDebugInfo('Map effect triggered with container available');\r\n     initMap();\r\n-  }, [isMounted]);\r\n+  }, [mapContainer]);\r\n \r\n   // Update markers when destinations change\r\n   useEffect(() => {\r\n     if (!map || !destinations.length) {\r\n@@ -351,9 +328,9 @@\n               <div key={index} className=\"text-gray-600\">{info}</div>\r\n             ))}\r\n           </div>\r\n           <div className=\"mt-2 pt-2 border-t\">\r\n-            <div>Container Ready: {mapRef.current ? '✅' : '❌'}</div>\r\n+            <div>Container Ready: {mapContainer ? '✅' : '❌'}</div>\r\n             <div>API Key: {process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY ? \r\n               `${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY.substring(0, 20)}...` : \r\n               'Not found'}</div>\r\n           </div>\r\n@@ -381,9 +358,9 @@\n                 <div key={index} className=\"text-gray-600\">{info}</div>\r\n               ))}\r\n             </div>\r\n             <div className=\"mt-2 pt-2 border-t\">\r\n-              <div>Container Ready: {mapRef.current ? '✅' : '❌'}</div>\r\n+              <div>Container Ready: {mapContainer ? '✅' : '❌'}</div>\r\n             </div>\r\n           </div>\r\n           \r\n           <button \r\n@@ -407,9 +384,9 @@\n \r\n   return (\r\n     <div className=\"h-full relative\">\r\n       <div \r\n-        ref={mapRef} \r\n+        ref={mapRef}\r\n         className=\"w-full bg-gray-100 rounded-lg\"\r\n         style={{ height: '600px', minHeight: '400px' }}\r\n       />\r\n       \r\n"
                },
                {
                    "date": 1752439510946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n 'use client';\r\n \r\n-import { useEffect, useRef, useState, useCallback } from 'react';\r\n-import { Loader } from '@googlemaps/js-api-loader';\r\n+import { useEffect, useRef, useState } from 'react';\r\n import { Trip, Destination, TripDay } from '@/types';\r\n \r\n interface TripMapProps {\r\n   trip: Trip;\r\n@@ -22,151 +21,145 @@\n   selectedDay,\r\n   onDestinationSelect,\r\n   onDestinationAdd,\r\n }: TripMapProps) {\r\n-  const [mapContainer, setMapContainer] = useState<HTMLDivElement | null>(null);\r\n+  const mapRef = useRef<HTMLDivElement>(null);\r\n   const [map, setMap] = useState<google.maps.Map | null>(null);\r\n   const [markers, setMarkers] = useState<google.maps.Marker[]>([]);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [error, setError] = useState<string | null>(null);\r\n   const [debugInfo, setDebugInfo] = useState<string[]>([]);\r\n+  const [mapInitialized, setMapInitialized] = useState(false);\r\n \r\n   // Debug function\r\n   const addDebugInfo = (info: string) => {\r\n-    console.log('TripMap Debug:', info);\r\n-    setDebugInfo(prev => [...prev, `${new Date().toLocaleTimeString()}: ${info}`]);\r\n+    const timestamp = new Date().toLocaleTimeString();\r\n+    console.log(`${timestamp}: ${info}`);\r\n+    setDebugInfo(prev => [...prev, `${timestamp}: ${info}`]);\r\n   };\r\n \r\n-  // Callback ref - gets called when the div is mounted\r\n-  const mapRef = useCallback((node: HTMLDivElement | null) => {\r\n-    if (node) {\r\n-      addDebugInfo('Map container ref callback called with element');\r\n-      setMapContainer(node);\r\n-    } else {\r\n-      addDebugInfo('Map container ref callback called with null');\r\n-      setMapContainer(null);\r\n-    }\r\n-  }, []);\r\n-\r\n-  // Initialize Google Maps when container becomes available\r\n+  // Initialize Google Maps\r\n   useEffect(() => {\r\n-    if (!mapContainer) {\r\n-      addDebugInfo('No map container yet, waiting...');\r\n+    if (mapInitialized) {\r\n+      addDebugInfo('Map already initialized, skipping');\r\n       return;\r\n     }\r\n \r\n+    let retryCount = 0;\r\n+    const maxRetries = 10;\r\n+    const retryDelay = 100;\r\n+\r\n     const initMap = async () => {\r\n       try {\r\n         setIsLoading(true);\r\n         setError(null);\r\n         addDebugInfo('Starting map initialization...');\r\n \r\n-        // Check environment variables\r\n+        // Check for API key\r\n         const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\r\n-        addDebugInfo(`API Key present: ${apiKey ? 'Yes' : 'No'}`);\r\n-        \r\n         if (!apiKey) {\r\n-          throw new Error('Google Maps API key not found in environment variables');\r\n+          throw new Error('Google Maps API key not found');\r\n         }\r\n+        addDebugInfo(`API Key present: ${apiKey.substring(0, 20)}...`);\r\n \r\n-        // Additional DOM debugging\r\n-        const rect = mapContainer.getBoundingClientRect();\r\n-        addDebugInfo(`Container dimensions: ${rect.width}x${rect.height}`);\r\n-        addDebugInfo(`Container display: ${window.getComputedStyle(mapContainer).display}`);\r\n-        addDebugInfo(`Container visibility: ${window.getComputedStyle(mapContainer).visibility}`);\r\n-\r\n-        // Check if container has proper dimensions\r\n-        if (rect.width === 0 || rect.height === 0) {\r\n-          addDebugInfo('Container has zero dimensions, waiting for layout...');\r\n-          setTimeout(() => {\r\n-            if (mapContainer) {\r\n-              const newRect = mapContainer.getBoundingClientRect();\r\n-              if (newRect.width > 0 && newRect.height > 0) {\r\n-                addDebugInfo(`Container now has dimensions: ${newRect.width}x${newRect.height}`);\r\n-                initMap();\r\n+        // Wait for DOM element with retry logic\r\n+        const waitForContainer = (): Promise<HTMLDivElement> => {\r\n+          return new Promise((resolve, reject) => {\r\n+            const checkContainer = () => {\r\n+              if (mapRef.current) {\r\n+                const rect = mapRef.current.getBoundingClientRect();\r\n+                addDebugInfo(`Container found: ${rect.width}x${rect.height}`);\r\n+                \r\n+                if (rect.width > 0 && rect.height > 0) {\r\n+                  addDebugInfo('Container has valid dimensions');\r\n+                  resolve(mapRef.current);\r\n+                } else {\r\n+                  addDebugInfo('Container exists but has zero dimensions');\r\n+                  if (retryCount < maxRetries) {\r\n+                    retryCount++;\r\n+                    setTimeout(checkContainer, retryDelay);\r\n+                  } else {\r\n+                    reject(new Error('Container never got proper dimensions'));\r\n+                  }\r\n+                }\r\n               } else {\r\n-                addDebugInfo('Container still has zero dimensions after retry');\r\n-                setError('Map container has no dimensions');\r\n-                setIsLoading(false);\r\n+                addDebugInfo(`Container not found (attempt ${retryCount + 1}/${maxRetries})`);\r\n+                if (retryCount < maxRetries) {\r\n+                  retryCount++;\r\n+                  setTimeout(checkContainer, retryDelay);\r\n+                } else {\r\n+                  reject(new Error('Container element never appeared'));\r\n+                }\r\n               }\r\n-            }\r\n-          }, 200);\r\n-          return;\r\n-        }\r\n+            };\r\n+            checkContainer();\r\n+          });\r\n+        };\r\n \r\n-        addDebugInfo('Loading Google Maps API...');\r\n-        \r\n-        // Check if Google Maps is already loaded\r\n-        if (window.google?.maps) {\r\n-          addDebugInfo('Google Maps already loaded, creating map instance');\r\n-          createMapInstance();\r\n-          return;\r\n+        const container = await waitForContainer();\r\n+        addDebugInfo('Container ready, loading Google Maps...');\r\n+\r\n+        // Load Google Maps if not already loaded\r\n+        if (!window.google?.maps) {\r\n+          addDebugInfo('Loading Google Maps API...');\r\n+          await loadGoogleMapsScript(apiKey);\r\n+        } else {\r\n+          addDebugInfo('Google Maps already loaded');\r\n         }\r\n \r\n-        // Load Google Maps script\r\n-        const script = document.createElement('script');\r\n-        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;\r\n-        script.async = true;\r\n-        script.defer = true;\r\n-        \r\n-        script.onload = () => {\r\n-          addDebugInfo('Google Maps API loaded successfully');\r\n-          createMapInstance();\r\n-        };\r\n-        \r\n-        script.onerror = () => {\r\n-          throw new Error('Failed to load Google Maps script');\r\n-        };\r\n-        \r\n-        document.head.appendChild(script);\r\n-        \r\n-      } catch (err) {\r\n-        const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\r\n-        addDebugInfo(`Error: ${errorMessage}`);\r\n-        console.error('Error initializing map:', err);\r\n-        setError(`Failed to load map: ${errorMessage}`);\r\n-        setIsLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    const createMapInstance = () => {\r\n-      try {\r\n+        // Create map instance\r\n         addDebugInfo('Creating map instance...');\r\n-        \r\n-        // Default center (can be improved by geocoding trip.location)\r\n-        const defaultCenter = { lat: 40.7128, lng: -74.0060 }; // NYC as fallback\r\n-\r\n-        // Create map instance\r\n-        const mapInstance = new google.maps.Map(mapContainer, {\r\n-          center: defaultCenter,\r\n+        const mapInstance = new google.maps.Map(container, {\r\n+          center: { lat: 40.7128, lng: -74.0060 },\r\n           zoom: 10,\r\n           disableDefaultUI: false,\r\n           zoomControl: true,\r\n           streetViewControl: true,\r\n           fullscreenControl: true,\r\n         });\r\n \r\n-        addDebugInfo('Map instance created successfully');\r\n         setMap(mapInstance);\r\n+        setMapInitialized(true);\r\n         setIsLoading(false);\r\n-        addDebugInfo('Map initialization complete!');\r\n-        \r\n+        addDebugInfo('✅ Map initialization complete!');\r\n+\r\n       } catch (err) {\r\n-        const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\r\n-        addDebugInfo(`Error creating map: ${errorMessage}`);\r\n-        setError(`Failed to create map: ${errorMessage}`);\r\n+        const errorMessage = err instanceof Error ? err.message : 'Unknown error';\r\n+        addDebugInfo(`❌ Error: ${errorMessage}`);\r\n+        setError(`Failed to load map: ${errorMessage}`);\r\n         setIsLoading(false);\r\n       }\r\n     };\r\n \r\n-    addDebugInfo('Map effect triggered with container available');\r\n+    // Load Google Maps script\r\n+    const loadGoogleMapsScript = (apiKey: string): Promise<void> => {\r\n+      return new Promise((resolve, reject) => {\r\n+        const script = document.createElement('script');\r\n+        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;\r\n+        script.async = true;\r\n+        script.defer = true;\r\n+        \r\n+        script.onload = () => {\r\n+          addDebugInfo('Google Maps script loaded');\r\n+          resolve();\r\n+        };\r\n+        \r\n+        script.onerror = () => {\r\n+          reject(new Error('Failed to load Google Maps script'));\r\n+        };\r\n+        \r\n+        document.head.appendChild(script);\r\n+      });\r\n+    };\r\n+\r\n+    addDebugInfo('Map initialization effect triggered');\r\n     initMap();\r\n-  }, [mapContainer]);\r\n+  }, [mapInitialized]);\r\n \r\n   // Update markers when destinations change\r\n   useEffect(() => {\r\n     if (!map || !destinations.length) {\r\n-      addDebugInfo(`Skipping markers: map=${!!map}, destinations=${destinations.length}`);\r\n+      addDebugInfo(`Skipping markers: map=${!!map}, destinations=${destinations.length}${isLoading ? ' map is in loading' : ''}`);\r\n       return;\r\n     }\r\n \r\n     addDebugInfo(`Updating ${destinations.length} markers`);\r\n@@ -180,9 +173,9 @@\n \r\n     destinations.forEach((destination, index) => {\r\n       const dayColor = tripDays.find(d => d.day === destination.day)?.color;\r\n       \r\n-      // Create marker with simple icon (no advanced markers)\r\n+      // Create marker with simple icon\r\n       const marker = new google.maps.Marker({\r\n         position: { lat: destination.lat, lng: destination.lng },\r\n         map: map,\r\n         title: destination.locationName,\r\n@@ -242,9 +235,9 @@\n       if (newMarkers.length === 1) {\r\n         map.setZoom(Math.min(map.getZoom() || 15, 15));\r\n       }\r\n     }\r\n-  }, [map, destinations, tripDays, onDestinationSelect]);\r\n+  }, [map, destinations, tripDays, onDestinationSelect, isLoading]);\r\n \r\n   // Highlight selected destination\r\n   useEffect(() => {\r\n     if (!selectedDestination || !markers.length) return;\r\n@@ -323,17 +316,16 @@\n         {/* Debug Info */}\r\n         <div className=\"bg-white rounded-lg shadow p-3 max-w-md text-xs\">\r\n           <h4 className=\"font-semibold mb-2\">Debug Log:</h4>\r\n           <div className=\"space-y-1 max-h-32 overflow-y-auto\">\r\n-            {debugInfo.map((info, index) => (\r\n+            {debugInfo.slice(-10).map((info, index) => (\r\n               <div key={index} className=\"text-gray-600\">{info}</div>\r\n             ))}\r\n           </div>\r\n           <div className=\"mt-2 pt-2 border-t\">\r\n-            <div>Container Ready: {mapContainer ? '✅' : '❌'}</div>\r\n-            <div>API Key: {process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY ? \r\n-              `${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY.substring(0, 20)}...` : \r\n-              'Not found'}</div>\r\n+            <div>Container: {mapRef.current ? '✅ Found' : '❌ Not found'}</div>\r\n+            <div>Initialized: {mapInitialized ? '✅ Yes' : '❌ No'}</div>\r\n+            <div>API Key: {process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY ? '✅ Present' : '❌ Missing'}</div>\r\n           </div>\r\n         </div>\r\n       </div>\r\n     );\r\n@@ -353,19 +345,20 @@\n           {/* Debug Info */}\r\n           <div className=\"bg-white rounded-lg shadow p-3 mb-4 text-xs text-left\">\r\n             <h4 className=\"font-semibold mb-2\">Debug Log:</h4>\r\n             <div className=\"space-y-1 max-h-32 overflow-y-auto\">\r\n-              {debugInfo.map((info, index) => (\r\n+              {debugInfo.slice(-10).map((info, index) => (\r\n                 <div key={index} className=\"text-gray-600\">{info}</div>\r\n               ))}\r\n             </div>\r\n-            <div className=\"mt-2 pt-2 border-t\">\r\n-              <div>Container Ready: {mapContainer ? '✅' : '❌'}</div>\r\n-            </div>\r\n           </div>\r\n           \r\n           <button \r\n-            onClick={() => window.location.reload()} \r\n+            onClick={() => {\r\n+              setMapInitialized(false);\r\n+              setError(null);\r\n+              setDebugInfo([]);\r\n+            }}\r\n             className=\"btn-primary\"\r\n           >\r\n             Retry\r\n           </button>\r\n"
                },
                {
                    "date": 1752439776770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,27 +28,38 @@\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [error, setError] = useState<string | null>(null);\r\n   const [debugInfo, setDebugInfo] = useState<string[]>([]);\r\n   const [mapInitialized, setMapInitialized] = useState(false);\r\n+  const [isMounted, setIsMounted] = useState(false);\r\n \r\n   // Debug function\r\n   const addDebugInfo = (info: string) => {\r\n     const timestamp = new Date().toLocaleTimeString();\r\n     console.log(`${timestamp}: ${info}`);\r\n     setDebugInfo(prev => [...prev, `${timestamp}: ${info}`]);\r\n   };\r\n \r\n+  // Ensure component is mounted before trying to access DOM\r\n+  useEffect(() => {\r\n+    setIsMounted(true);\r\n+    addDebugInfo('Component mounted');\r\n+    return () => {\r\n+      setIsMounted(false);\r\n+    };\r\n+  }, []);\r\n+\r\n   // Initialize Google Maps\r\n   useEffect(() => {\r\n+    if (!isMounted) {\r\n+      addDebugInfo('Component not mounted yet, waiting...');\r\n+      return;\r\n+    }\r\n+\r\n     if (mapInitialized) {\r\n       addDebugInfo('Map already initialized, skipping');\r\n       return;\r\n     }\r\n \r\n-    let retryCount = 0;\r\n-    const maxRetries = 10;\r\n-    const retryDelay = 100;\r\n-\r\n     const initMap = async () => {\r\n       try {\r\n         setIsLoading(true);\r\n         setError(null);\r\n@@ -63,9 +74,21 @@\n \r\n         // Wait for DOM element with retry logic\r\n         const waitForContainer = (): Promise<HTMLDivElement> => {\r\n           return new Promise((resolve, reject) => {\r\n+            let retryCount = 0;\r\n+            const maxRetries = 20; // Increased retries\r\n+            const retryDelay = 100;\r\n+\r\n             const checkContainer = () => {\r\n+              addDebugInfo(`Checking container (attempt ${retryCount + 1}/${maxRetries})`);\r\n+              \r\n+              if (!isMounted) {\r\n+                addDebugInfo('Component unmounted during container check');\r\n+                reject(new Error('Component unmounted'));\r\n+                return;\r\n+              }\r\n+\r\n               if (mapRef.current) {\r\n                 const rect = mapRef.current.getBoundingClientRect();\r\n                 addDebugInfo(`Container found: ${rect.width}x${rect.height}`);\r\n                 \r\n@@ -73,26 +96,28 @@\n                   addDebugInfo('Container has valid dimensions');\r\n                   resolve(mapRef.current);\r\n                 } else {\r\n                   addDebugInfo('Container exists but has zero dimensions');\r\n+                  retryCount++;\r\n                   if (retryCount < maxRetries) {\r\n-                    retryCount++;\r\n                     setTimeout(checkContainer, retryDelay);\r\n                   } else {\r\n                     reject(new Error('Container never got proper dimensions'));\r\n                   }\r\n                 }\r\n               } else {\r\n                 addDebugInfo(`Container not found (attempt ${retryCount + 1}/${maxRetries})`);\r\n+                retryCount++;\r\n                 if (retryCount < maxRetries) {\r\n-                  retryCount++;\r\n                   setTimeout(checkContainer, retryDelay);\r\n                 } else {\r\n                   reject(new Error('Container element never appeared'));\r\n                 }\r\n               }\r\n             };\r\n-            checkContainer();\r\n+\r\n+            // Start checking after a small delay to ensure DOM is ready\r\n+            setTimeout(checkContainer, 50);\r\n           });\r\n         };\r\n \r\n         const container = await waitForContainer();\r\n@@ -151,10 +176,15 @@\n       });\r\n     };\r\n \r\n     addDebugInfo('Map initialization effect triggered');\r\n-    initMap();\r\n-  }, [mapInitialized]);\r\n+    // Add a small delay to ensure DOM is fully rendered\r\n+    setTimeout(() => {\r\n+      if (isMounted) {\r\n+        initMap();\r\n+      }\r\n+    }, 100);\r\n+  }, [isMounted, mapInitialized]);\r\n \r\n   // Update markers when destinations change\r\n   useEffect(() => {\r\n     if (!map || !destinations.length) {\r\n@@ -304,8 +334,16 @@\n       google.maps.event.removeListener(listener);\r\n     };\r\n   }, [map, selectedDay, trip.id, tripDays, onDestinationAdd]);\r\n \r\n+  const handleRetry = () => {\r\n+    addDebugInfo('Retry button clicked');\r\n+    setMapInitialized(false);\r\n+    setError(null);\r\n+    setDebugInfo([]);\r\n+    setIsLoading(true);\r\n+  };\r\n+\r\n   if (isLoading) {\r\n     return (\r\n       <div className=\"h-full flex flex-col items-center justify-center bg-gray-50 p-4\">\r\n         <div className=\"text-center mb-4\">\r\n@@ -321,8 +359,9 @@\n               <div key={index} className=\"text-gray-600\">{info}</div>\r\n             ))}\r\n           </div>\r\n           <div className=\"mt-2 pt-2 border-t\">\r\n+            <div>Mounted: {isMounted ? '✅ Yes' : '❌ No'}</div>\r\n             <div>Container: {mapRef.current ? '✅ Found' : '❌ Not found'}</div>\r\n             <div>Initialized: {mapInitialized ? '✅ Yes' : '❌ No'}</div>\r\n             <div>API Key: {process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY ? '✅ Present' : '❌ Missing'}</div>\r\n           </div>\r\n@@ -349,18 +388,16 @@\n               {debugInfo.slice(-10).map((info, index) => (\r\n                 <div key={index} className=\"text-gray-600\">{info}</div>\r\n               ))}\r\n             </div>\r\n+            <div className=\"mt-2 pt-2 border-t\">\r\n+              <div>Mounted: {isMounted ? '✅ Yes' : '❌ No'}</div>\r\n+              <div>Container: {mapRef.current ? '✅ Found' : '❌ Not found'}</div>\r\n+              <div>Initialized: {mapInitialized ? '✅ Yes' : '❌ No'}</div>\r\n+            </div>\r\n           </div>\r\n           \r\n-          <button \r\n-            onClick={() => {\r\n-              setMapInitialized(false);\r\n-              setError(null);\r\n-              setDebugInfo([]);\r\n-            }}\r\n-            className=\"btn-primary\"\r\n-          >\r\n+          <button onClick={handleRetry} className=\"btn-primary\">\r\n             Retry\r\n           </button>\r\n           <div className=\"mt-4 text-xs text-gray-500\">\r\n             <p>Make sure your Google Maps API key has these services enabled:</p>\r\n"
                },
                {
                    "date": 1752439880546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,48 +342,27 @@\n     setDebugInfo([]);\r\n     setIsLoading(true);\r\n   };\r\n \r\n-  if (isLoading) {\r\n-    return (\r\n-      <div className=\"h-full flex flex-col items-center justify-center bg-gray-50 p-4\">\r\n-        <div className=\"text-center mb-4\">\r\n-          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-2\"></div>\r\n-          <p className=\"text-sm text-gray-600\">Loading map...</p>\r\n-        </div>\r\n-        \r\n-        {/* Debug Info */}\r\n-        <div className=\"bg-white rounded-lg shadow p-3 max-w-md text-xs\">\r\n-          <h4 className=\"font-semibold mb-2\">Debug Log:</h4>\r\n-          <div className=\"space-y-1 max-h-32 overflow-y-auto\">\r\n-            {debugInfo.slice(-10).map((info, index) => (\r\n-              <div key={index} className=\"text-gray-600\">{info}</div>\r\n-            ))}\r\n+  return (\r\n+    <div className=\"h-full relative\">\r\n+      {/* Map Container - Always rendered */}\r\n+      <div \r\n+        ref={mapRef}\r\n+        className=\"w-full bg-gray-100 rounded-lg\"\r\n+        style={{ height: '600px', minHeight: '400px' }}\r\n+      />\r\n+      \r\n+      {/* Loading Overlay */}\r\n+      {isLoading && (\r\n+        <div className=\"absolute inset-0 flex flex-col items-center justify-center bg-gray-50 bg-opacity-95 rounded-lg\">\r\n+          <div className=\"text-center mb-4\">\r\n+            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-2\"></div>\r\n+            <p className=\"text-sm text-gray-600\">Loading map...</p>\r\n           </div>\r\n-          <div className=\"mt-2 pt-2 border-t\">\r\n-            <div>Mounted: {isMounted ? '✅ Yes' : '❌ No'}</div>\r\n-            <div>Container: {mapRef.current ? '✅ Found' : '❌ Not found'}</div>\r\n-            <div>Initialized: {mapInitialized ? '✅ Yes' : '❌ No'}</div>\r\n-            <div>API Key: {process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY ? '✅ Present' : '❌ Missing'}</div>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    );\r\n-  }\r\n-\r\n-  if (error) {\r\n-    return (\r\n-      <div className=\"h-full flex items-center justify-center bg-gray-50\">\r\n-        <div className=\"text-center max-w-md\">\r\n-          <div className=\"text-red-500 mb-4\">\r\n-            <svg className=\"w-12 h-12 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n-            </svg>\r\n-          </div>\r\n-          <p className=\"text-red-600 mb-4 text-sm\">{error}</p>\r\n           \r\n           {/* Debug Info */}\r\n-          <div className=\"bg-white rounded-lg shadow p-3 mb-4 text-xs text-left\">\r\n+          <div className=\"bg-white rounded-lg shadow p-3 max-w-md text-xs\">\r\n             <h4 className=\"font-semibold mb-2\">Debug Log:</h4>\r\n             <div className=\"space-y-1 max-h-32 overflow-y-auto\">\r\n               {debugInfo.slice(-10).map((info, index) => (\r\n                 <div key={index} className=\"text-gray-600\">{info}</div>\r\n@@ -392,65 +371,89 @@\n             <div className=\"mt-2 pt-2 border-t\">\r\n               <div>Mounted: {isMounted ? '✅ Yes' : '❌ No'}</div>\r\n               <div>Container: {mapRef.current ? '✅ Found' : '❌ Not found'}</div>\r\n               <div>Initialized: {mapInitialized ? '✅ Yes' : '❌ No'}</div>\r\n+              <div>API Key: {process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY ? '✅ Present' : '❌ Missing'}</div>\r\n             </div>\r\n           </div>\r\n-          \r\n-          <button onClick={handleRetry} className=\"btn-primary\">\r\n-            Retry\r\n-          </button>\r\n-          <div className=\"mt-4 text-xs text-gray-500\">\r\n-            <p>Make sure your Google Maps API key has these services enabled:</p>\r\n-            <ul className=\"mt-2 text-left\">\r\n-              <li>• Maps JavaScript API</li>\r\n-              <li>• Places API (New)</li>\r\n-              <li>• Geocoding API</li>\r\n-            </ul>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Error Overlay */}\r\n+      {error && (\r\n+        <div className=\"absolute inset-0 flex items-center justify-center bg-gray-50 bg-opacity-95 rounded-lg\">\r\n+          <div className=\"text-center max-w-md\">\r\n+            <div className=\"text-red-500 mb-4\">\r\n+              <svg className=\"w-12 h-12 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n+              </svg>\r\n+            </div>\r\n+            <p className=\"text-red-600 mb-4 text-sm\">{error}</p>\r\n+            \r\n+            {/* Debug Info */}\r\n+            <div className=\"bg-white rounded-lg shadow p-3 mb-4 text-xs text-left\">\r\n+              <h4 className=\"font-semibold mb-2\">Debug Log:</h4>\r\n+              <div className=\"space-y-1 max-h-32 overflow-y-auto\">\r\n+                {debugInfo.slice(-10).map((info, index) => (\r\n+                  <div key={index} className=\"text-gray-600\">{info}</div>\r\n+                ))}\r\n+              </div>\r\n+              <div className=\"mt-2 pt-2 border-t\">\r\n+                <div>Mounted: {isMounted ? '✅ Yes' : '❌ No'}</div>\r\n+                <div>Container: {mapRef.current ? '✅ Found' : '❌ Not found'}</div>\r\n+                <div>Initialized: {mapInitialized ? '✅ Yes' : '❌ No'}</div>\r\n+              </div>\r\n+            </div>\r\n+            \r\n+            <button onClick={handleRetry} className=\"btn-primary\">\r\n+              Retry\r\n+            </button>\r\n+            <div className=\"mt-4 text-xs text-gray-500\">\r\n+              <p>Make sure your Google Maps API key has these services enabled:</p>\r\n+              <ul className=\"mt-2 text-left\">\r\n+                <li>• Maps JavaScript API</li>\r\n+                <li>• Places API (New)</li>\r\n+                <li>• Geocoding API</li>\r\n+              </ul>\r\n+            </div>\r\n           </div>\r\n         </div>\r\n-      </div>\r\n-    );\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"h-full relative\">\r\n-      <div \r\n-        ref={mapRef}\r\n-        className=\"w-full bg-gray-100 rounded-lg\"\r\n-        style={{ height: '600px', minHeight: '400px' }}\r\n-      />\r\n+      )}\r\n       \r\n-      {/* Map Controls */}\r\n-      <div className=\"absolute top-4 left-4 bg-white rounded-lg shadow-md p-2\">\r\n-        <div className=\"flex items-center space-x-2 text-sm\">\r\n-          <span className=\"text-gray-600\">Day {selectedDay}</span>\r\n-          <div \r\n-            className=\"w-4 h-4 rounded-full\"\r\n-            style={{ backgroundColor: tripDays.find(d => d.day === selectedDay)?.color.pin }}\r\n-          />\r\n-          <span className=\"text-gray-600\">Click to add destination</span>\r\n+      {/* Map Controls - Only show when map is loaded */}\r\n+      {!isLoading && !error && (\r\n+        <div className=\"absolute top-4 left-4 bg-white rounded-lg shadow-md p-2\">\r\n+          <div className=\"flex items-center space-x-2 text-sm\">\r\n+            <span className=\"text-gray-600\">Day {selectedDay}</span>\r\n+            <div \r\n+              className=\"w-4 h-4 rounded-full\"\r\n+              style={{ backgroundColor: tripDays.find(d => d.day === selectedDay)?.color.pin }}\r\n+            />\r\n+            <span className=\"text-gray-600\">Click to add destination</span>\r\n+          </div>\r\n         </div>\r\n-      </div>\r\n+      )}\r\n \r\n-      {/* Legend */}\r\n-      <div className=\"absolute bottom-4 left-4 bg-white rounded-lg shadow-md p-3 max-w-xs\">\r\n-        <h3 className=\"font-semibold text-gray-900 mb-2\">Trip Days</h3>\r\n-        <div className=\"space-y-1\">\r\n-          {tripDays.slice(0, 5).map((day) => (\r\n-            <div key={day.day} className=\"flex items-center space-x-2 text-sm\">\r\n-              <div \r\n-                className=\"w-3 h-3 rounded-full\"\r\n-                style={{ backgroundColor: day.color.pin }}\r\n-              />\r\n-              <span className=\"text-gray-700\">Day {day.day}</span>\r\n-              <span className=\"text-gray-500\">({day.destinations.length} stops)</span>\r\n-            </div>\r\n-          ))}\r\n-          {tripDays.length > 5 && (\r\n-            <div className=\"text-xs text-gray-500\">+{tripDays.length - 5} more days</div>\r\n-          )}\r\n+      {/* Legend - Only show when map is loaded */}\r\n+      {!isLoading && !error && (\r\n+        <div className=\"absolute bottom-4 left-4 bg-white rounded-lg shadow-md p-3 max-w-xs\">\r\n+          <h3 className=\"font-semibold text-gray-900 mb-2\">Trip Days</h3>\r\n+          <div className=\"space-y-1\">\r\n+            {tripDays.slice(0, 5).map((day) => (\r\n+              <div key={day.day} className=\"flex items-center space-x-2 text-sm\">\r\n+                <div \r\n+                  className=\"w-3 h-3 rounded-full\"\r\n+                  style={{ backgroundColor: day.color.pin }}\r\n+                />\r\n+                <span className=\"text-gray-700\">Day {day.day}</span>\r\n+                <span className=\"text-gray-500\">({day.destinations.length} stops)</span>\r\n+              </div>\r\n+            ))}\r\n+            {tripDays.length > 5 && (\r\n+              <div className=\"text-xs text-gray-500\">+{tripDays.length - 5} more days</div>\r\n+            )}\r\n+          </div>\r\n         </div>\r\n-      </div>\r\n+      )}\r\n     </div>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752440930381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n   selectedDestination: Destination | null;\r\n   selectedDay: number;\r\n   onDestinationSelect: (destination: Destination) => void;\r\n   onDestinationAdd: (destination: Destination) => void;\r\n+  isAddingDestination?: boolean;\r\n }\r\n \r\n export default function TripMap({\r\n   trip,\r\n@@ -20,8 +21,9 @@\n   selectedDestination,\r\n   selectedDay,\r\n   onDestinationSelect,\r\n   onDestinationAdd,\r\n+  isAddingDestination = false,\r\n }: TripMapProps) {\r\n   const mapRef = useRef<HTMLDivElement>(null);\r\n   const [map, setMap] = useState<google.maps.Map | null>(null);\r\n   const [markers, setMarkers] = useState<google.maps.Marker[]>([]);\r\n"
                },
                {
                    "date": 1752440954388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,9 +294,9 @@\n   }, [selectedDestination, markers, map]);\r\n \r\n   // Handle map click to add new destination\r\n   const handleMapClick = (event: google.maps.MapMouseEvent) => {\r\n-    if (!event.latLng) return;\r\n+    if (!event.latLng || isAddingDestination) return;\r\n \r\n     const lat = event.latLng.lat();\r\n     const lng = event.latLng.lng();\r\n \r\n@@ -334,9 +334,9 @@\n     const listener = map.addListener('click', handleMapClick);\r\n     return () => {\r\n       google.maps.event.removeListener(listener);\r\n     };\r\n-  }, [map, selectedDay, trip.id, tripDays, onDestinationAdd]);\r\n+  }, [map, selectedDay, trip.id, tripDays, onDestinationAdd, isAddingDestination]);\r\n \r\n   const handleRetry = () => {\r\n     addDebugInfo('Retry button clicked');\r\n     setMapInitialized(false);\r\n@@ -420,18 +420,25 @@\n           </div>\r\n         </div>\r\n       )}\r\n       \r\n-      {/* Map Controls - Only show when map is loaded */}\r\n+      {/* Map Controls */}\r\n       {!isLoading && !error && (\r\n         <div className=\"absolute top-4 left-4 bg-white rounded-lg shadow-md p-2\">\r\n           <div className=\"flex items-center space-x-2 text-sm\">\r\n             <span className=\"text-gray-600\">Day {selectedDay}</span>\r\n             <div \r\n               className=\"w-4 h-4 rounded-full\"\r\n               style={{ backgroundColor: tripDays.find(d => d.day === selectedDay)?.color.pin }}\r\n             />\r\n-            <span className=\"text-gray-600\">Click to add destination</span>\r\n+            {isAddingDestination ? (\r\n+              <div className=\"flex items-center space-x-2\">\r\n+                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary-600\"></div>\r\n+                <span className=\"text-gray-600\">Adding destination...</span>\r\n+              </div>\r\n+            ) : (\r\n+              <span className=\"text-gray-600\">Click to add destination</span>\r\n+            )}\r\n           </div>\r\n         </div>\r\n       )}\r\n \r\n"
                },
                {
                    "date": 1752441796118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,9 +189,9 @@\n \r\n   // Update markers when destinations change\r\n   useEffect(() => {\r\n     if (!map || !destinations.length) {\r\n-      addDebugInfo(`Skipping markers: map=${!!map}, destinations=${destinations.length}${isLoading ? ' map is in loading' : ''}`);\r\n+      addDebugInfo(`Skipping markers: map=${!!map}, destinations=${destinations.length}${isLoading ? ', map is loading' : ''}`);\r\n       return;\r\n     }\r\n \r\n     addDebugInfo(`Updating ${destinations.length} markers`);\r\n@@ -299,33 +299,99 @@\n \r\n     const lat = event.latLng.lat();\r\n     const lng = event.latLng.lng();\r\n \r\n-    // Use reverse geocoding to get address\r\n-    const geocoder = new google.maps.Geocoder();\r\n-    geocoder.geocode({ location: { lat, lng } }, (results, status) => {\r\n-      if (status === 'OK' && results?.[0]) {\r\n-        const address = results[0].formatted_address;\r\n-        const locationName = results[0].address_components?.[0]?.long_name || address;\r\n+    // Use Places API first, then fall back to reverse geocoding\r\n+    const placesService = new google.maps.places.PlacesService(map!);\r\n+    \r\n+    // Try to find nearby places first\r\n+    placesService.nearbySearch(\r\n+      {\r\n+        location: { lat, lng },\r\n+        radius: 50, // 50 meters\r\n+        type: 'establishment' as any, // Cast to any to avoid TypeScript issues\r\n+      },\r\n+      (results, status) => {\r\n+        if (status === google.maps.places.PlacesServiceStatus.OK && results && results[0]) {\r\n+          // Found a business/place\r\n+          const place = results[0];\r\n+          const locationName = place.name || 'Unknown Place';\r\n+          const address = place.vicinity || place.formatted_address || '';\r\n+          \r\n+          // Create new destination object\r\n+          const selectedDayData = tripDays.find(d => d.day === selectedDay);\r\n+          const newDestination: Destination = {\r\n+            id: '', // Will be set by server\r\n+            tripId: trip.id,\r\n+            locationName,\r\n+            address,\r\n+            lat,\r\n+            lng,\r\n+            day: selectedDay,\r\n+            orderIndex: (selectedDayData?.destinations.length || 0) + 1,\r\n+            createdAt: new Date(),\r\n+            updatedAt: new Date(),\r\n+          };\r\n \r\n-        // Create new destination object\r\n-        const selectedDayData = tripDays.find(d => d.day === selectedDay);\r\n-        const newDestination: Destination = {\r\n-          id: '', // Will be set by server\r\n-          tripId: trip.id,\r\n-          locationName,\r\n-          address,\r\n-          lat,\r\n-          lng,\r\n-          day: selectedDay,\r\n-          orderIndex: (selectedDayData?.destinations.length || 0) + 1,\r\n-          createdAt: new Date(),\r\n-          updatedAt: new Date(),\r\n-        };\r\n+          onDestinationAdd(newDestination);\r\n+        } else {\r\n+          // Fall back to reverse geocoding\r\n+          const geocoder = new google.maps.Geocoder();\r\n+          geocoder.geocode({ location: { lat, lng } }, (results, status) => {\r\n+            if (status === 'OK' && results?.[0]) {\r\n+              const address = results[0].formatted_address;\r\n+              \r\n+              // Try to extract a meaningful name from the address components\r\n+              let locationName = address;\r\n+              const components = results[0].address_components;\r\n+              \r\n+              if (components && components.length > 0) {\r\n+                // Look for business name, route name, or neighborhood\r\n+                const businessComponent = components.find(c => \r\n+                  c.types.includes('establishment') || \r\n+                  c.types.includes('point_of_interest') ||\r\n+                  c.types.includes('premise')\r\n+                );\r\n+                \r\n+                if (businessComponent) {\r\n+                  locationName = businessComponent.long_name;\r\n+                } else {\r\n+                  // Use street number + route if available\r\n+                  const streetNumber = components.find(c => c.types.includes('street_number'))?.long_name;\r\n+                  const route = components.find(c => c.types.includes('route'))?.long_name;\r\n+                  \r\n+                  if (streetNumber && route) {\r\n+                    locationName = `${streetNumber} ${route}`;\r\n+                  } else if (route) {\r\n+                    locationName = route;\r\n+                  } else {\r\n+                    // Use first component as fallback\r\n+                    locationName = components[0].long_name;\r\n+                  }\r\n+                }\r\n+              }\r\n \r\n-        onDestinationAdd(newDestination);\r\n+              // Create new destination object\r\n+              const selectedDayData = tripDays.find(d => d.day === selectedDay);\r\n+              const newDestination: Destination = {\r\n+                id: '', // Will be set by server\r\n+                tripId: trip.id,\r\n+                locationName,\r\n+                address,\r\n+                lat,\r\n+                lng,\r\n+                day: selectedDay,\r\n+                orderIndex: (selectedDayData?.destinations.length || 0) + 1,\r\n+                createdAt: new Date(),\r\n+                updatedAt: new Date(),\r\n+              };\r\n+\r\n+              onDestinationAdd(newDestination);\r\n+            }\r\n+          });\r\n+        }\r\n       }\r\n-    });\r\n+    );\r\n   };\r\n \r\n   // Add click listener to map\r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1752441818841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,18 +193,24 @@\n       addDebugInfo(`Skipping markers: map=${!!map}, destinations=${destinations.length}${isLoading ? ', map is loading' : ''}`);\r\n       return;\r\n     }\r\n \r\n-    addDebugInfo(`Updating ${destinations.length} markers`);\r\n+    addDebugInfo(`Updating ${destinations.length} markers - destinations changed`);\r\n \r\n     // Clear existing markers\r\n     markers.forEach(marker => marker.setMap(null));\r\n \r\n     // Create new markers\r\n     const newMarkers: google.maps.Marker[] = [];\r\n     const bounds = new google.maps.LatLngBounds();\r\n \r\n-    destinations.forEach((destination, index) => {\r\n+    // Sort destinations by day and order index to ensure proper numbering\r\n+    const sortedDestinations = [...destinations].sort((a, b) => {\r\n+      if (a.day !== b.day) return a.day - b.day;\r\n+      return (a.orderIndex || 0) - (b.orderIndex || 0);\r\n+    });\r\n+\r\n+    sortedDestinations.forEach((destination, index) => {\r\n       const dayColor = tripDays.find(d => d.day === destination.day)?.color;\r\n       \r\n       // Create marker with simple icon\r\n       const marker = new google.maps.Marker({\r\n@@ -226,8 +232,10 @@\n           fontWeight: 'bold',\r\n         },\r\n       });\r\n \r\n+      addDebugInfo(`Created marker for ${destination.locationName} with order ${destination.orderIndex} on day ${destination.day}`);\r\n+\r\n       // Add click listener\r\n       marker.addListener('click', () => {\r\n         onDestinationSelect(destination);\r\n       });\r\n"
                },
                {
                    "date": 1752442222973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,31 +277,8 @@\n       }\r\n     }\r\n   }, [map, destinations, tripDays, onDestinationSelect, isLoading]);\r\n \r\n-  // Highlight selected destination\r\n-  useEffect(() => {\r\n-    if (!selectedDestination || !markers.length) return;\r\n-\r\n-    markers.forEach(marker => {\r\n-      const position = marker.getPosition();\r\n-      if (\r\n-        position &&\r\n-        position.lat() === selectedDestination.lat &&\r\n-        position.lng() === selectedDestination.lng\r\n-      ) {\r\n-        // Highlight selected marker\r\n-        marker.setAnimation(google.maps.Animation.BOUNCE);\r\n-        setTimeout(() => {\r\n-          marker.setAnimation(null);\r\n-        }, 1500);\r\n-        \r\n-        // Center map on selected destination\r\n-        map?.panTo(position);\r\n-      }\r\n-    });\r\n-  }, [selectedDestination, markers, map]);\r\n-\r\n   // Handle map click to add new destination\r\n   const handleMapClick = (event: google.maps.MapMouseEvent) => {\r\n     if (!event.latLng || isAddingDestination) return;\r\n \r\n@@ -324,14 +301,16 @@\n           const place = results[0];\r\n           const locationName = place.name || 'Unknown Place';\r\n           const address = place.vicinity || place.formatted_address || '';\r\n           \r\n+          addDebugInfo(`Found business: ${locationName} at ${address}`);\r\n+          \r\n           // Create new destination object\r\n           const selectedDayData = tripDays.find(d => d.day === selectedDay);\r\n           const newDestination: Destination = {\r\n             id: '', // Will be set by server\r\n             tripId: trip.id,\r\n-            locationName,\r\n+            locationName, // Use the business name from Places API\r\n             address,\r\n             lat,\r\n             lng,\r\n             day: selectedDay,\r\n@@ -339,11 +318,13 @@\n             createdAt: new Date(),\r\n             updatedAt: new Date(),\r\n           };\r\n \r\n+          addDebugInfo(`Creating destination with business name: ${locationName}`);\r\n           onDestinationAdd(newDestination);\r\n         } else {\r\n           // Fall back to reverse geocoding\r\n+          addDebugInfo('No business found, falling back to reverse geocoding');\r\n           const geocoder = new google.maps.Geocoder();\r\n           geocoder.geocode({ location: { lat, lng } }, (results, status) => {\r\n             if (status === 'OK' && results?.[0]) {\r\n               const address = results[0].formatted_address;\r\n@@ -377,8 +358,10 @@\n                   }\r\n                 }\r\n               }\r\n \r\n+              addDebugInfo(`Using geocoded name: ${locationName}`);\r\n+\r\n               // Create new destination object\r\n               const selectedDayData = tripDays.find(d => d.day === selectedDay);\r\n               const newDestination: Destination = {\r\n                 id: '', // Will be set by server\r\n@@ -400,8 +383,38 @@\n       }\r\n     );\r\n   };\r\n \r\n+  // Highlight selected destination\r\n+  useEffect(() => {\r\n+    if (!selectedDestination || !markers.length) return;\r\n+\r\n+    // Clear all previous animations first\r\n+    markers.forEach(marker => {\r\n+      marker.setAnimation(null);\r\n+    });\r\n+\r\n+    // Find and animate only the selected marker\r\n+    markers.forEach(marker => {\r\n+      const position = marker.getPosition();\r\n+      if (\r\n+        position &&\r\n+        position.lat() === selectedDestination.lat &&\r\n+        position.lng() === selectedDestination.lng\r\n+      ) {\r\n+        // Only animate if this marker corresponds to the selected destination\r\n+        addDebugInfo(`Animating marker for ${selectedDestination.locationName}`);\r\n+        marker.setAnimation(google.maps.Animation.BOUNCE);\r\n+        setTimeout(() => {\r\n+          marker.setAnimation(null);\r\n+        }, 1500);\r\n+        \r\n+        // Center map on selected destination\r\n+        map?.panTo(position);\r\n+      }\r\n+    });\r\n+  }, [selectedDestination, markers, map]);\r\n+\r\n   // Add click listener to map\r\n   useEffect(() => {\r\n     if (!map) return;\r\n \r\n"
                },
                {
                    "date": 1752442254240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,88 +195,98 @@\n     }\r\n \r\n     addDebugInfo(`Updating ${destinations.length} markers - destinations changed`);\r\n \r\n-    // Clear existing markers\r\n-    markers.forEach(marker => marker.setMap(null));\r\n+    // Clear existing markers completely\r\n+    markers.forEach(marker => {\r\n+      marker.setMap(null);\r\n+      // Remove all event listeners\r\n+      google.maps.event.clearInstanceListeners(marker);\r\n+    });\r\n \r\n-    // Create new markers\r\n-    const newMarkers: google.maps.Marker[] = [];\r\n-    const bounds = new google.maps.LatLngBounds();\r\n+    // Small delay to ensure markers are fully cleared before creating new ones\r\n+    setTimeout(() => {\r\n+      // Create new markers\r\n+      const newMarkers: google.maps.Marker[] = [];\r\n+      const bounds = new google.maps.LatLngBounds();\r\n \r\n-    // Sort destinations by day and order index to ensure proper numbering\r\n-    const sortedDestinations = [...destinations].sort((a, b) => {\r\n-      if (a.day !== b.day) return a.day - b.day;\r\n-      return (a.orderIndex || 0) - (b.orderIndex || 0);\r\n-    });\r\n-\r\n-    sortedDestinations.forEach((destination, index) => {\r\n-      const dayColor = tripDays.find(d => d.day === destination.day)?.color;\r\n-      \r\n-      // Create marker with simple icon\r\n-      const marker = new google.maps.Marker({\r\n-        position: { lat: destination.lat, lng: destination.lng },\r\n-        map: map,\r\n-        title: destination.locationName,\r\n-        icon: {\r\n-          path: google.maps.SymbolPath.CIRCLE,\r\n-          scale: 12,\r\n-          fillColor: dayColor?.pin || '#6B7280',\r\n-          fillOpacity: 1,\r\n-          strokeColor: '#FFFFFF',\r\n-          strokeWeight: 2,\r\n-        },\r\n-        label: {\r\n-          text: destination.orderIndex?.toString() || (index + 1).toString(),\r\n-          color: '#FFFFFF',\r\n-          fontSize: '12px',\r\n-          fontWeight: 'bold',\r\n-        },\r\n+      // Sort destinations by day and order index to ensure proper numbering\r\n+      const sortedDestinations = [...destinations].sort((a, b) => {\r\n+        if (a.day !== b.day) return a.day - b.day;\r\n+        return (a.orderIndex || 0) - (b.orderIndex || 0);\r\n       });\r\n \r\n-      addDebugInfo(`Created marker for ${destination.locationName} with order ${destination.orderIndex} on day ${destination.day}`);\r\n+      sortedDestinations.forEach((destination, index) => {\r\n+        const dayColor = tripDays.find(d => d.day === destination.day)?.color;\r\n+        \r\n+        // Create completely new marker with simple icon\r\n+        const marker = new google.maps.Marker({\r\n+          position: { lat: destination.lat, lng: destination.lng },\r\n+          map: map,\r\n+          title: destination.locationName,\r\n+          icon: {\r\n+            path: google.maps.SymbolPath.CIRCLE,\r\n+            scale: 12,\r\n+            fillColor: dayColor?.pin || '#6B7280',\r\n+            fillOpacity: 1,\r\n+            strokeColor: '#FFFFFF',\r\n+            strokeWeight: 2,\r\n+          },\r\n+          label: {\r\n+            text: destination.orderIndex?.toString() || (index + 1).toString(),\r\n+            color: '#FFFFFF',\r\n+            fontSize: '12px',\r\n+            fontWeight: 'bold',\r\n+          },\r\n+          // Prevent any unwanted animations during creation\r\n+          animation: null,\r\n+        });\r\n \r\n-      // Add click listener\r\n-      marker.addListener('click', () => {\r\n-        onDestinationSelect(destination);\r\n-      });\r\n+        addDebugInfo(`Created marker ${destination.orderIndex} for ${destination.locationName} on day ${destination.day}`);\r\n \r\n-      // Create info window\r\n-      const infoWindow = new google.maps.InfoWindow({\r\n-        content: `\r\n-          <div style=\"padding: 12px; max-width: 250px;\">\r\n-            <h3 style=\"font-weight: 600; color: #1F2937; margin-bottom: 4px;\">${destination.locationName}</h3>\r\n-            <p style=\"font-size: 14px; color: #6B7280; margin-bottom: 8px;\">${destination.address}</p>\r\n-            <div style=\"display: flex; align-items: center; justify-content: space-between; font-size: 12px; color: #9CA3AF;\">\r\n-              <span>Day ${destination.day}</span>\r\n-              ${destination.startTime ? `<span>${destination.startTime}</span>` : ''}\r\n+        // Add click listener\r\n+        marker.addListener('click', () => {\r\n+          onDestinationSelect(destination);\r\n+        });\r\n+\r\n+        // Create info window\r\n+        const infoWindow = new google.maps.InfoWindow({\r\n+          content: `\r\n+            <div style=\"padding: 12px; max-width: 250px;\">\r\n+              <h3 style=\"font-weight: 600; color: #1F2937; margin-bottom: 4px;\">${destination.locationName}</h3>\r\n+              <p style=\"font-size: 14px; color: #6B7280; margin-bottom: 8px;\">${destination.address}</p>\r\n+              <div style=\"display: flex; align-items: center; justify-content: space-between; font-size: 12px; color: #9CA3AF;\">\r\n+                <span>Day ${destination.day}</span>\r\n+                ${destination.startTime ? `<span>${destination.startTime}</span>` : ''}\r\n+              </div>\r\n+              ${destination.notes ? `<p style=\"font-size: 14px; color: #374151; margin-top: 8px;\">${destination.notes}</p>` : ''}\r\n             </div>\r\n-            ${destination.notes ? `<p style=\"font-size: 14px; color: #374151; margin-top: 8px;\">${destination.notes}</p>` : ''}\r\n-          </div>\r\n-        `,\r\n-      });\r\n+          `,\r\n+        });\r\n \r\n-      // Show info window on marker click\r\n-      marker.addListener('click', () => {\r\n-        infoWindow.open(map, marker);\r\n+        // Show info window on marker click\r\n+        marker.addListener('click', () => {\r\n+          infoWindow.open(map, marker);\r\n+        });\r\n+\r\n+        newMarkers.push(marker);\r\n+        bounds.extend(marker.getPosition()!);\r\n       });\r\n \r\n-      newMarkers.push(marker);\r\n-      bounds.extend(marker.getPosition()!);\r\n-    });\r\n+      setMarkers(newMarkers);\r\n+      addDebugInfo(`Created ${newMarkers.length} new markers`);\r\n \r\n-    setMarkers(newMarkers);\r\n-    addDebugInfo(`Created ${newMarkers.length} markers`);\r\n+      // Fit map to show all markers\r\n+      if (newMarkers.length > 0) {\r\n+        map.fitBounds(bounds);\r\n+        \r\n+        // Prevent over-zooming for single marker\r\n+        if (newMarkers.length === 1) {\r\n+          map.setZoom(Math.min(map.getZoom() || 15, 15));\r\n+        }\r\n+      }\r\n+    }, 50); // Small delay to ensure proper marker recreation\r\n \r\n-    // Fit map to show all markers\r\n-    if (newMarkers.length > 0) {\r\n-      map.fitBounds(bounds);\r\n-      \r\n-      // Prevent over-zooming for single marker\r\n-      if (newMarkers.length === 1) {\r\n-        map.setZoom(Math.min(map.getZoom() || 15, 15));\r\n-      }\r\n-    }\r\n   }, [map, destinations, tripDays, onDestinationSelect, isLoading]);\r\n \r\n   // Handle map click to add new destination\r\n   const handleMapClick = (event: google.maps.MapMouseEvent) => {\r\n"
                },
                {
                    "date": 1752442271685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -397,33 +397,38 @@\n   // Highlight selected destination\r\n   useEffect(() => {\r\n     if (!selectedDestination || !markers.length) return;\r\n \r\n-    // Clear all previous animations first\r\n+    // Clear all previous animations first to prevent interference\r\n     markers.forEach(marker => {\r\n       marker.setAnimation(null);\r\n     });\r\n \r\n-    // Find and animate only the selected marker\r\n-    markers.forEach(marker => {\r\n-      const position = marker.getPosition();\r\n-      if (\r\n-        position &&\r\n-        position.lat() === selectedDestination.lat &&\r\n-        position.lng() === selectedDestination.lng\r\n-      ) {\r\n-        // Only animate if this marker corresponds to the selected destination\r\n-        addDebugInfo(`Animating marker for ${selectedDestination.locationName}`);\r\n-        marker.setAnimation(google.maps.Animation.BOUNCE);\r\n-        setTimeout(() => {\r\n-          marker.setAnimation(null);\r\n-        }, 1500);\r\n-        \r\n-        // Center map on selected destination\r\n-        map?.panTo(position);\r\n-      }\r\n-    });\r\n-  }, [selectedDestination, markers, map]);\r\n+    // Small delay to ensure animations are cleared\r\n+    setTimeout(() => {\r\n+      // Find and animate only the selected marker based on both coordinates and destination ID\r\n+      markers.forEach(marker => {\r\n+        const position = marker.getPosition();\r\n+        if (\r\n+          position &&\r\n+          Math.abs(position.lat() - selectedDestination.lat) < 0.0001 &&\r\n+          Math.abs(position.lng() - selectedDestination.lng) < 0.0001\r\n+        ) {\r\n+          // Only animate if this marker corresponds to the selected destination\r\n+          addDebugInfo(`Animating selected marker: ${selectedDestination.locationName} (ID: ${selectedDestination.id})`);\r\n+          marker.setAnimation(google.maps.Animation.BOUNCE);\r\n+          setTimeout(() => {\r\n+            if (marker.getMap()) { // Check if marker still exists\r\n+              marker.setAnimation(null);\r\n+            }\r\n+          }, 1500);\r\n+          \r\n+          // Center map on selected destination\r\n+          map?.panTo(position);\r\n+        }\r\n+      });\r\n+    }, 100);\r\n+  }, [selectedDestination?.id, markers, map]); // Use selectedDestination.id as dependency\r\n \r\n   // Add click listener to map\r\n   useEffect(() => {\r\n     if (!map) return;\r\n"
                },
                {
                    "date": 1752442289323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,10 @@\n \r\n   // Debug function\r\n   const addDebugInfo = (info: string) => {\r\n     const timestamp = new Date().toLocaleTimeString();\r\n-    console.log(`${timestamp}: ${info}`);\r\n-    setDebugInfo(prev => [...prev, `${timestamp}: ${info}`]);\r\n+    console.log(`TripMap: ${info}`);\r\n+    setDebugInfo(prev => [...prev.slice(-5), `${timestamp}: ${info}`]); // Keep only last 5 messages\r\n   };\r\n \r\n   // Ensure component is mounted before trying to access DOM\r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1752442845347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,20 +193,26 @@\n       addDebugInfo(`Skipping markers: map=${!!map}, destinations=${destinations.length}${isLoading ? ', map is loading' : ''}`);\r\n       return;\r\n     }\r\n \r\n-    addDebugInfo(`Updating ${destinations.length} markers - destinations changed`);\r\n+    addDebugInfo(`Recreating ${destinations.length} markers completely`);\r\n \r\n-    // Clear existing markers completely\r\n+    // Clear existing markers completely and forcefully\r\n     markers.forEach(marker => {\r\n       marker.setMap(null);\r\n-      // Remove all event listeners\r\n+      // Remove all event listeners to prevent memory leaks\r\n       google.maps.event.clearInstanceListeners(marker);\r\n     });\r\n+    \r\n+    // Clear markers array immediately\r\n+    setMarkers([]);\r\n \r\n-    // Small delay to ensure markers are fully cleared before creating new ones\r\n-    setTimeout(() => {\r\n-      // Create new markers\r\n+    // Force a slight delay to ensure Google Maps processes the removal\r\n+    const timeoutId = setTimeout(() => {\r\n+      // Double-check we still have the map and destinations\r\n+      if (!map || !destinations.length) return;\r\n+\r\n+      // Create completely new markers array\r\n       const newMarkers: google.maps.Marker[] = [];\r\n       const bounds = new google.maps.LatLngBounds();\r\n \r\n       // Sort destinations by day and order index to ensure proper numbering\r\n@@ -214,12 +220,14 @@\n         if (a.day !== b.day) return a.day - b.day;\r\n         return (a.orderIndex || 0) - (b.orderIndex || 0);\r\n       });\r\n \r\n+      addDebugInfo(`Creating markers for ${sortedDestinations.length} sorted destinations`);\r\n+\r\n       sortedDestinations.forEach((destination, index) => {\r\n         const dayColor = tripDays.find(d => d.day === destination.day)?.color;\r\n         \r\n-        // Create completely new marker with simple icon\r\n+        // Create completely new marker instance\r\n         const marker = new google.maps.Marker({\r\n           position: { lat: destination.lat, lng: destination.lng },\r\n           map: map,\r\n           title: destination.locationName,\r\n@@ -236,10 +244,12 @@\n             color: '#FFFFFF',\r\n             fontSize: '12px',\r\n             fontWeight: 'bold',\r\n           },\r\n-          // Prevent any unwanted animations during creation\r\n+          // Ensure no animations interfere during creation\r\n           animation: null,\r\n+          // Force marker to be draggable: false to prevent conflicts\r\n+          draggable: false,\r\n         });\r\n \r\n         addDebugInfo(`Created marker ${destination.orderIndex} for ${destination.locationName} on day ${destination.day}`);\r\n \r\n@@ -271,10 +281,11 @@\n         newMarkers.push(marker);\r\n         bounds.extend(marker.getPosition()!);\r\n       });\r\n \r\n+      // Update markers state\r\n       setMarkers(newMarkers);\r\n-      addDebugInfo(`Created ${newMarkers.length} new markers`);\r\n+      addDebugInfo(`✅ Successfully created ${newMarkers.length} new markers`);\r\n \r\n       // Fit map to show all markers\r\n       if (newMarkers.length > 0) {\r\n         map.fitBounds(bounds);\r\n@@ -283,10 +294,15 @@\n         if (newMarkers.length === 1) {\r\n           map.setZoom(Math.min(map.getZoom() || 15, 15));\r\n         }\r\n       }\r\n-    }, 50); // Small delay to ensure proper marker recreation\r\n+    }, 100); // 100ms delay for proper marker recreation\r\n \r\n+    // Cleanup timeout on unmount or dependency change\r\n+    return () => {\r\n+      clearTimeout(timeoutId);\r\n+    };\r\n+\r\n   }, [map, destinations, tripDays, onDestinationSelect, isLoading]);\r\n \r\n   // Handle map click to add new destination\r\n   const handleMapClick = (event: google.maps.MapMouseEvent) => {\r\n"
                },
                {
                    "date": 1752444375868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -430,14 +430,45 @@\n           Math.abs(position.lng() - selectedDestination.lng) < 0.0001\r\n         ) {\r\n           // Only animate if this marker corresponds to the selected destination\r\n           addDebugInfo(`Animating selected marker: ${selectedDestination.locationName} (ID: ${selectedDestination.id})`);\r\n-          marker.setAnimation(google.maps.Animation.BOUNCE);\r\n-          setTimeout(() => {\r\n-            if (marker.getMap()) { // Check if marker still exists\r\n-              marker.setAnimation(null);\r\n+          \r\n+          // Create a custom animation that keeps icon and label synchronized\r\n+          let animationFrame = 0;\r\n+          const animationDuration = 1500; // 1.5 seconds\r\n+          const animationInterval = setInterval(() => {\r\n+            animationFrame += 50; // 50ms intervals\r\n+            \r\n+            if (animationFrame >= animationDuration) {\r\n+              clearInterval(animationInterval);\r\n+              // Reset to original position\r\n+              marker.setIcon({\r\n+                path: google.maps.SymbolPath.CIRCLE,\r\n+                scale: 12,\r\n+                fillColor: tripDays.find(d => d.day === selectedDestination.day)?.color?.pin || '#6B7280',\r\n+                fillOpacity: 1,\r\n+                strokeColor: '#FFFFFF',\r\n+                strokeWeight: 2,\r\n+                anchor: new google.maps.Point(0, 0), // Reset anchor\r\n+              });\r\n+              return;\r\n             }\r\n-          }, 1500);\r\n+            \r\n+            // Calculate bounce effect (sine wave for smooth animation)\r\n+            const bounceHeight = Math.abs(Math.sin(animationFrame / 150)) * 15;\r\n+            const dayColor = tripDays.find(d => d.day === selectedDestination.day)?.color;\r\n+            \r\n+            // Update marker icon with vertical offset to simulate bounce\r\n+            marker.setIcon({\r\n+              path: google.maps.SymbolPath.CIRCLE,\r\n+              scale: 12,\r\n+              fillColor: dayColor?.pin || '#6B7280',\r\n+              fillOpacity: 1,\r\n+              strokeColor: '#FFFFFF',\r\n+              strokeWeight: 2,\r\n+              anchor: new google.maps.Point(0, -bounceHeight), // Move both icon and label\r\n+            });\r\n+          }, 50);\r\n           \r\n           // Center map on selected destination\r\n           map?.panTo(position);\r\n         }\r\n"
                },
                {
                    "date": 1752444391934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -434,40 +434,32 @@\n           \r\n           // Create a custom animation that keeps icon and label synchronized\r\n           let animationFrame = 0;\r\n           const animationDuration = 1500; // 1.5 seconds\r\n+          const originalPosition = marker.getPosition();\r\n+          \r\n+          if (!originalPosition) return;\r\n+          \r\n           const animationInterval = setInterval(() => {\r\n             animationFrame += 50; // 50ms intervals\r\n             \r\n             if (animationFrame >= animationDuration) {\r\n               clearInterval(animationInterval);\r\n               // Reset to original position\r\n-              marker.setIcon({\r\n-                path: google.maps.SymbolPath.CIRCLE,\r\n-                scale: 12,\r\n-                fillColor: tripDays.find(d => d.day === selectedDestination.day)?.color?.pin || '#6B7280',\r\n-                fillOpacity: 1,\r\n-                strokeColor: '#FFFFFF',\r\n-                strokeWeight: 2,\r\n-                anchor: new google.maps.Point(0, 0), // Reset anchor\r\n-              });\r\n+              marker.setPosition(originalPosition);\r\n               return;\r\n             }\r\n             \r\n             // Calculate bounce effect (sine wave for smooth animation)\r\n-            const bounceHeight = Math.abs(Math.sin(animationFrame / 150)) * 15;\r\n-            const dayColor = tripDays.find(d => d.day === selectedDestination.day)?.color;\r\n+            const bounceHeight = Math.abs(Math.sin(animationFrame / 150)) * 0.0001; // Small lat/lng offset\r\n             \r\n-            // Update marker icon with vertical offset to simulate bounce\r\n-            marker.setIcon({\r\n-              path: google.maps.SymbolPath.CIRCLE,\r\n-              scale: 12,\r\n-              fillColor: dayColor?.pin || '#6B7280',\r\n-              fillOpacity: 1,\r\n-              strokeColor: '#FFFFFF',\r\n-              strokeWeight: 2,\r\n-              anchor: new google.maps.Point(0, -bounceHeight), // Move both icon and label\r\n-            });\r\n+            // Move the entire marker (icon + label) slightly up and down\r\n+            const newPosition = new google.maps.LatLng(\r\n+              originalPosition.lat() + bounceHeight,\r\n+              originalPosition.lng()\r\n+            );\r\n+            \r\n+            marker.setPosition(newPosition);\r\n           }, 50);\r\n           \r\n           // Center map on selected destination\r\n           map?.panTo(position);\r\n"
                },
                {
                    "date": 1752444467426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,13 +313,13 @@\n \r\n     // Use Places API first, then fall back to reverse geocoding\r\n     const placesService = new google.maps.places.PlacesService(map!);\r\n     \r\n-    // Try to find nearby places first\r\n+    // Try to find nearby places first with a larger radius\r\n     placesService.nearbySearch(\r\n       {\r\n         location: { lat, lng },\r\n-        radius: 50, // 50 meters\r\n+        radius: 100, // Increased to 100 meters\r\n         type: 'establishment' as any, // Cast to any to avoid TypeScript issues\r\n       },\r\n       (results, status) => {\r\n         if (status === google.maps.places.PlacesServiceStatus.OK && results && results[0]) {\r\n@@ -347,63 +347,105 @@\n \r\n           addDebugInfo(`Creating destination with business name: ${locationName}`);\r\n           onDestinationAdd(newDestination);\r\n         } else {\r\n-          // Fall back to reverse geocoding\r\n-          addDebugInfo('No business found, falling back to reverse geocoding');\r\n+          // Try findPlaceFromQuery as a second attempt\r\n+          addDebugInfo('No nearby business found, trying findPlaceFromQuery');\r\n+          \r\n           const geocoder = new google.maps.Geocoder();\r\n-          geocoder.geocode({ location: { lat, lng } }, (results, status) => {\r\n-            if (status === 'OK' && results?.[0]) {\r\n-              const address = results[0].formatted_address;\r\n+          geocoder.geocode({ location: { lat, lng } }, (geocodeResults, geocodeStatus) => {\r\n+            if (geocodeStatus === 'OK' && geocodeResults?.[0]) {\r\n+              const address = geocodeResults[0].formatted_address;\r\n               \r\n-              // Try to extract a meaningful name from the address components\r\n-              let locationName = address;\r\n-              const components = results[0].address_components;\r\n+              // Try to search for a place using the address\r\n+              const request = {\r\n+                query: address,\r\n+                fields: ['name', 'formatted_address', 'place_id', 'geometry'],\r\n+                locationBias: new google.maps.Circle({\r\n+                  center: { lat, lng },\r\n+                  radius: 100\r\n+                })\r\n+              };\r\n               \r\n-              if (components && components.length > 0) {\r\n-                // Look for business name, route name, or neighborhood\r\n-                const businessComponent = components.find(c => \r\n-                  c.types.includes('establishment') || \r\n-                  c.types.includes('point_of_interest') ||\r\n-                  c.types.includes('premise')\r\n-                );\r\n-                \r\n-                if (businessComponent) {\r\n-                  locationName = businessComponent.long_name;\r\n+              placesService.findPlaceFromQuery(request, (queryResults, queryStatus) => {\r\n+                if (queryStatus === google.maps.places.PlacesServiceStatus.OK && queryResults && queryResults[0]) {\r\n+                  const place = queryResults[0];\r\n+                  const locationName = place.name || 'Unknown Place';\r\n+                  const placeAddress = place.formatted_address || address;\r\n+                  \r\n+                  addDebugInfo(`Found place from query: ${locationName} at ${placeAddress}`);\r\n+                  \r\n+                  // Create new destination object\r\n+                  const selectedDayData = tripDays.find(d => d.day === selectedDay);\r\n+                  const newDestination: Destination = {\r\n+                    id: '', // Will be set by server\r\n+                    tripId: trip.id,\r\n+                    locationName, // Use the business name from Places API\r\n+                    address: placeAddress,\r\n+                    lat,\r\n+                    lng,\r\n+                    day: selectedDay,\r\n+                    orderIndex: (selectedDayData?.destinations.length || 0) + 1,\r\n+                    createdAt: new Date(),\r\n+                    updatedAt: new Date(),\r\n+                  };\r\n+\r\n+                  addDebugInfo(`Creating destination with query result: ${locationName}`);\r\n+                  onDestinationAdd(newDestination);\r\n                 } else {\r\n-                  // Use street number + route if available\r\n-                  const streetNumber = components.find(c => c.types.includes('street_number'))?.long_name;\r\n-                  const route = components.find(c => c.types.includes('route'))?.long_name;\r\n+                  // Fall back to reverse geocoding with improved name extraction\r\n+                  addDebugInfo('No place found from query, falling back to reverse geocoding');\r\n                   \r\n-                  if (streetNumber && route) {\r\n-                    locationName = `${streetNumber} ${route}`;\r\n-                  } else if (route) {\r\n-                    locationName = route;\r\n-                  } else {\r\n-                    // Use first component as fallback\r\n-                    locationName = components[0].long_name;\r\n+                  // Try to extract a meaningful name from the address components\r\n+                  let locationName = address;\r\n+                  const components = geocodeResults[0].address_components;\r\n+                  \r\n+                  if (components && components.length > 0) {\r\n+                    // Look for business name, route name, or neighborhood\r\n+                    const businessComponent = components.find(c => \r\n+                      c.types.includes('establishment') || \r\n+                      c.types.includes('point_of_interest') ||\r\n+                      c.types.includes('premise')\r\n+                    );\r\n+                    \r\n+                    if (businessComponent) {\r\n+                      locationName = businessComponent.long_name;\r\n+                    } else {\r\n+                      // Use street number + route if available\r\n+                      const streetNumber = components.find(c => c.types.includes('street_number'))?.long_name;\r\n+                      const route = components.find(c => c.types.includes('route'))?.long_name;\r\n+                      \r\n+                      if (streetNumber && route) {\r\n+                        locationName = `${streetNumber} ${route}`;\r\n+                      } else if (route) {\r\n+                        locationName = route;\r\n+                      } else {\r\n+                        // Use first component as fallback\r\n+                        locationName = components[0].long_name;\r\n+                      }\r\n+                    }\r\n                   }\r\n-                }\r\n-              }\r\n \r\n-              addDebugInfo(`Using geocoded name: ${locationName}`);\r\n+                  addDebugInfo(`Using geocoded name: ${locationName}`);\r\n \r\n-              // Create new destination object\r\n-              const selectedDayData = tripDays.find(d => d.day === selectedDay);\r\n-              const newDestination: Destination = {\r\n-                id: '', // Will be set by server\r\n-                tripId: trip.id,\r\n-                locationName,\r\n-                address,\r\n-                lat,\r\n-                lng,\r\n-                day: selectedDay,\r\n-                orderIndex: (selectedDayData?.destinations.length || 0) + 1,\r\n-                createdAt: new Date(),\r\n-                updatedAt: new Date(),\r\n-              };\r\n+                  // Create new destination object\r\n+                  const selectedDayData = tripDays.find(d => d.day === selectedDay);\r\n+                  const newDestination: Destination = {\r\n+                    id: '', // Will be set by server\r\n+                    tripId: trip.id,\r\n+                    locationName,\r\n+                    address,\r\n+                    lat,\r\n+                    lng,\r\n+                    day: selectedDay,\r\n+                    orderIndex: (selectedDayData?.destinations.length || 0) + 1,\r\n+                    createdAt: new Date(),\r\n+                    updatedAt: new Date(),\r\n+                  };\r\n \r\n-              onDestinationAdd(newDestination);\r\n+                  onDestinationAdd(newDestination);\r\n+                }\r\n+              });\r\n             }\r\n           });\r\n         }\r\n       }\r\n"
                },
                {
                    "date": 1752479642525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,46 +214,57 @@\n       // Create completely new markers array\r\n       const newMarkers: google.maps.Marker[] = [];\r\n       const bounds = new google.maps.LatLngBounds();\r\n \r\n-      // Sort destinations by day and order index to ensure proper numbering\r\n-      const sortedDestinations = [...destinations].sort((a, b) => {\r\n-        if (a.day !== b.day) return a.day - b.day;\r\n-        return (a.orderIndex || 0) - (b.orderIndex || 0);\r\n-      });\r\n+          // Sort destinations by day and order index to ensure proper numbering\r\n+    const sortedDestinations = [...destinations].sort((a, b) => {\r\n+      if (a.day !== b.day) return a.day - b.day;\r\n+      return (a.orderIndex || 0) - (b.orderIndex || 0);\r\n+    });\r\n \r\n-      addDebugInfo(`Creating markers for ${sortedDestinations.length} sorted destinations`);\r\n+    addDebugInfo(`Creating markers for ${sortedDestinations.length} sorted destinations`);\r\n \r\n-      sortedDestinations.forEach((destination, index) => {\r\n-        const dayColor = tripDays.find(d => d.day === destination.day)?.color;\r\n-        \r\n-        // Create completely new marker instance\r\n-        const marker = new google.maps.Marker({\r\n-          position: { lat: destination.lat, lng: destination.lng },\r\n-          map: map,\r\n-          title: destination.locationName,\r\n-          icon: {\r\n-            path: google.maps.SymbolPath.CIRCLE,\r\n-            scale: 12,\r\n-            fillColor: dayColor?.pin || '#6B7280',\r\n-            fillOpacity: 1,\r\n-            strokeColor: '#FFFFFF',\r\n-            strokeWeight: 2,\r\n-          },\r\n-          label: {\r\n-            text: destination.orderIndex?.toString() || (index + 1).toString(),\r\n-            color: '#FFFFFF',\r\n-            fontSize: '12px',\r\n-            fontWeight: 'bold',\r\n-          },\r\n-          // Ensure no animations interfere during creation\r\n-          animation: null,\r\n-          // Force marker to be draggable: false to prevent conflicts\r\n-          draggable: false,\r\n-        });\r\n+    // Create a map of day -> sequential pin numbers\r\n+    const dayCounters = new Map<number, number>();\r\n+    sortedDestinations.forEach(destination => {\r\n+      const dayCount = dayCounters.get(destination.day) || 0;\r\n+      dayCounters.set(destination.day, dayCount + 1);\r\n+    });\r\n \r\n-        addDebugInfo(`Created marker ${destination.orderIndex} for ${destination.locationName} on day ${destination.day}`);\r\n+    sortedDestinations.forEach((destination, index) => {\r\n+      const dayColor = tripDays.find(d => d.day === destination.day)?.color;\r\n+      \r\n+      // Calculate proper sequential pin number within the day\r\n+      const destinationsInDay = sortedDestinations.filter(d => d.day === destination.day);\r\n+      const pinNumber = destinationsInDay.findIndex(d => d.id === destination.id) + 1;\r\n+      \r\n+      // Create completely new marker instance\r\n+      const marker = new google.maps.Marker({\r\n+        position: { lat: destination.lat, lng: destination.lng },\r\n+        map: map,\r\n+        title: destination.locationName,\r\n+        icon: {\r\n+          path: google.maps.SymbolPath.CIRCLE,\r\n+          scale: 12,\r\n+          fillColor: dayColor?.pin || '#6B7280',\r\n+          fillOpacity: 1,\r\n+          strokeColor: '#FFFFFF',\r\n+          strokeWeight: 2,\r\n+        },\r\n+        label: {\r\n+          text: pinNumber.toString(),\r\n+          color: '#FFFFFF',\r\n+          fontSize: '12px',\r\n+          fontWeight: 'bold',\r\n+        },\r\n+        // Ensure no animations interfere during creation\r\n+        animation: null,\r\n+        // Force marker to be draggable: false to prevent conflicts\r\n+        draggable: false,\r\n+      });\r\n \r\n+      addDebugInfo(`Created marker ${pinNumber} for ${destination.locationName} on day ${destination.day} (orderIndex: ${destination.orderIndex})`);\r\n+\r\n         // Add click listener\r\n         marker.addListener('click', () => {\r\n           onDestinationSelect(destination);\r\n         });\r\n"
                },
                {
                    "date": 1752479710697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,18 +268,35 @@\n         marker.addListener('click', () => {\r\n           onDestinationSelect(destination);\r\n         });\r\n \r\n-        // Create info window\r\n+        // Create info window with photos\r\n         const infoWindow = new google.maps.InfoWindow({\r\n           content: `\r\n-            <div style=\"padding: 12px; max-width: 250px;\">\r\n+            <div style=\"padding: 12px; max-width: 300px;\">\r\n+              ${destination.photos && destination.photos.length > 0 ? `\r\n+                <div style=\"margin-bottom: 8px;\">\r\n+                  <img \r\n+                    src=\"${destination.photos[0]}\" \r\n+                    alt=\"${destination.locationName}\"\r\n+                    style=\"width: 100%; height: 120px; object-fit: cover; border-radius: 8px;\"\r\n+                    onerror=\"this.style.display='none'\"\r\n+                  />\r\n+                </div>\r\n+              ` : ''}\r\n               <h3 style=\"font-weight: 600; color: #1F2937; margin-bottom: 4px;\">${destination.locationName}</h3>\r\n               <p style=\"font-size: 14px; color: #6B7280; margin-bottom: 8px;\">${destination.address}</p>\r\n-              <div style=\"display: flex; align-items: center; justify-content: space-between; font-size: 12px; color: #9CA3AF;\">\r\n+              <div style=\"display: flex; align-items: center; justify-content: space-between; font-size: 12px; color: #9CA3AF; margin-bottom: 8px;\">\r\n                 <span>Day ${destination.day}</span>\r\n                 ${destination.startTime ? `<span>${destination.startTime}</span>` : ''}\r\n               </div>\r\n+              ${destination.rating ? `\r\n+                <div style=\"display: flex; align-items: center; margin-bottom: 8px;\">\r\n+                  <span style=\"color: #F59E0B; font-size: 14px;\">★</span>\r\n+                  <span style=\"font-size: 12px; color: #6B7280; margin-left: 4px;\">${destination.rating}</span>\r\n+                  ${destination.category ? `<span style=\"font-size: 12px; color: #9CA3AF; margin-left: 8px;\">${destination.category}</span>` : ''}\r\n+                </div>\r\n+              ` : ''}\r\n               ${destination.notes ? `<p style=\"font-size: 14px; color: #374151; margin-top: 8px;\">${destination.notes}</p>` : ''}\r\n             </div>\r\n           `,\r\n         });\r\n"
                },
                {
                    "date": 1752479794672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -560,10 +560,10 @@\n     <div className=\"h-full relative\">\r\n       {/* Map Container - Always rendered */}\r\n       <div \r\n         ref={mapRef}\r\n-        className=\"w-full bg-gray-100 rounded-lg\"\r\n-        style={{ height: '600px', minHeight: '400px' }}\r\n+        className=\"w-full h-full bg-gray-100 rounded-lg\"\r\n+        style={{ minHeight: '400px' }}\r\n       />\r\n       \r\n       {/* Loading Overlay */}\r\n       {isLoading && (\r\n"
                },
                {
                    "date": 1752480054802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,14 +242,15 @@\n         position: { lat: destination.lat, lng: destination.lng },\r\n         map: map,\r\n         title: destination.locationName,\r\n         icon: {\r\n-          path: google.maps.SymbolPath.CIRCLE,\r\n-          scale: 12,\r\n+          path: 'M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7z',\r\n           fillColor: dayColor?.pin || '#6B7280',\r\n           fillOpacity: 1,\r\n           strokeColor: '#FFFFFF',\r\n           strokeWeight: 2,\r\n+          scale: 1.5,\r\n+          anchor: new google.maps.Point(12, 22),\r\n         },\r\n         label: {\r\n           text: pinNumber.toString(),\r\n           color: '#FFFFFF',\r\n"
                },
                {
                    "date": 1752480070008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,8 +255,9 @@\n           text: pinNumber.toString(),\r\n           color: '#FFFFFF',\r\n           fontSize: '12px',\r\n           fontWeight: 'bold',\r\n+          labelOrigin: new google.maps.Point(12, 9),\r\n         },\r\n         // Ensure no animations interfere during creation\r\n         animation: null,\r\n         // Force marker to be draggable: false to prevent conflicts\r\n"
                },
                {
                    "date": 1752480081869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,15 +249,15 @@\n           strokeColor: '#FFFFFF',\r\n           strokeWeight: 2,\r\n           scale: 1.5,\r\n           anchor: new google.maps.Point(12, 22),\r\n+          labelOrigin: new google.maps.Point(12, 9),\r\n         },\r\n         label: {\r\n           text: pinNumber.toString(),\r\n           color: '#FFFFFF',\r\n           fontSize: '12px',\r\n           fontWeight: 'bold',\r\n-          labelOrigin: new google.maps.Point(12, 9),\r\n         },\r\n         // Ensure no animations interfere during creation\r\n         animation: null,\r\n         // Force marker to be draggable: false to prevent conflicts\r\n"
                },
                {
                    "date": 1752481013584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n   const [error, setError] = useState<string | null>(null);\r\n   const [debugInfo, setDebugInfo] = useState<string[]>([]);\r\n   const [mapInitialized, setMapInitialized] = useState(false);\r\n   const [isMounted, setIsMounted] = useState(false);\r\n+  const [isClickToAddEnabled, setIsClickToAddEnabled] = useState(false);\r\n \r\n   // Debug function\r\n   const addDebugInfo = (info: string) => {\r\n     const timestamp = new Date().toLocaleTimeString();\r\n"
                },
                {
                    "date": 1752481023162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,9 +336,9 @@\n   }, [map, destinations, tripDays, onDestinationSelect, isLoading]);\r\n \r\n   // Handle map click to add new destination\r\n   const handleMapClick = (event: google.maps.MapMouseEvent) => {\r\n-    if (!event.latLng || isAddingDestination) return;\r\n+    if (!event.latLng || isAddingDestination || !isClickToAddEnabled) return;\r\n \r\n     const lat = event.latLng.lat();\r\n     const lng = event.latLng.lng();\r\n \r\n"
                },
                {
                    "date": 1752481039376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -636,22 +636,39 @@\n       )}\r\n       \r\n       {/* Map Controls */}\r\n       {!isLoading && !error && (\r\n-        <div className=\"absolute top-4 left-4 bg-white rounded-lg shadow-md p-2\">\r\n-          <div className=\"flex items-center space-x-2 text-sm\">\r\n-            <span className=\"text-gray-600\">Day {selectedDay}</span>\r\n-            <div \r\n-              className=\"w-4 h-4 rounded-full\"\r\n-              style={{ backgroundColor: tripDays.find(d => d.day === selectedDay)?.color.pin }}\r\n-            />\r\n+        <div className=\"absolute top-4 left-4 bg-white rounded-lg shadow-md p-3\">\r\n+          <div className=\"flex items-center space-x-3 text-sm\">\r\n+            <div className=\"flex items-center space-x-2\">\r\n+              <span className=\"text-gray-600\">Day {selectedDay}</span>\r\n+              <div \r\n+                className=\"w-4 h-4 rounded-full\"\r\n+                style={{ backgroundColor: tripDays.find(d => d.day === selectedDay)?.color.pin }}\r\n+              />\r\n+            </div>\r\n+            \r\n             {isAddingDestination ? (\r\n               <div className=\"flex items-center space-x-2\">\r\n                 <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary-600\"></div>\r\n                 <span className=\"text-gray-600\">Adding destination...</span>\r\n               </div>\r\n             ) : (\r\n-              <span className=\"text-gray-600\">Click to add destination</span>\r\n+              <div className=\"flex items-center space-x-2\">\r\n+                <button\r\n+                  onClick={() => setIsClickToAddEnabled(!isClickToAddEnabled)}\r\n+                  className={`px-3 py-1 rounded-lg text-xs font-medium transition-colors ${\r\n+                    isClickToAddEnabled \r\n+                      ? 'bg-primary-600 text-white hover:bg-primary-700' \r\n+                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\r\n+                  }`}\r\n+                >\r\n+                  {isClickToAddEnabled ? 'Click to Add ON' : 'Click to Add OFF'}\r\n+                </button>\r\n+                <span className=\"text-gray-500 text-xs\">\r\n+                  {isClickToAddEnabled ? 'Click map to add destination' : 'Enable to add destinations by clicking'}\r\n+                </span>\r\n+              </div>\r\n             )}\r\n           </div>\r\n         </div>\r\n       )}\r\n"
                },
                {
                    "date": 1752481046705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -548,9 +548,9 @@\n     const listener = map.addListener('click', handleMapClick);\r\n     return () => {\r\n       google.maps.event.removeListener(listener);\r\n     };\r\n-  }, [map, selectedDay, trip.id, tripDays, onDestinationAdd, isAddingDestination]);\r\n+  }, [map, selectedDay, trip.id, tripDays, onDestinationAdd, isAddingDestination, isClickToAddEnabled]);\r\n \r\n   const handleRetry = () => {\r\n     addDebugInfo('Retry button clicked');\r\n     setMapInitialized(false);\r\n"
                },
                {
                    "date": 1752488980333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -563,15 +563,15 @@\n     <div className=\"h-full relative\">\r\n       {/* Map Container - Always rendered */}\r\n       <div \r\n         ref={mapRef}\r\n-        className=\"w-full h-full bg-gray-100 rounded-lg\"\r\n+        className=\"w-full h-full bg-gray-100\"\r\n         style={{ minHeight: '400px' }}\r\n       />\r\n       \r\n       {/* Loading Overlay */}\r\n       {isLoading && (\r\n-        <div className=\"absolute inset-0 flex flex-col items-center justify-center bg-gray-50 bg-opacity-95 rounded-lg\">\r\n+        <div className=\"absolute inset-0 flex flex-col items-center justify-center bg-gray-50 bg-opacity-95\">\r\n           <div className=\"text-center mb-4\">\r\n             <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-2\"></div>\r\n             <p className=\"text-sm text-gray-600\">Loading map...</p>\r\n           </div>\r\n"
                },
                {
                    "date": 1752488990375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -595,9 +595,9 @@\n       )}\r\n \r\n       {/* Error Overlay */}\r\n       {error && (\r\n-        <div className=\"absolute inset-0 flex items-center justify-center bg-gray-50 bg-opacity-95 rounded-lg\">\r\n+        <div className=\"absolute inset-0 flex items-center justify-center bg-gray-50 bg-opacity-95\">\r\n           <div className=\"text-center max-w-md\">\r\n             <div className=\"text-red-500 mb-4\">\r\n               <svg className=\"w-12 h-12 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                 <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n"
                },
                {
                    "date": 1752499505586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,13 +133,17 @@\n         } else {\r\n           addDebugInfo('Google Maps already loaded');\r\n         }\r\n \r\n+        // Get trip location coordinates\r\n+        addDebugInfo(`Getting coordinates for trip location: \"${trip.location}\"`);\r\n+        const tripCenter = await geocodeTripLocation(trip.location);\r\n+        \r\n         // Create map instance\r\n-        addDebugInfo('Creating map instance...');\r\n+        addDebugInfo(`Creating map instance centered on: ${tripCenter.lat}, ${tripCenter.lng}`);\r\n         const mapInstance = new google.maps.Map(container, {\r\n-          center: { lat: 40.7128, lng: -74.0060 },\r\n-          zoom: 10,\r\n+          center: tripCenter,\r\n+          zoom: tripCenter.zoom || 10,\r\n           disableDefaultUI: false,\r\n           zoomControl: true,\r\n           streetViewControl: true,\r\n           fullscreenControl: true,\r\n"
                },
                {
                    "date": 1752499524697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,67 @@\n       setIsMounted(false);\r\n     };\r\n   }, []);\r\n \r\n+  // Geocode trip location to get coordinates\r\n+  const geocodeTripLocation = async (location: string): Promise<{ lat: number; lng: number; zoom?: number }> => {\r\n+    const defaultCenter = { lat: 40.7128, lng: -74.0060, zoom: 10 }; // NYC fallback\r\n+    \r\n+    if (!location || !location.trim()) {\r\n+      addDebugInfo('No location provided, using default center (NYC)');\r\n+      return defaultCenter;\r\n+    }\r\n+\r\n+    try {\r\n+      addDebugInfo(`Geocoding location: \"${location}\"`);\r\n+      \r\n+      const geocoder = new google.maps.Geocoder();\r\n+      const result = await new Promise<google.maps.GeocoderResult[]>((resolve, reject) => {\r\n+        geocoder.geocode({ address: location }, (results, status) => {\r\n+          if (status === google.maps.GeocoderStatus.OK && results) {\r\n+            resolve(results);\r\n+          } else {\r\n+            reject(new Error(`Geocoding failed: ${status}`));\r\n+          }\r\n+        });\r\n+      });\r\n+\r\n+      if (result && result[0]) {\r\n+        const coords = result[0].geometry.location;\r\n+        const addressComponents = result[0].address_components;\r\n+        \r\n+        // Determine zoom level based on location type\r\n+        let zoom = 10; // Default city zoom\r\n+        \r\n+        // Check if it's a country (lower zoom) or city (higher zoom)\r\n+        const hasCountry = addressComponents.some(comp => comp.types.includes('country'));\r\n+        const hasCity = addressComponents.some(comp => \r\n+          comp.types.includes('locality') || comp.types.includes('administrative_area_level_1')\r\n+        );\r\n+        \r\n+        if (hasCountry && !hasCity) {\r\n+          zoom = 5; // Country level\r\n+        } else if (hasCity) {\r\n+          zoom = 11; // City level\r\n+        }\r\n+\r\n+        const center = {\r\n+          lat: coords.lat(),\r\n+          lng: coords.lng(),\r\n+          zoom: zoom\r\n+        };\r\n+\r\n+        addDebugInfo(`✅ Geocoded \"${location}\" to: ${center.lat}, ${center.lng} (zoom: ${center.zoom})`);\r\n+        return center;\r\n+      }\r\n+    } catch (error) {\r\n+      addDebugInfo(`❌ Geocoding failed for \"${location}\": ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n+    }\r\n+\r\n+    addDebugInfo('Falling back to default center (NYC)');\r\n+    return defaultCenter;\r\n+  };\r\n+\r\n   // Initialize Google Maps\r\n   useEffect(() => {\r\n     if (!isMounted) {\r\n       addDebugInfo('Component not mounted yet, waiting...');\r\n"
                },
                {
                    "date": 1752499534768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,9 +192,9 @@\n         } else {\r\n           addDebugInfo('Google Maps already loaded');\r\n         }\r\n \r\n-        // Get trip location coordinates\r\n+        // Get trip location coordinates (after Google Maps is loaded)\r\n         addDebugInfo(`Getting coordinates for trip location: \"${trip.location}\"`);\r\n         const tripCenter = await geocodeTripLocation(trip.location);\r\n         \r\n         // Create map instance\r\n"
                },
                {
                    "date": 1752499554675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,14 @@\n       addDebugInfo('No location provided, using default center (NYC)');\r\n       return defaultCenter;\r\n     }\r\n \r\n+    // Check if Google Maps is loaded\r\n+    if (!window.google?.maps?.Geocoder) {\r\n+      addDebugInfo('Google Maps Geocoder not available, using default center (NYC)');\r\n+      return defaultCenter;\r\n+    }\r\n+\r\n     try {\r\n       addDebugInfo(`Geocoding location: \"${location}\"`);\r\n       \r\n       const geocoder = new google.maps.Geocoder();\r\n"
                },
                {
                    "date": 1752581138890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -724,17 +724,17 @@\n             ) : (\r\n               <div className=\"flex items-center space-x-2\">\r\n                 <button\r\n                   onClick={() => setIsClickToAddEnabled(!isClickToAddEnabled)}\r\n-                  className={`px-3 py-1 rounded-lg text-xs font-medium transition-colors ${\r\n+                  className={`px-2 py-0.5 rounded-md text-xs font-normal transition-colors ${\r\n                     isClickToAddEnabled \r\n                       ? 'bg-primary-600 text-white hover:bg-primary-700' \r\n                       : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\r\n                   }`}\r\n                 >\r\n                   {isClickToAddEnabled ? 'Click to Add ON' : 'Click to Add OFF'}\r\n                 </button>\r\n-                <span className=\"text-gray-500 text-xs\">\r\n+                <span className=\"text-gray-500 text-xs ml-1\">\r\n                   {isClickToAddEnabled ? 'Click map to add destination' : 'Enable to add destinations by clicking'}\r\n                 </span>\r\n               </div>\r\n             )}\r\n"
                },
                {
                    "date": 1752581972542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -730,13 +730,15 @@\n                       ? 'bg-primary-600 text-white hover:bg-primary-700' \r\n                       : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\r\n                   }`}\r\n                 >\r\n-                  {isClickToAddEnabled ? 'Click to Add ON' : 'Click to Add OFF'}\r\n+                  {isClickToAddEnabled ? 'Disable Manual Add via Map Click' : 'Enable Manual Add via Map Click'}\r\n                 </button>\r\n-                <span className=\"text-gray-500 text-xs ml-1\">\r\n-                  {isClickToAddEnabled ? 'Click map to add destination' : 'Enable to add destinations by clicking'}\r\n-                </span>\r\n+                {isClickToAddEnabled && (\r\n+                  <span className=\"text-gray-400 text-xs ml-1\">\r\n+                    Click the map to add a location to your itinerary\r\n+                  </span>\r\n+                )}\r\n               </div>\r\n             )}\r\n           </div>\r\n         </div>\r\n"
                }
            ],
            "date": 1752433617930,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { Loader } from '@googlemaps/js-api-loader';\r\nimport { Trip, Destination, TripDay } from '@/types';\r\n\r\ninterface TripMapProps {\r\n  trip: Trip;\r\n  destinations: Destination[];\r\n  tripDays: TripDay[];\r\n  selectedDestination: Destination | null;\r\n  selectedDay: number;\r\n  onDestinationSelect: (destination: Destination) => void;\r\n  onDestinationAdd: (destination: Destination) => void;\r\n}\r\n\r\nexport default function TripMap({\r\n  trip,\r\n  destinations,\r\n  tripDays,\r\n  selectedDestination,\r\n  selectedDay,\r\n  onDestinationSelect,\r\n  onDestinationAdd,\r\n}: TripMapProps) {\r\n  const mapRef = useRef<HTMLDivElement>(null);\r\n  const [map, setMap] = useState<google.maps.Map | null>(null);\r\n  const [markers, setMarkers] = useState<google.maps.Marker[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Initialize Google Maps\r\n  useEffect(() => {\r\n    const initMap = async () => {\r\n      try {\r\n        const loader = new Loader({\r\n          apiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY!,\r\n          version: 'weekly',\r\n          libraries: ['places'],\r\n        });\r\n\r\n        const { Map } = await loader.importLibrary('maps');\r\n        const { AdvancedMarkerElement } = await loader.importLibrary('marker');\r\n\r\n        if (!mapRef.current) return;\r\n\r\n        // Default center (can be improved by geocoding trip.location)\r\n        const defaultCenter = { lat: 40.7128, lng: -74.0060 }; // NYC as fallback\r\n\r\n        // Create map\r\n        const mapInstance = new Map(mapRef.current, {\r\n          center: defaultCenter,\r\n          zoom: 10,\r\n          mapId: process.env.NEXT_PUBLIC_GOOGLE_MAPS_MAP_ID || 'DEMO_MAP_ID',\r\n        });\r\n\r\n        setMap(mapInstance);\r\n        setIsLoading(false);\r\n      } catch (err) {\r\n        console.error('Error initializing map:', err);\r\n        setError('Failed to load map');\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    initMap();\r\n  }, []);\r\n\r\n  // Update markers when destinations change\r\n  useEffect(() => {\r\n    if (!map || !destinations.length) return;\r\n\r\n    // Clear existing markers\r\n    markers.forEach(marker => marker.setMap(null));\r\n\r\n    // Create new markers\r\n    const newMarkers: google.maps.Marker[] = [];\r\n    const bounds = new google.maps.LatLngBounds();\r\n\r\n    destinations.forEach((destination, index) => {\r\n      const dayColor = tripDays.find(d => d.day === destination.day)?.color;\r\n      \r\n      // Create marker\r\n      const marker = new google.maps.Marker({\r\n        position: { lat: destination.lat, lng: destination.lng },\r\n        map: map,\r\n        title: destination.locationName,\r\n        icon: {\r\n          path: google.maps.SymbolPath.CIRCLE,\r\n          scale: 10,\r\n          fillColor: dayColor?.pin || '#6B7280',\r\n          fillOpacity: 1,\r\n          strokeColor: '#FFFFFF',\r\n          strokeWeight: 2,\r\n        },\r\n        label: {\r\n          text: destination.orderIndex.toString(),\r\n          color: '#FFFFFF',\r\n          fontSize: '12px',\r\n          fontWeight: 'bold',\r\n        },\r\n      });\r\n\r\n      // Add click listener\r\n      marker.addListener('click', () => {\r\n        onDestinationSelect(destination);\r\n      });\r\n\r\n      // Create info window\r\n      const infoWindow = new google.maps.InfoWindow({\r\n        content: `\r\n          <div class=\"p-3 max-w-sm\">\r\n            <h3 class=\"font-semibold text-gray-900 mb-1\">${destination.locationName}</h3>\r\n            <p class=\"text-sm text-gray-600 mb-2\">${destination.address}</p>\r\n            <div class=\"flex items-center justify-between text-xs text-gray-500\">\r\n              <span>Day ${destination.day}</span>\r\n              ${destination.startTime ? `<span>${destination.startTime}</span>` : ''}\r\n            </div>\r\n            ${destination.notes ? `<p class=\"text-sm text-gray-700 mt-2\">${destination.notes}</p>` : ''}\r\n          </div>\r\n        `,\r\n      });\r\n\r\n      // Show info window on marker click\r\n      marker.addListener('click', () => {\r\n        infoWindow.open(map, marker);\r\n      });\r\n\r\n      newMarkers.push(marker);\r\n      bounds.extend(marker.getPosition()!);\r\n    });\r\n\r\n    setMarkers(newMarkers);\r\n\r\n    // Fit map to show all markers\r\n    if (newMarkers.length > 0) {\r\n      map.fitBounds(bounds);\r\n      \r\n      // Prevent over-zooming for single marker\r\n      if (newMarkers.length === 1) {\r\n        map.setZoom(Math.min(map.getZoom() || 15, 15));\r\n      }\r\n    }\r\n  }, [map, destinations, tripDays, onDestinationSelect]);\r\n\r\n  // Highlight selected destination\r\n  useEffect(() => {\r\n    if (!selectedDestination || !markers.length) return;\r\n\r\n    markers.forEach(marker => {\r\n      const position = marker.getPosition();\r\n      if (\r\n        position &&\r\n        position.lat() === selectedDestination.lat &&\r\n        position.lng() === selectedDestination.lng\r\n      ) {\r\n        // Highlight selected marker\r\n        marker.setAnimation(google.maps.Animation.BOUNCE);\r\n        setTimeout(() => {\r\n          marker.setAnimation(null);\r\n        }, 1500);\r\n        \r\n        // Center map on selected destination\r\n        map?.panTo(position);\r\n      }\r\n    });\r\n  }, [selectedDestination, markers, map]);\r\n\r\n  // Handle map click to add new destination\r\n  const handleMapClick = (event: google.maps.MapMouseEvent) => {\r\n    if (!event.latLng) return;\r\n\r\n    const lat = event.latLng.lat();\r\n    const lng = event.latLng.lng();\r\n\r\n    // Use reverse geocoding to get address\r\n    const geocoder = new google.maps.Geocoder();\r\n    geocoder.geocode({ location: { lat, lng } }, (results, status) => {\r\n      if (status === 'OK' && results?.[0]) {\r\n        const address = results[0].formatted_address;\r\n        const locationName = results[0].name || address;\r\n\r\n        // Create new destination object\r\n        const newDestination: Destination = {\r\n          id: '', // Will be set by server\r\n          tripId: trip.id,\r\n          locationName,\r\n          address,\r\n          lat,\r\n          lng,\r\n          day: selectedDay,\r\n          orderIndex: tripDays.find(d => d.day === selectedDay)?.destinations.length + 1 || 1,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n        };\r\n\r\n        onDestinationAdd(newDestination);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Add click listener to map\r\n  useEffect(() => {\r\n    if (!map) return;\r\n\r\n    const listener = map.addListener('click', handleMapClick);\r\n    return () => {\r\n      google.maps.event.removeListener(listener);\r\n    };\r\n  }, [map, selectedDay, trip.id, tripDays, onDestinationAdd]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"h-full flex items-center justify-center bg-gray-50\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-2\"></div>\r\n          <p className=\"text-sm text-gray-600\">Loading map...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"h-full flex items-center justify-center bg-gray-50\">\r\n        <div className=\"text-center\">\r\n          <p className=\"text-red-600 mb-4\">{error}</p>\r\n          <button \r\n            onClick={() => window.location.reload()} \r\n            className=\"btn-primary\"\r\n          >\r\n            Retry\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-full relative\">\r\n      <div ref={mapRef} className=\"h-full w-full\" />\r\n      \r\n      {/* Map Controls */}\r\n      <div className=\"absolute top-4 left-4 bg-white rounded-lg shadow-md p-2\">\r\n        <div className=\"flex items-center space-x-2 text-sm\">\r\n          <span className=\"text-gray-600\">Day {selectedDay}</span>\r\n          <div \r\n            className=\"w-4 h-4 rounded-full\"\r\n            style={{ backgroundColor: tripDays.find(d => d.day === selectedDay)?.color.pin }}\r\n          />\r\n          <span className=\"text-gray-600\">Click to add destination</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Legend */}\r\n      <div className=\"absolute bottom-4 left-4 bg-white rounded-lg shadow-md p-3 max-w-xs\">\r\n        <h3 className=\"font-semibold text-gray-900 mb-2\">Trip Days</h3>\r\n        <div className=\"space-y-1\">\r\n          {tripDays.slice(0, 5).map((day) => (\r\n            <div key={day.day} className=\"flex items-center space-x-2 text-sm\">\r\n              <div \r\n                className=\"w-3 h-3 rounded-full\"\r\n                style={{ backgroundColor: day.color.pin }}\r\n              />\r\n              <span className=\"text-gray-700\">Day {day.day}</span>\r\n              <span className=\"text-gray-500\">({day.destinations.length} stops)</span>\r\n            </div>\r\n          ))}\r\n          {tripDays.length > 5 && (\r\n            <div className=\"text-xs text-gray-500\">+{tripDays.length - 5} more days</div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} "
        }
    ]
}