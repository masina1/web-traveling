{
    "sourceFile": "components/ui/CustomScrollbar.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752580672333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752580780002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,12 +82,12 @@\n       <div\r\n         style={{\r\n           position: 'absolute',\r\n           top: thumbTop,\r\n-          right: 2,\r\n-          width: 12,\r\n+          right: 1,\r\n+          width: 14,\r\n           height: thumbHeight,\r\n-          background: 'rgba(0,0,0,0.2)',\r\n+          background: 'rgba(0,0,0,0.28)',\r\n           borderRadius: 6,\r\n           cursor: 'pointer',\r\n           pointerEvents: 'auto',\r\n           transition: 'background 0.2s',\r\n"
                }
            ],
            "date": 1752580672333,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef, useState } from 'react';\r\n\r\ninterface CustomScrollbarProps {\r\n  containerRef: React.RefObject<HTMLElement | HTMLDivElement>;\r\n  height: number;\r\n  top?: number;\r\n  left?: number;\r\n}\r\n\r\nexport const CustomScrollbar: React.FC<CustomScrollbarProps> = ({ containerRef, height, top = 0, left }) => {\r\n  const [thumbHeight, setThumbHeight] = useState(40);\r\n  const [thumbTop, setThumbTop] = useState(0);\r\n  const [visible, setVisible] = useState(false);\r\n  const dragging = useRef(false);\r\n  const startY = useRef(0);\r\n  const startScroll = useRef(0);\r\n\r\n  // Calculate thumb size and position\r\n  useEffect(() => {\r\n    const container = containerRef.current;\r\n    if (!container) return;\r\n    const update = () => {\r\n      const { scrollHeight, clientHeight, scrollTop } = container;\r\n      if (scrollHeight <= clientHeight) {\r\n        setVisible(false);\r\n        return;\r\n      }\r\n      setVisible(true);\r\n      const ratio = clientHeight / scrollHeight;\r\n      setThumbHeight(Math.max(40, clientHeight * ratio));\r\n      setThumbTop((scrollTop / (scrollHeight - clientHeight)) * (clientHeight - Math.max(40, clientHeight * ratio)));\r\n    };\r\n    update();\r\n    container.addEventListener('scroll', update);\r\n    window.addEventListener('resize', update);\r\n    return () => {\r\n      container.removeEventListener('scroll', update);\r\n      window.removeEventListener('resize', update);\r\n    };\r\n  }, [containerRef, height]);\r\n\r\n  // Drag logic\r\n  const onThumbMouseDown = (e: React.MouseEvent) => {\r\n    e.preventDefault();\r\n    dragging.current = true;\r\n    startY.current = e.clientY;\r\n    startScroll.current = containerRef.current?.scrollTop || 0;\r\n    document.addEventListener('mousemove', onMouseMove);\r\n    document.addEventListener('mouseup', onMouseUp);\r\n  };\r\n  const onMouseMove = (e: MouseEvent) => {\r\n    if (!dragging.current || !containerRef.current) return;\r\n    const container = containerRef.current;\r\n    const { scrollHeight, clientHeight } = container;\r\n    const maxScroll = scrollHeight - clientHeight;\r\n    const maxThumbTop = clientHeight - thumbHeight;\r\n    const deltaY = e.clientY - startY.current;\r\n    const newThumbTop = Math.min(Math.max(thumbTop + deltaY, 0), maxThumbTop);\r\n    const newScrollTop = (newThumbTop / maxThumbTop) * maxScroll;\r\n    container.scrollTop = newScrollTop;\r\n  };\r\n  const onMouseUp = () => {\r\n    dragging.current = false;\r\n    document.removeEventListener('mousemove', onMouseMove);\r\n    document.removeEventListener('mouseup', onMouseUp);\r\n  };\r\n\r\n  if (!visible) return null;\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'fixed',\r\n        top,\r\n        right: 0,\r\n        height,\r\n        width: 16,\r\n        zIndex: 50,\r\n        pointerEvents: 'none',\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          top: thumbTop,\r\n          right: 2,\r\n          width: 12,\r\n          height: thumbHeight,\r\n          background: 'rgba(0,0,0,0.2)',\r\n          borderRadius: 6,\r\n          cursor: 'pointer',\r\n          pointerEvents: 'auto',\r\n          transition: 'background 0.2s',\r\n        }}\r\n        onMouseDown={onThumbMouseDown}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomScrollbar; "
        }
    ]
}