{
    "sourceFile": "app/api/places/autocomplete/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752473036135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752473178022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,86 +1,1 @@\n-import { NextRequest, NextResponse } from 'next/server';\r\n-\r\n-export async function POST(request: NextRequest) {\r\n-  try {\r\n-    const { input, types } = await request.json();\r\n-    \r\n-    if (!input || !input.trim()) {\r\n-      return NextResponse.json({ predictions: [] });\r\n-    }\r\n-\r\n-    const apiKey = process.env.NEXT_PUBLIC_GOOGLE_PLACES_API_KEY || process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\r\n-    \r\n-    if (!apiKey) {\r\n-      console.error('❌ Google Places API key not found');\r\n-      return NextResponse.json({ error: 'API key not configured' }, { status: 500 });\r\n-    }\r\n-\r\n-    // Use the new Places API Text Search endpoint\r\n-    const response = await fetch(\r\n-      `https://places.googleapis.com/v1/places:searchText`,\r\n-      {\r\n-        method: 'POST',\r\n-        headers: {\r\n-          'Content-Type': 'application/json',\r\n-          'X-Goog-Api-Key': apiKey,\r\n-          'X-Goog-FieldMask': 'places.displayName,places.formattedAddress,places.location,places.id,places.types,places.rating,places.priceLevel,places.photos'\r\n-        },\r\n-        body: JSON.stringify({\r\n-          textQuery: input,\r\n-          maxResultCount: 5,\r\n-          includedType: types?.[0] || 'establishment',\r\n-          locationBias: {\r\n-            rectangle: {\r\n-              low: {\r\n-                latitude: -90,\r\n-                longitude: -180\r\n-              },\r\n-              high: {\r\n-                latitude: 90,\r\n-                longitude: 180\r\n-              }\r\n-            }\r\n-          }\r\n-        })\r\n-      }\r\n-    );\r\n-\r\n-    if (!response.ok) {\r\n-      console.error('❌ Places API response error:', response.status, response.statusText);\r\n-      const errorText = await response.text();\r\n-      console.error('Error details:', errorText);\r\n-      return NextResponse.json({ error: 'Places API request failed' }, { status: response.status });\r\n-    }\r\n-\r\n-    const data = await response.json();\r\n-    \r\n-    // Transform the new API response to match the old autocomplete format\r\n-    const predictions = data.places?.map((place: any) => ({\r\n-      place_id: place.id,\r\n-      description: place.formattedAddress || place.displayName?.text || '',\r\n-      structured_formatting: {\r\n-        main_text: place.displayName?.text || '',\r\n-        secondary_text: place.formattedAddress || '',\r\n-      },\r\n-      types: place.types || [],\r\n-      geometry: {\r\n-        location: {\r\n-          lat: () => place.location?.latitude || 0,\r\n-          lng: () => place.location?.longitude || 0,\r\n-        }\r\n-      },\r\n-      rating: place.rating,\r\n-      price_level: place.priceLevel,\r\n-      photos: place.photos?.map((photo: any) => ({\r\n-        getUrl: (opts: any) => `https://places.googleapis.com/v1/${photo.name}/media?maxHeightPx=${opts.maxHeight || 400}&maxWidthPx=${opts.maxWidth || 400}&key=${apiKey}`\r\n-      })) || [],\r\n-    })) || [];\r\n-\r\n-    console.log('✅ New Places API success:', predictions.length, 'results');\r\n-    \r\n-    return NextResponse.json({ predictions });\r\n-  } catch (error) {\r\n-    console.error('❌ API route error:', error);\r\n-    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n-  }\r\n-} \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1752473036135,
            "name": "Commit-0",
            "content": "import { NextRequest, NextResponse } from 'next/server';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { input, types } = await request.json();\r\n    \r\n    if (!input || !input.trim()) {\r\n      return NextResponse.json({ predictions: [] });\r\n    }\r\n\r\n    const apiKey = process.env.NEXT_PUBLIC_GOOGLE_PLACES_API_KEY || process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\r\n    \r\n    if (!apiKey) {\r\n      console.error('❌ Google Places API key not found');\r\n      return NextResponse.json({ error: 'API key not configured' }, { status: 500 });\r\n    }\r\n\r\n    // Use the new Places API Text Search endpoint\r\n    const response = await fetch(\r\n      `https://places.googleapis.com/v1/places:searchText`,\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-Goog-Api-Key': apiKey,\r\n          'X-Goog-FieldMask': 'places.displayName,places.formattedAddress,places.location,places.id,places.types,places.rating,places.priceLevel,places.photos'\r\n        },\r\n        body: JSON.stringify({\r\n          textQuery: input,\r\n          maxResultCount: 5,\r\n          includedType: types?.[0] || 'establishment',\r\n          locationBias: {\r\n            rectangle: {\r\n              low: {\r\n                latitude: -90,\r\n                longitude: -180\r\n              },\r\n              high: {\r\n                latitude: 90,\r\n                longitude: 180\r\n              }\r\n            }\r\n          }\r\n        })\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      console.error('❌ Places API response error:', response.status, response.statusText);\r\n      const errorText = await response.text();\r\n      console.error('Error details:', errorText);\r\n      return NextResponse.json({ error: 'Places API request failed' }, { status: response.status });\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    // Transform the new API response to match the old autocomplete format\r\n    const predictions = data.places?.map((place: any) => ({\r\n      place_id: place.id,\r\n      description: place.formattedAddress || place.displayName?.text || '',\r\n      structured_formatting: {\r\n        main_text: place.displayName?.text || '',\r\n        secondary_text: place.formattedAddress || '',\r\n      },\r\n      types: place.types || [],\r\n      geometry: {\r\n        location: {\r\n          lat: () => place.location?.latitude || 0,\r\n          lng: () => place.location?.longitude || 0,\r\n        }\r\n      },\r\n      rating: place.rating,\r\n      price_level: place.priceLevel,\r\n      photos: place.photos?.map((photo: any) => ({\r\n        getUrl: (opts: any) => `https://places.googleapis.com/v1/${photo.name}/media?maxHeightPx=${opts.maxHeight || 400}&maxWidthPx=${opts.maxWidth || 400}&key=${apiKey}`\r\n      })) || [],\r\n    })) || [];\r\n\r\n    console.log('✅ New Places API success:', predictions.length, 'results');\r\n    \r\n    return NextResponse.json({ predictions });\r\n  } catch (error) {\r\n    console.error('❌ API route error:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n} "
        }
    ]
}