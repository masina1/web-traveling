{
    "sourceFile": "lib/sharing-service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754143387380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754143387380,
            "name": "Commit-0",
            "content": "import {\r\n  collection,\r\n  doc,\r\n  getDoc,\r\n  getDocs,\r\n  updateDoc,\r\n  addDoc,\r\n  query,\r\n  where,\r\n  Timestamp,\r\n} from 'firebase/firestore';\r\nimport { db } from './firebase';\r\nimport { Trip, SharedUser, ShareLink, TripActivity } from '@/types';\r\n\r\nconst TRIPS_COLLECTION = 'trips';\r\nconst SHARE_LINKS_COLLECTION = 'shareLinks';\r\nconst TRIP_ACTIVITY_COLLECTION = 'tripActivity';\r\n\r\n// Generate a unique share token\r\nfunction generateShareToken(): string {\r\n  return Math.random().toString(36).substr(2, 9) + Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\n// Create or update a shareable link for a trip\r\nexport async function createShareLink(\r\n  tripId: string, \r\n  permission: 'view' | 'edit',\r\n  expiresAt?: Date\r\n): Promise<string> {\r\n  try {\r\n    const token = generateShareToken();\r\n    \r\n    // Create share link document\r\n    await addDoc(collection(db, SHARE_LINKS_COLLECTION), {\r\n      tripId,\r\n      token,\r\n      permission,\r\n      expiresAt: expiresAt ? Timestamp.fromDate(expiresAt) : null,\r\n      createdAt: Timestamp.now(),\r\n    });\r\n\r\n    // Update trip with share token\r\n    const tripRef = doc(db, TRIPS_COLLECTION, tripId);\r\n    await updateDoc(tripRef, {\r\n      shareToken: token,\r\n      updatedAt: Timestamp.now(),\r\n    });\r\n\r\n    return token;\r\n  } catch (error) {\r\n    console.error('Error creating share link:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Get trip by share token (for public access)\r\nexport async function getTripByShareToken(token: string): Promise<{\r\n  trip: Trip | null;\r\n  permission: 'view' | 'edit';\r\n}> {\r\n  try {\r\n    // Find share link\r\n    const shareLinksQuery = query(\r\n      collection(db, SHARE_LINKS_COLLECTION),\r\n      where('token', '==', token)\r\n    );\r\n    const shareLinksSnapshot = await getDocs(shareLinksQuery);\r\n    \r\n    if (shareLinksSnapshot.empty) {\r\n      return { trip: null, permission: 'view' };\r\n    }\r\n\r\n    const shareLink = shareLinksSnapshot.docs[0].data() as ShareLink;\r\n    \r\n    // Check if link is expired\r\n    if (shareLink.expiresAt && shareLink.expiresAt.toDate() < new Date()) {\r\n      return { trip: null, permission: 'view' };\r\n    }\r\n\r\n    // Get the trip\r\n    const tripRef = doc(db, TRIPS_COLLECTION, shareLink.tripId);\r\n    const tripDoc = await getDoc(tripRef);\r\n    \r\n    if (!tripDoc.exists()) {\r\n      return { trip: null, permission: 'view' };\r\n    }\r\n\r\n    const tripData = tripDoc.data();\r\n    const trip: Trip = {\r\n      id: tripDoc.id,\r\n      ...tripData,\r\n      createdAt: tripData.createdAt.toDate(),\r\n      updatedAt: tripData.updatedAt.toDate(),\r\n      lastEditedAt: tripData.lastEditedAt?.toDate(),\r\n    } as Trip;\r\n\r\n    return { trip, permission: shareLink.permission };\r\n  } catch (error) {\r\n    console.error('Error fetching trip by share token:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Share trip with specific user\r\nexport async function shareWithUser(\r\n  tripId: string,\r\n  userEmail: string,\r\n  permission: 'view' | 'edit',\r\n  sharedByUserId: string\r\n): Promise<void> {\r\n  try {\r\n    const tripRef = doc(db, TRIPS_COLLECTION, tripId);\r\n    const tripDoc = await getDoc(tripRef);\r\n    \r\n    if (!tripDoc.exists()) {\r\n      throw new Error('Trip not found');\r\n    }\r\n\r\n    const tripData = tripDoc.data() as Trip;\r\n    const currentSharedUsers = tripData.shareSettings?.sharedUsers || [];\r\n    \r\n    // Check if user is already shared with\r\n    const existingUser = currentSharedUsers.find(user => user.email === userEmail);\r\n    \r\n    if (existingUser) {\r\n      // Update permission if different\r\n      if (existingUser.permission !== permission) {\r\n        const updatedUsers = currentSharedUsers.map(user =>\r\n          user.email === userEmail ? { ...user, permission } : user\r\n        );\r\n        \r\n        await updateDoc(tripRef, {\r\n          'shareSettings.sharedUsers': updatedUsers,\r\n          updatedAt: Timestamp.now(),\r\n        });\r\n      }\r\n    } else {\r\n      // Add new shared user\r\n      const newSharedUser: SharedUser = {\r\n        userId: '', // Will be filled when user accepts\r\n        email: userEmail,\r\n        displayName: '', // Will be filled when user accepts\r\n        permission,\r\n        invitedAt: new Date(),\r\n      };\r\n      \r\n      const updatedUsers = [...currentSharedUsers, newSharedUser];\r\n      \r\n      await updateDoc(tripRef, {\r\n        'shareSettings.sharedUsers': updatedUsers,\r\n        updatedAt: Timestamp.now(),\r\n      });\r\n    }\r\n\r\n    // Log activity\r\n    await logTripActivity(tripId, sharedByUserId, 'shared', `Shared with ${userEmail} (${permission} access)`);\r\n  } catch (error) {\r\n    console.error('Error sharing trip with user:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Remove user from shared trip\r\nexport async function removeUserFromTrip(\r\n  tripId: string,\r\n  userEmail: string,\r\n  removedByUserId: string\r\n): Promise<void> {\r\n  try {\r\n    const tripRef = doc(db, TRIPS_COLLECTION, tripId);\r\n    const tripDoc = await getDoc(tripRef);\r\n    \r\n    if (!tripDoc.exists()) {\r\n      throw new Error('Trip not found');\r\n    }\r\n\r\n    const tripData = tripDoc.data() as Trip;\r\n    const currentSharedUsers = tripData.shareSettings?.sharedUsers || [];\r\n    \r\n    const updatedUsers = currentSharedUsers.filter(user => user.email !== userEmail);\r\n    \r\n    await updateDoc(tripRef, {\r\n      'shareSettings.sharedUsers': updatedUsers,\r\n      updatedAt: Timestamp.now(),\r\n    });\r\n\r\n    // Log activity\r\n    await logTripActivity(tripId, removedByUserId, 'unshared', `Removed ${userEmail} from trip`);\r\n  } catch (error) {\r\n    console.error('Error removing user from trip:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Update trip sharing settings\r\nexport async function updateTripSharingSettings(\r\n  tripId: string,\r\n  settings: {\r\n    isPublic?: boolean;\r\n    allowPublicView?: boolean;\r\n    allowPublicEdit?: boolean;\r\n  },\r\n  updatedByUserId: string\r\n): Promise<void> {\r\n  try {\r\n    const tripRef = doc(db, TRIPS_COLLECTION, tripId);\r\n    \r\n    // First, get the current trip to ensure shareSettings exists\r\n    const tripDoc = await getDoc(tripRef);\r\n    if (!tripDoc.exists()) {\r\n      throw new Error('Trip not found');\r\n    }\r\n    \r\n    const tripData = tripDoc.data();\r\n    const currentShareSettings = tripData.shareSettings || {\r\n      isPublic: false,\r\n      allowPublicView: false,\r\n      allowPublicEdit: false,\r\n      sharedUsers: [],\r\n    };\r\n    \r\n    // Create the updated shareSettings object\r\n    const updatedShareSettings = {\r\n      ...currentShareSettings,\r\n      ...(settings.isPublic !== undefined && { isPublic: settings.isPublic }),\r\n      ...(settings.allowPublicView !== undefined && { allowPublicView: settings.allowPublicView }),\r\n      ...(settings.allowPublicEdit !== undefined && { allowPublicEdit: settings.allowPublicEdit }),\r\n    };\r\n    \r\n    await updateDoc(tripRef, {\r\n      shareSettings: updatedShareSettings,\r\n      isPublic: settings.isPublic ?? updatedShareSettings.isPublic, // Keep backward compatibility\r\n      updatedAt: Timestamp.now(),\r\n    });\r\n\r\n    // Log activity\r\n    const changes = Object.entries(settings)\r\n      .filter(([_, value]) => value !== undefined)\r\n      .map(([key, value]) => `${key}: ${value}`)\r\n      .join(', ');\r\n    \r\n    await logTripActivity(tripId, updatedByUserId, 'updated', `Changed sharing settings: ${changes}`);\r\n  } catch (error) {\r\n    console.error('Error updating trip sharing settings:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Check user permissions for a trip\r\nexport async function getUserTripPermission(\r\n  tripId: string,\r\n  userId: string\r\n): Promise<'owner' | 'edit' | 'view' | 'none'> {\r\n  try {\r\n    const tripRef = doc(db, TRIPS_COLLECTION, tripId);\r\n    const tripDoc = await getDoc(tripRef);\r\n    \r\n    if (!tripDoc.exists()) {\r\n      return 'none';\r\n    }\r\n\r\n    const tripData = tripDoc.data() as Trip;\r\n    \r\n    // Check if user is owner\r\n    if (tripData.userId === userId) {\r\n      return 'owner';\r\n    }\r\n\r\n    // Check if user is in shared users list\r\n    const sharedUsers = tripData.shareSettings?.sharedUsers || [];\r\n    const sharedUser = sharedUsers.find(user => user.userId === userId);\r\n    \r\n    if (sharedUser) {\r\n      return sharedUser.permission;\r\n    }\r\n\r\n    // Check if trip allows public access\r\n    if (tripData.shareSettings?.allowPublicEdit) {\r\n      return 'edit';\r\n    }\r\n    \r\n    if (tripData.shareSettings?.allowPublicView || tripData.isPublic) {\r\n      return 'view';\r\n    }\r\n\r\n    return 'none';\r\n  } catch (error) {\r\n    console.error('Error checking user trip permission:', error);\r\n    return 'none';\r\n  }\r\n}\r\n\r\n// Log trip activity\r\nexport async function logTripActivity(\r\n  tripId: string,\r\n  userId: string,\r\n  action: TripActivity['action'],\r\n  details: string,\r\n  userDisplayName?: string\r\n): Promise<void> {\r\n  try {\r\n    await addDoc(collection(db, TRIP_ACTIVITY_COLLECTION), {\r\n      tripId,\r\n      userId,\r\n      userDisplayName: userDisplayName || 'Unknown User',\r\n      action,\r\n      details,\r\n      timestamp: Timestamp.now(),\r\n    });\r\n  } catch (error) {\r\n    console.error('Error logging trip activity:', error);\r\n    // Don't throw - activity logging shouldn't break the main operation\r\n  }\r\n}\r\n\r\n// Get trip activity history\r\nexport async function getTripActivity(tripId: string): Promise<TripActivity[]> {\r\n  try {\r\n    const activityQuery = query(\r\n      collection(db, TRIP_ACTIVITY_COLLECTION),\r\n      where('tripId', '==', tripId)\r\n    );\r\n    \r\n    const activitySnapshot = await getDocs(activityQuery);\r\n    const activities: TripActivity[] = [];\r\n    \r\n    activitySnapshot.forEach((doc) => {\r\n      const data = doc.data();\r\n      activities.push({\r\n        id: doc.id,\r\n        ...data,\r\n        timestamp: data.timestamp.toDate(),\r\n      } as TripActivity);\r\n    });\r\n    \r\n    // Sort by timestamp (newest first)\r\n    return activities.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\r\n  } catch (error) {\r\n    console.error('Error fetching trip activity:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Delete all share links for a trip\r\nexport async function deleteShareLinks(tripId: string): Promise<void> {\r\n  try {\r\n    const shareLinksQuery = query(\r\n      collection(db, SHARE_LINKS_COLLECTION),\r\n      where('tripId', '==', tripId)\r\n    );\r\n    \r\n    const shareLinksSnapshot = await getDocs(shareLinksQuery);\r\n    \r\n    const deletePromises = shareLinksSnapshot.docs.map(doc => \r\n      doc.ref.delete()\r\n    );\r\n    \r\n    await Promise.all(deletePromises);\r\n  } catch (error) {\r\n    console.error('Error deleting share links:', error);\r\n    throw error;\r\n  }\r\n}"
        }
    ]
}