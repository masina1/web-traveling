{
    "sourceFile": "lib/destination-service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752433527529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752433527529,
            "name": "Commit-0",
            "content": "import {\r\n  collection,\r\n  doc,\r\n  addDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  getDocs,\r\n  getDoc,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  Timestamp,\r\n} from 'firebase/firestore';\r\nimport { db } from './firebase';\r\nimport { Destination, CreateDestinationData, UpdateDestinationData } from '@/types';\r\n\r\nconst DESTINATIONS_COLLECTION = 'destinations';\r\n\r\n// Create a new destination\r\nexport async function createDestination(destinationData: CreateDestinationData): Promise<string> {\r\n  try {\r\n    const destinationWithTimestamps = {\r\n      ...destinationData,\r\n      createdAt: Timestamp.now(),\r\n      updatedAt: Timestamp.now(),\r\n    };\r\n    \r\n    const docRef = await addDoc(collection(db, DESTINATIONS_COLLECTION), destinationWithTimestamps);\r\n    return docRef.id;\r\n  } catch (error) {\r\n    console.error('Error creating destination:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Get all destinations for a trip\r\nexport async function getTripDestinations(tripId: string): Promise<Destination[]> {\r\n  try {\r\n    const q = query(\r\n      collection(db, DESTINATIONS_COLLECTION),\r\n      where('tripId', '==', tripId)\r\n    );\r\n    \r\n    const querySnapshot = await getDocs(q);\r\n    const destinations: Destination[] = [];\r\n    \r\n    querySnapshot.forEach((doc) => {\r\n      const data = doc.data();\r\n      destinations.push({\r\n        id: doc.id,\r\n        ...data,\r\n        createdAt: data.createdAt.toDate(),\r\n        updatedAt: data.updatedAt.toDate(),\r\n      } as Destination);\r\n    });\r\n    \r\n    // Sort by day first, then by orderIndex within each day\r\n    return destinations.sort((a, b) => {\r\n      if (a.day !== b.day) return a.day - b.day;\r\n      return a.orderIndex - b.orderIndex;\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching trip destinations:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Get destinations for a specific day of a trip\r\nexport async function getTripDestinationsByDay(tripId: string, day: number): Promise<Destination[]> {\r\n  try {\r\n    const q = query(\r\n      collection(db, DESTINATIONS_COLLECTION),\r\n      where('tripId', '==', tripId),\r\n      where('day', '==', day)\r\n    );\r\n    \r\n    const querySnapshot = await getDocs(q);\r\n    const destinations: Destination[] = [];\r\n    \r\n    querySnapshot.forEach((doc) => {\r\n      const data = doc.data();\r\n      destinations.push({\r\n        id: doc.id,\r\n        ...data,\r\n        createdAt: data.createdAt.toDate(),\r\n        updatedAt: data.updatedAt.toDate(),\r\n      } as Destination);\r\n    });\r\n    \r\n    // Sort by orderIndex within the day\r\n    return destinations.sort((a, b) => a.orderIndex - b.orderIndex);\r\n  } catch (error) {\r\n    console.error('Error fetching destinations by day:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Get a single destination by ID\r\nexport async function getDestination(destinationId: string): Promise<Destination | null> {\r\n  try {\r\n    const docRef = doc(db, DESTINATIONS_COLLECTION, destinationId);\r\n    const docSnap = await getDoc(docRef);\r\n    \r\n    if (docSnap.exists()) {\r\n      const data = docSnap.data();\r\n      return {\r\n        id: docSnap.id,\r\n        ...data,\r\n        createdAt: data.createdAt.toDate(),\r\n        updatedAt: data.updatedAt.toDate(),\r\n      } as Destination;\r\n    }\r\n    \r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error fetching destination:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Update a destination\r\nexport async function updateDestination(destinationId: string, updates: UpdateDestinationData): Promise<void> {\r\n  try {\r\n    const destinationRef = doc(db, DESTINATIONS_COLLECTION, destinationId);\r\n    const updateData = {\r\n      ...updates,\r\n      updatedAt: Timestamp.now(),\r\n    };\r\n    \r\n    await updateDoc(destinationRef, updateData);\r\n  } catch (error) {\r\n    console.error('Error updating destination:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Delete a destination\r\nexport async function deleteDestination(destinationId: string): Promise<void> {\r\n  try {\r\n    const destinationRef = doc(db, DESTINATIONS_COLLECTION, destinationId);\r\n    await deleteDoc(destinationRef);\r\n  } catch (error) {\r\n    console.error('Error deleting destination:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Reorder destinations within a day\r\nexport async function reorderDestinations(tripId: string, day: number, destinationIds: string[]): Promise<void> {\r\n  try {\r\n    const updatePromises = destinationIds.map((destinationId, index) => {\r\n      return updateDestination(destinationId, { orderIndex: index + 1 });\r\n    });\r\n    \r\n    await Promise.all(updatePromises);\r\n  } catch (error) {\r\n    console.error('Error reordering destinations:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Move destination to a different day\r\nexport async function moveDestinationToDay(\r\n  destinationId: string, \r\n  newDay: number, \r\n  newOrderIndex: number\r\n): Promise<void> {\r\n  try {\r\n    await updateDestination(destinationId, { \r\n      day: newDay, \r\n      orderIndex: newOrderIndex \r\n    });\r\n  } catch (error) {\r\n    console.error('Error moving destination to day:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Get next available order index for a day\r\nexport async function getNextOrderIndex(tripId: string, day: number): Promise<number> {\r\n  try {\r\n    const destinations = await getTripDestinationsByDay(tripId, day);\r\n    return destinations.length + 1;\r\n  } catch (error) {\r\n    console.error('Error getting next order index:', error);\r\n    return 1;\r\n  }\r\n}\r\n\r\n// Delete all destinations for a trip (used when deleting a trip)\r\nexport async function deleteAllTripDestinations(tripId: string): Promise<void> {\r\n  try {\r\n    const destinations = await getTripDestinations(tripId);\r\n    const deletePromises = destinations.map(destination => \r\n      deleteDestination(destination.id)\r\n    );\r\n    \r\n    await Promise.all(deletePromises);\r\n  } catch (error) {\r\n    console.error('Error deleting all trip destinations:', error);\r\n    throw error;\r\n  }\r\n} "
        }
    ]
}