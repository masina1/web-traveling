{
    "sourceFile": "lib/trip-service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1752432544787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752432756945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,10 @@\n export async function getUserTrips(userId: string): Promise<Trip[]> {\r\n   try {\r\n     const q = query(\r\n       collection(db, TRIPS_COLLECTION),\r\n-      where('userId', '==', userId),\r\n-      orderBy('createdAt', 'desc')\r\n+      where('userId', '==', userId)\r\n+      // Removed orderBy to avoid composite index requirement\r\n     );\r\n     \r\n     const querySnapshot = await getDocs(q);\r\n     const trips: Trip[] = [];\r\n@@ -54,9 +54,10 @@\n         updatedAt: data.updatedAt.toDate(),\r\n       } as Trip);\r\n     });\r\n     \r\n-    return trips;\r\n+    // Sort by createdAt in descending order (newest first)\r\n+    return trips.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\r\n   } catch (error) {\r\n     console.error('Error fetching user trips:', error);\r\n     throw error;\r\n   }\r\n"
                },
                {
                    "date": 1752432767436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,10 +117,10 @@\n export async function getPublicTrips(): Promise<Trip[]> {\r\n   try {\r\n     const q = query(\r\n       collection(db, TRIPS_COLLECTION),\r\n-      where('isPublic', '==', true),\r\n-      orderBy('createdAt', 'desc')\r\n+      where('isPublic', '==', true)\r\n+      // Removed orderBy to avoid composite index requirement\r\n     );\r\n     \r\n     const querySnapshot = await getDocs(q);\r\n     const trips: Trip[] = [];\r\n@@ -134,9 +134,10 @@\n         updatedAt: data.updatedAt.toDate(),\r\n       } as Trip);\r\n     });\r\n     \r\n-    return trips;\r\n+    // Sort by createdAt in descending order (newest first)\r\n+    return trips.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\r\n   } catch (error) {\r\n     console.error('Error fetching public trips:', error);\r\n     throw error;\r\n   }\r\n"
                }
            ],
            "date": 1752432544787,
            "name": "Commit-0",
            "content": "import {\r\n  collection,\r\n  doc,\r\n  addDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  getDocs,\r\n  getDoc,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  Timestamp,\r\n} from 'firebase/firestore';\r\nimport { db } from './firebase';\r\nimport { Trip, CreateTripData, UpdateTripData } from '@/types';\r\n\r\nconst TRIPS_COLLECTION = 'trips';\r\n\r\n// Create a new trip\r\nexport async function createTrip(tripData: CreateTripData): Promise<string> {\r\n  try {\r\n    const tripWithTimestamps = {\r\n      ...tripData,\r\n      createdAt: Timestamp.now(),\r\n      updatedAt: Timestamp.now(),\r\n    };\r\n    \r\n    const docRef = await addDoc(collection(db, TRIPS_COLLECTION), tripWithTimestamps);\r\n    return docRef.id;\r\n  } catch (error) {\r\n    console.error('Error creating trip:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Get all trips for a user\r\nexport async function getUserTrips(userId: string): Promise<Trip[]> {\r\n  try {\r\n    const q = query(\r\n      collection(db, TRIPS_COLLECTION),\r\n      where('userId', '==', userId),\r\n      orderBy('createdAt', 'desc')\r\n    );\r\n    \r\n    const querySnapshot = await getDocs(q);\r\n    const trips: Trip[] = [];\r\n    \r\n    querySnapshot.forEach((doc) => {\r\n      const data = doc.data();\r\n      trips.push({\r\n        id: doc.id,\r\n        ...data,\r\n        createdAt: data.createdAt.toDate(),\r\n        updatedAt: data.updatedAt.toDate(),\r\n      } as Trip);\r\n    });\r\n    \r\n    return trips;\r\n  } catch (error) {\r\n    console.error('Error fetching user trips:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Get a single trip by ID\r\nexport async function getTrip(tripId: string): Promise<Trip | null> {\r\n  try {\r\n    const docRef = doc(db, TRIPS_COLLECTION, tripId);\r\n    const docSnap = await getDoc(docRef);\r\n    \r\n    if (docSnap.exists()) {\r\n      const data = docSnap.data();\r\n      return {\r\n        id: docSnap.id,\r\n        ...data,\r\n        createdAt: data.createdAt.toDate(),\r\n        updatedAt: data.updatedAt.toDate(),\r\n      } as Trip;\r\n    }\r\n    \r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error fetching trip:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Update a trip\r\nexport async function updateTrip(tripId: string, updates: UpdateTripData): Promise<void> {\r\n  try {\r\n    const tripRef = doc(db, TRIPS_COLLECTION, tripId);\r\n    const updateData = {\r\n      ...updates,\r\n      updatedAt: Timestamp.now(),\r\n    };\r\n    \r\n    await updateDoc(tripRef, updateData);\r\n  } catch (error) {\r\n    console.error('Error updating trip:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Delete a trip\r\nexport async function deleteTrip(tripId: string): Promise<void> {\r\n  try {\r\n    const tripRef = doc(db, TRIPS_COLLECTION, tripId);\r\n    await deleteDoc(tripRef);\r\n  } catch (error) {\r\n    console.error('Error deleting trip:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Get public trips (for future sharing feature)\r\nexport async function getPublicTrips(): Promise<Trip[]> {\r\n  try {\r\n    const q = query(\r\n      collection(db, TRIPS_COLLECTION),\r\n      where('isPublic', '==', true),\r\n      orderBy('createdAt', 'desc')\r\n    );\r\n    \r\n    const querySnapshot = await getDocs(q);\r\n    const trips: Trip[] = [];\r\n    \r\n    querySnapshot.forEach((doc) => {\r\n      const data = doc.data();\r\n      trips.push({\r\n        id: doc.id,\r\n        ...data,\r\n        createdAt: data.createdAt.toDate(),\r\n        updatedAt: data.updatedAt.toDate(),\r\n      } as Trip);\r\n    });\r\n    \r\n    return trips;\r\n  } catch (error) {\r\n    console.error('Error fetching public trips:', error);\r\n    throw error;\r\n  }\r\n} "
        }
    ]
}