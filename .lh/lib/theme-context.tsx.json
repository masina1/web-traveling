{
    "sourceFile": "lib/theme-context.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752487210323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752487897422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,13 +50,9 @@\n   const toggleTheme = () => {\r\n     setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\r\n   };\r\n \r\n-  // Don't render anything until mounted to avoid hydration mismatch\r\n-  if (!mounted) {\r\n-    return null;\r\n-  }\r\n-\r\n+  // Render with default light theme during SSR, then update once mounted\r\n   return (\r\n     <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\r\n       {children}\r\n     </ThemeContext.Provider>\r\n"
                }
            ],
            "date": 1752487210323,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport React, { createContext, useContext, useEffect, useState } from 'react';\r\n\r\ntype Theme = 'light' | 'dark';\r\n\r\ninterface ThemeContextType {\r\n  theme: Theme;\r\n  setTheme: (theme: Theme) => void;\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [theme, setTheme] = useState<Theme>('light');\r\n  const [mounted, setMounted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Get theme from localStorage or default to light\r\n    const savedTheme = localStorage.getItem('theme') as Theme;\r\n    const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\r\n    \r\n    const initialTheme = savedTheme || systemTheme;\r\n    setTheme(initialTheme);\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (mounted) {\r\n      localStorage.setItem('theme', theme);\r\n      \r\n      // Update document class for TailwindCSS dark mode\r\n      if (theme === 'dark') {\r\n        document.documentElement.classList.add('dark');\r\n      } else {\r\n        document.documentElement.classList.remove('dark');\r\n      }\r\n    }\r\n  }, [theme, mounted]);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\r\n  };\r\n\r\n  // Don't render anything until mounted to avoid hydration mismatch\r\n  if (!mounted) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}; "
        }
    ]
}